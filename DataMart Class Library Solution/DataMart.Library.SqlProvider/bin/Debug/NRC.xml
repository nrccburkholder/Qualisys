<?xml version="1.0"?>
<doc>
<assembly>
<name>
Nrc.Framework
</name>
</assembly>
<members>
<member name="T:Nrc.Framework.Configuration.EnvironmentCollection">
	<summary>
 Represents a collection of Environments
 </summary>
</member><member name="T:Nrc.Framework.WinForms.ThemeInfo">
 -----------------------------------------------------------------------------
 Project	 : NRC Class Library
 Class	 : WinForms.ThemeInfo
 
 -----------------------------------------------------------------------------
 <summary>
 Provides information about the current Windows XP theme
 </summary>
	<remarks>
	</remarks>
	<history>
 	[jcamp]	8/18/2005	Created
 </history>
 -----------------------------------------------------------------------------

</member><member name="T:Nrc.Framework.Configuration.SettingCollection">
	<summary>Represents a collection of Settings</summary>
</member><member name="T:Nrc.Framework.Data.DbfColumnType">
	<summary>
 Enumerations the data types supported by the DbfWriter class
 </summary>
	<remarks></remarks>
</member><member name="T:Nrc.Framework.Configuration.Environment">
	<summary>
 Represents a configuration environment and contains collections of its configuration settings and web url identifiers 
 </summary>
</member><member name="T:Nrc.Framework.Configuration.EnvironmentType">
	<summary>
 Represents the various envrionment types that can exist
 </summary>
</member><member name="M:Nrc.Framework.WinForms.ScreenScraper.PerformCapture">
 -----------------------------------------------------------------------------
 <summary>
 Captures current screen pixels and stores them to a Bitmap object
 </summary>
	<returns>returns a Bitmap object of the screen capture</returns>
	<remarks>
	</remarks>
	<history>
 	[JCamp]	7/7/2004	Created
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:Nrc.Framework.Data.SafeDataReader.#ctor(System.Data.IDataReader)">
	<summary>
 Initializes the SafeDataReader object to use data from
 the provided DataReader object.
 </summary>
	<param name="DataReader">The source DataReader object containing the data.</param>
</member><member name="M:Nrc.Framework.Data.SafeDataReader.GetString(System.Int32)">
	<summary>
 Gets a string value from the datareader.
 </summary>
	<remarks>
 Returns empty string for null.
 </remarks>
</member><member name="M:Nrc.Framework.Data.SafeDataReader.GetString(System.Int32,System.String)">
	<summary>
 Gets a string value from the datareader.
 </summary>
	<remarks>
 Returns empty string for null.
 </remarks>
</member><member name="M:Nrc.Framework.Data.SafeDataReader.GetString(System.String)">
	<summary>
 Gets a string value from the datareader.
 </summary>
	<remarks>
 Returns "" for null.
 </remarks>
</member><member name="M:Nrc.Framework.Data.SafeDataReader.GetString(System.String,System.String)">
	<summary>
 Gets a string value from the datareader.
 </summary>
	<remarks>
 Returns "" for null.
 </remarks>
</member><member name="M:Nrc.Framework.Data.SafeDataReader.GetInt32(System.Int32)">
	<summary>
 Gets an integer from the datareader.
 </summary>
	<remarks>
 Returns 0 for null.
 </remarks>
</member><member name="M:Nrc.Framework.Data.SafeDataReader.GetInt32(System.Int32,System.Int32)">
	<summary>
 Gets an integer from the datareader.
 </summary>
</member><member name="M:Nrc.Framework.Data.SafeDataReader.GetInt32(System.String)">
	<summary>
 Gets an integer from the datareader.
 </summary>
	<remarks>
 Returns 0 for null.
 </remarks>
</member><member name="M:Nrc.Framework.Data.SafeDataReader.GetInt32(System.String,System.Int32)">
	<summary>
 Gets an integer from the datareader.
 </summary>
	<remarks>
 Returns 0 for null.
 </remarks>
</member><member name="M:Nrc.Framework.Data.SafeDataReader.GetInteger(System.Int32)">
	<summary>
 Gets an integer from the datareader.
 </summary>
	<remarks>
 Returns 0 for null.
 </remarks>
</member><member name="M:Nrc.Framework.Data.SafeDataReader.GetInteger(System.Int32,System.Int32)">
	<summary>
 Gets an integer from the datareader.
 </summary>
</member><member name="M:Nrc.Framework.Data.SafeDataReader.GetInteger(System.String)">
	<summary>
 Gets an integer from the datareader.
 </summary>
	<remarks>
 Returns 0 for null.
 </remarks>
</member><member name="M:Nrc.Framework.Data.SafeDataReader.GetInteger(System.String,System.Int32)">
	<summary>
 Gets an integer from the datareader.
 </summary>
</member><member name="M:Nrc.Framework.Data.SafeDataReader.GetDouble(System.Int32)">
	<summary>
 Gets a double from the datareader.
 </summary>
	<remarks>
 Returns 0 for null.
 </remarks>
</member><member name="M:Nrc.Framework.Data.SafeDataReader.GetDouble(System.Int32,System.Double)">
	<summary>
 Gets a double from the datareader.
 </summary>
</member><member name="M:Nrc.Framework.Data.SafeDataReader.GetDouble(System.String)">
	<summary>
 Gets a double from the datareader.
 </summary>
	<remarks>
 Returns 0 for null.
 </remarks>
</member><member name="M:Nrc.Framework.Data.SafeDataReader.GetDouble(System.String,System.Double)">
	<summary>
 Gets a double from the datareader.
 </summary>
</member><member name="M:Nrc.Framework.Data.SafeDataReader.GetGuid(System.Int32)">
	<summary>
 Gets a Guid value from the datareader.
 </summary>
</member><member name="M:Nrc.Framework.Data.SafeDataReader.GetGuid(System.String)">
	<summary>
 Gets a Guid value from the datareader.
 </summary>
</member><member name="M:Nrc.Framework.Data.SafeDataReader.GetBoolean(System.Int32)">
	<summary>
 Gets a boolean value from the datareader.
 </summary>
</member><member name="M:Nrc.Framework.Data.SafeDataReader.GetBoolean(System.String)">
	<summary>
 Gets a boolean value from the datareader.
 </summary>
</member><member name="M:Nrc.Framework.Data.SafeDataReader.GetByte(System.Int32)">
	<summary>
 Gets a byte value from the datareader.
 </summary>
</member><member name="M:Nrc.Framework.Data.SafeDataReader.GetByte(System.Int32,System.Byte)">
	<summary>
 Gets a byte value from the datareader.
 </summary>
</member><member name="M:Nrc.Framework.Data.SafeDataReader.GetByte(System.String)">
	<summary>
 Gets a byte value from the datareader.
 </summary>
</member><member name="M:Nrc.Framework.Data.SafeDataReader.GetByte(System.String,System.Byte)">
	<summary>
 Gets a byte value from the datareader.
 </summary>
</member><member name="M:Nrc.Framework.Data.SafeDataReader.GetBytes(System.String)">
	<summary>
 Invokes the GetBytes method of the underlying datareader.
 </summary>
</member><member name="M:Nrc.Framework.Data.SafeDataReader.GetBytes(System.Int32)">
	<summary>
 Invokes the GetBytes method of the underlying datareader.
 </summary>
</member><member name="M:Nrc.Framework.Data.SafeDataReader.GetBytes(System.Int32,System.Int64,System.Byte[],System.Int32,System.Int32)">
	<summary>
 Invokes the GetBytes method of the underlying datareader.
 </summary>
</member><member name="M:Nrc.Framework.Data.SafeDataReader.GetBytes(System.String,System.Int64,System.Byte[],System.Int32,System.Int32)">
	<summary>
 Invokes the GetBytes method of the underlying datareader.
 </summary>
</member><member name="M:Nrc.Framework.Data.SafeDataReader.GetChar(System.Int32)">
	<summary>
 Gets a char value from the datareader.
 </summary>
</member><member name="M:Nrc.Framework.Data.SafeDataReader.GetChar(System.String)">
	<summary>
 Gets a char value from the datareader.
 </summary>
</member><member name="M:Nrc.Framework.Data.SafeDataReader.GetChars(System.Int32,System.Int64,System.Char[],System.Int32,System.Int32)">
	<summary>
 Invokes the GetChars method of the underlying datareader.
 </summary>
</member><member name="M:Nrc.Framework.Data.SafeDataReader.GetChars(System.String,System.Int64,System.Char[],System.Int32,System.Int32)">
	<summary>
 Invokes the GetChars method of the underlying datareader.
 </summary>
</member><member name="M:Nrc.Framework.Data.SafeDataReader.GetDate(System.Int32)">
	<summary>
 Gets a date value from the datareader.
 </summary>
</member><member name="M:Nrc.Framework.Data.SafeDataReader.GetDate(System.String)">
	<summary>
 Gets a date value from the datareader.
 </summary>
</member><member name="M:Nrc.Framework.Data.SafeDataReader.GetDecimal(System.Int32)">
	<summary>
 Gets a decimal value from the datareader.
 </summary>
</member><member name="M:Nrc.Framework.Data.SafeDataReader.GetDecimal(System.Int32,System.Decimal)">
	<summary>
 Gets a decimal value from the datareader.
 </summary>
</member><member name="M:Nrc.Framework.Data.SafeDataReader.GetDecimal(System.String)">
	<summary>
 Gets a decimal value from the datareader.
 </summary>
</member><member name="M:Nrc.Framework.Data.SafeDataReader.GetDecimal(System.String,System.Decimal)">
	<summary>
 Gets a decimal value from the datareader.
 </summary>
</member><member name="M:Nrc.Framework.Data.SafeDataReader.GetFloat(System.Int32)">
	<summary>
 Gets a Single value from the datareader.
 </summary>
</member><member name="M:Nrc.Framework.Data.SafeDataReader.GetFloat(System.Int32,System.Single)">
	<summary>
 Gets a Single value from the datareader.
 </summary>
</member><member name="M:Nrc.Framework.Data.SafeDataReader.GetFloat(System.String)">
	<summary>
 Gets a Single value from the datareader.
 </summary>
</member><member name="M:Nrc.Framework.Data.SafeDataReader.GetFloat(System.String,System.Single)">
	<summary>
 Gets a Single value from the datareader.
 </summary>
</member><member name="M:Nrc.Framework.Data.SafeDataReader.GetInt16(System.Int32)">
	<summary>
 Gets a Short value from the datareader.
 </summary>
</member><member name="M:Nrc.Framework.Data.SafeDataReader.GetInt16(System.Int32,System.Int16)">
	<summary>
 Gets a Short value from the datareader.
 </summary>
</member><member name="M:Nrc.Framework.Data.SafeDataReader.GetInt16(System.String)">
	<summary>
 Gets a Short value from the datareader.
 </summary>
</member><member name="M:Nrc.Framework.Data.SafeDataReader.GetInt16(System.String,System.Int16)">
	<summary>
 Gets a Short value from the datareader.
 </summary>
</member><member name="M:Nrc.Framework.Data.SafeDataReader.GetShort(System.Int32)">
	<summary>
 Gets a Short value from the datareader.
 </summary>
</member><member name="M:Nrc.Framework.Data.SafeDataReader.GetShort(System.Int32,System.Int16)">
	<summary>
 Gets a Short value from the datareader.
 </summary>
</member><member name="M:Nrc.Framework.Data.SafeDataReader.GetShort(System.String)">
	<summary>
 Gets a Short value from the datareader.
 </summary>
</member><member name="M:Nrc.Framework.Data.SafeDataReader.GetShort(System.String,System.Int16)">
	<summary>
 Gets a Short value from the datareader.
 </summary>
</member><member name="M:Nrc.Framework.Data.SafeDataReader.GetInt64(System.Int32)">
	<summary>
 Gets a Long value from the datareader.
 </summary>
</member><member name="M:Nrc.Framework.Data.SafeDataReader.GetInt64(System.Int32,System.Int64)">
	<summary>
 Gets a Long value from the datareader.
 </summary>
</member><member name="M:Nrc.Framework.Data.SafeDataReader.GetInt64(System.String)">
	<summary>
 Gets a Long value from the datareader.
 </summary>
</member><member name="M:Nrc.Framework.Data.SafeDataReader.GetInt64(System.String,System.Int64)">
	<summary>
 Gets a Long value from the datareader.
 </summary>
</member><member name="M:Nrc.Framework.Data.SafeDataReader.GetNullableInteger(System.Int32)">
	<summary>
 Gets an integer from the datareader.
 </summary>
</member><member name="M:Nrc.Framework.Data.SafeDataReader.GetNullableInteger(System.String)">
	<summary>
 Gets an integer from the datareader.
 </summary>
</member><member name="M:Nrc.Framework.Data.SafeDataReader.GetNullableDouble(System.Int32)">
	<summary>
 Gets a double from the datareader.
 </summary>
</member><member name="M:Nrc.Framework.Data.SafeDataReader.GetNullableDouble(System.String)">
	<summary>
 Gets a double from the datareader.
 </summary>
</member><member name="M:Nrc.Framework.Data.SafeDataReader.GetNullableBoolean(System.Int32)">
	<summary>
 Gets a boolean value from the datareader.
 </summary>
</member><member name="M:Nrc.Framework.Data.SafeDataReader.GetNullableBoolean(System.String)">
	<summary>
 Gets a boolean value from the datareader.
 </summary>
</member><member name="M:Nrc.Framework.Data.SafeDataReader.GetNullableByte(System.Int32)">
	<summary>
 Gets a byte value from the datareader.
 </summary>
</member><member name="M:Nrc.Framework.Data.SafeDataReader.GetNullableByte(System.String)">
	<summary>
 Gets a byte value from the datareader.
 </summary>
</member><member name="M:Nrc.Framework.Data.SafeDataReader.GetNullableChar(System.Int32)">
	<summary>
 Gets a char value from the datareader.
 </summary>
</member><member name="M:Nrc.Framework.Data.SafeDataReader.GetNullableChar(System.String)">
	<summary>
 Gets a char value from the datareader.
 </summary>
</member><member name="M:Nrc.Framework.Data.SafeDataReader.GetNullableDate(System.Int32)">
	<summary>
 Gets a date value from the datareader.
 </summary>
</member><member name="M:Nrc.Framework.Data.SafeDataReader.GetNullableDate(System.String)">
	<summary>
 Gets a date value from the datareader.
 </summary>
</member><member name="M:Nrc.Framework.Data.SafeDataReader.GetNullableDecimal(System.Int32)">
	<summary>
 Gets a decimal value from the datareader.
 </summary>
</member><member name="M:Nrc.Framework.Data.SafeDataReader.GetNullableDecimal(System.String)">
	<summary>
 Gets a decimal value from the datareader.
 </summary>
</member><member name="M:Nrc.Framework.Data.SafeDataReader.GetNullableFloat(System.Int32)">
	<summary>
 Gets a Single value from the datareader.
 </summary>
</member><member name="M:Nrc.Framework.Data.SafeDataReader.GetNullableFloat(System.String)">
	<summary>
 Gets a Single value from the datareader.
 </summary>
</member><member name="M:Nrc.Framework.Data.SafeDataReader.GetNullableInt16(System.Int32)">
	<summary>
 Gets a Short value from the datareader.
 </summary>
</member><member name="M:Nrc.Framework.Data.SafeDataReader.GetNullableInt16(System.String)">
	<summary>
 Gets a Short value from the datareader.
 </summary>
</member><member name="M:Nrc.Framework.Data.SafeDataReader.GetNullableShort(System.Int32)">
	<summary>
 Gets a Short value from the datareader.
 </summary>
</member><member name="M:Nrc.Framework.Data.SafeDataReader.GetNullableShort(System.String)">
	<summary>
 Gets a Short value from the datareader.
 </summary>
</member><member name="M:Nrc.Framework.Data.SafeDataReader.GetNullableInt64(System.Int32)">
	<summary>
 Gets a Long value from the datareader.
 </summary>
</member><member name="M:Nrc.Framework.Data.SafeDataReader.GetNullableInt64(System.String)">
	<summary>
 Gets a Long value from the datareader.
 </summary>
</member><member name="M:Nrc.Framework.Data.SafeDataReader.GetValue(System.Int32)">
	<summary>
 Gets a value of type <see cref="System.Object"/> from the datareader.
 </summary>
	<remarks>
 Returns Nothing for null.
 </remarks>
</member><member name="M:Nrc.Framework.Data.SafeDataReader.GetValue(System.String)">
	<summary>
 Gets a value of type <see cref="System.Object"/> from the datareader.
 </summary>
	<remarks>
 Returns Nothing for null.
 </remarks>
</member><member name="M:Nrc.Framework.Data.SafeDataReader.Read">
	<summary>
 Reads the next row of data from the datareader.
 </summary>
</member><member name="M:Nrc.Framework.Data.SafeDataReader.NextResult">
	<summary>
 Moves to the next result set in the datareader.
 </summary>
</member><member name="M:Nrc.Framework.Data.SafeDataReader.Close">
	<summary>
 Closes the datareader.
 </summary>
</member><member name="P:Nrc.Framework.Data.SafeDataReader.Depth">
	<summary>
 Returns the depth property value from the datareader.
 </summary>
</member><member name="M:Nrc.Framework.Data.SafeDataReader.Dispose">
	<summary>
 Calls the Dispose method on the underlying datareader.
 </summary>
</member><member name="P:Nrc.Framework.Data.SafeDataReader.FieldCount">
	<summary>
 Returns the FieldCount property from the datareader.
 </summary>
</member><member name="M:Nrc.Framework.Data.SafeDataReader.GetData(System.Int32)">
	<summary>
 Invokes the GetData method of the underlying datareader.
 </summary>
</member><member name="M:Nrc.Framework.Data.SafeDataReader.GetData(System.String)">
	<summary>
 Invokes the GetData method of the underlying datareader.
 </summary>
</member><member name="M:Nrc.Framework.Data.SafeDataReader.GetDataTypeName(System.Int32)">
	<summary>
 Invokes the GetDataTypeName method of the underlying datareader.
 </summary>
</member><member name="M:Nrc.Framework.Data.SafeDataReader.GetDataTypeName(System.String)">
	<summary>
 Invokes the GetDataTypeName method of the underlying datareader.
 </summary>
</member><member name="M:Nrc.Framework.Data.SafeDataReader.GetFieldType(System.Int32)">
	<summary>
 Invokes the GetFieldType method of the underlying datareader.
 </summary>
</member><member name="M:Nrc.Framework.Data.SafeDataReader.GetFieldType(System.String)">
	<summary>
 Invokes the GetFieldType method of the underlying datareader.
 </summary>
</member><member name="M:Nrc.Framework.Data.SafeDataReader.GetName(System.Int32)">
	<summary>
 Invokes the GetName method of the underlying datareader.
 </summary>
</member><member name="M:Nrc.Framework.Data.SafeDataReader.GetOrdinal(System.String)">
	<summary>
 Gets an ordinal value from the datareader.
 </summary>
</member><member name="M:Nrc.Framework.Data.SafeDataReader.GetSchemaTable">
	<summary>
 Invokes the GetSchemaTable method of the underlying datareader.
 </summary>
</member><member name="M:Nrc.Framework.Data.SafeDataReader.GetValues(System.Object[])">
	<summary>
 Invokes the GetValues method of the underlying datareader.
 </summary>
</member><member name="P:Nrc.Framework.Data.SafeDataReader.IsClosed">
	<summary>
 Returns the IsClosed property value from the datareader.
 </summary>
</member><member name="M:Nrc.Framework.Data.SafeDataReader.IsDBNull(System.Int32)">
	<summary>
 Invokes the IsDBNull method of the underlying datareader.
 </summary>
</member><member name="M:Nrc.Framework.Data.SafeDataReader.IsDBNull(System.String)">
	<summary>
 Invokes the IsDBNull method of the underlying datareader.
 </summary>
</member><member name="P:Nrc.Framework.Data.SafeDataReader.Item(System.String)">
	<summary>
 Returns a value from the datareader.
 </summary>
	<remarks>
 Returns Nothing if the value is null.
 </remarks>
</member><member name="P:Nrc.Framework.Data.SafeDataReader.Item(System.Int32)">
	<summary>
 Returns a value from the datareader.
 </summary>
	<remarks>
 Returns Nothing if the value is null.
 </remarks>
</member><member name="P:Nrc.Framework.Data.SafeDataReader.RecordsAffected">
	<summary>
 Returns the RecordsAffected property value from the underlying datareader.
 </summary>
</member><member name="T:Nrc.Framework.Data.SafeDataReader">
	<summary>
 This is a DataReader that 'fixes' any null values before
 they are returned to our business code.
 </summary>
</member><member name="P:Nrc.Framework.WinForms.PaneCaption.Caption">
 -----------------------------------------------------------------------------
 <summary>
 The text the be rendered in the caption
 </summary>
	<history>
 	[JCamp]	6/22/2004	Created
 </history>
 -----------------------------------------------------------------------------

</member><member name="P:Nrc.Framework.WinForms.PaneCaption.Text">
 -----------------------------------------------------------------------------
 <summary>
 The text the be rendered in the caption
 </summary>
	<history>
 	[JCamp]	6/22/2004	Created
 </history>
 -----------------------------------------------------------------------------

</member><member name="P:Nrc.Framework.WinForms.PaneCaption.Active">
 -----------------------------------------------------------------------------
 <summary>
 Returns true if the caption is in the active state
 </summary>
	<history>
 	[JCamp]	6/22/2004	Created
 </history>
 -----------------------------------------------------------------------------

</member><member name="P:Nrc.Framework.WinForms.PaneCaption.AllowActive">
 -----------------------------------------------------------------------------
 <summary>
 Determines if the caption can change between an active and inactive state
 </summary>
	<history>
 	[JCamp]	6/22/2004	Created
 </history>
 -----------------------------------------------------------------------------

</member><member name="P:Nrc.Framework.WinForms.PaneCaption.AntiAlias">
 -----------------------------------------------------------------------------
 <summary>
 Determines if Anit-Aliasing should be used to draw the text on the caption
 </summary>
	<history>
 	[JCamp]	6/22/2004	Created
 </history>
 -----------------------------------------------------------------------------
 

</member><member name="P:Nrc.Framework.WinForms.PaneCaption.ActiveTextColor">
 -----------------------------------------------------------------------------
 <summary>
 The color of the text with the pane caption is active
 </summary>
	<history>
 	[JCamp]	7/14/2004	Created
 </history>
 -----------------------------------------------------------------------------

</member><member name="P:Nrc.Framework.WinForms.PaneCaption.InactiveTextColor">
 -----------------------------------------------------------------------------
 <summary>
 The color of the text with the pane caption is inactive
 </summary>
	<history>
 	[JCamp]	7/14/2004	Created
 </history>
 -----------------------------------------------------------------------------

</member><member name="P:Nrc.Framework.WinForms.PaneCaption.ActiveGradientLowColor">
 -----------------------------------------------------------------------------
 <summary>
 The low gradient color when the pane caption is active
 </summary>
	<history>
 	[JCamp]	7/14/2004	Created
 </history>
 -----------------------------------------------------------------------------

</member><member name="P:Nrc.Framework.WinForms.PaneCaption.ActiveGradientHighColor">
 -----------------------------------------------------------------------------
 <summary>
 The high gradient color when the pane caption is active
 </summary>
	<history>
 	[JCamp]	7/14/2004	Created
 </history>
 -----------------------------------------------------------------------------

</member><member name="P:Nrc.Framework.WinForms.PaneCaption.InactiveGradientLowColor">
 -----------------------------------------------------------------------------
 <summary>
 The low gradient color when the pane caption is inactive
 </summary>
	<history>
 	[JCamp]	7/14/2004	Created
 </history>
 -----------------------------------------------------------------------------

</member><member name="P:Nrc.Framework.WinForms.PaneCaption.InactiveGradientHighColor">
 -----------------------------------------------------------------------------
 <summary>
 The high gradient color when the pane caption is inactive
 </summary>
	<history>
 	[JCamp]	7/14/2004	Created
 </history>
 -----------------------------------------------------------------------------

</member><member name="P:Nrc.Framework.WinForms.PaneCaption.TextBrush">
 -----------------------------------------------------------------------------
 <summary>
 Brush used to draw the caption text
 </summary>
	<history>
 	[JCamp]	7/14/2004	Created
 </history>
 -----------------------------------------------------------------------------

</member><member name="P:Nrc.Framework.WinForms.PaneCaption.BackBrush">
 -----------------------------------------------------------------------------
 <summary>
 Brush used to draw the gradient background
 </summary>
	<history>
 	[JCamp]	7/14/2004	Created
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:Nrc.Framework.WinForms.PaneCaption.#ctor">
 -----------------------------------------------------------------------------
 <summary>
 Default constructor
 </summary>
	<remarks>
	</remarks>
	<history>
 	[JCamp]	6/22/2004	Created
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:Nrc.Framework.WinForms.PaneCaption.OnPaint(System.Windows.Forms.PaintEventArgs)">
 -----------------------------------------------------------------------------
 <summary>
 Overrides the baseclass OnPaint and additionally draws the PaneCaption.
 </summary>
	<param name="e">the PaintEventArgs for this control</param>
	<history>
 	[JCamp]	7/14/2004	Created
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:Nrc.Framework.WinForms.PaneCaption.OnMouseDown(System.Windows.Forms.MouseEventArgs)">
 -----------------------------------------------------------------------------
 <summary>
 Overrides the baseclass OnMouseDown so that the control gets focus if AllowActive is true.
 </summary>
	<param name="e">the MouseEventArgs for the event</param>
	<history>
 	[JCamp]	7/14/2004	Created
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:Nrc.Framework.WinForms.PaneCaption.OnSizeChanged(System.EventArgs)">
 -----------------------------------------------------------------------------
 <summary>
 Overrides the baseclass OnSizeChanged to redraw the PaneCaption
 </summary>
	<param name="e">The EventArgs for the event</param>
	<history>
 	[JCamp]	7/14/2004	Created
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:Nrc.Framework.WinForms.PaneCaption.DrawCaption(System.Drawing.Graphics)">
 -----------------------------------------------------------------------------
 <summary>
 Draws the caption gradient and text onto the control
 </summary>
	<param name="g">the Graphics object of the control</param>
	<history>
 	[JCamp]	7/14/2004	Created
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:Nrc.Framework.WinForms.PaneCaption.CreateGradientBrushes">
 -----------------------------------------------------------------------------
 <summary>
 Create the brushes for drawing the control
 </summary>
	<history>
 	[JCamp]	7/14/2004	Created
 </history>
 -----------------------------------------------------------------------------

</member><member name="T:Nrc.Framework.WinForms.PaneCaption">
 -----------------------------------------------------------------------------
 Project	 : NRC_Common_Classes
 Class	 : WinForms.PaneCaption
 
 -----------------------------------------------------------------------------
 <summary>
 This class is a UserControl that renders a caption in a pane on a form.  The
 caption is drawn with a gradient and anti-alias font.
 </summary>
	<remarks>
	</remarks>
	<history>
 	[JCamp]	6/22/2004	Created
 </history>
 -----------------------------------------------------------------------------

</member><member name="F:Nrc.Framework.Data.DataRowReader.mIndex">
	<summary>The index of the row that the reader is currently reading from</summary>
</member><member name="F:Nrc.Framework.Data.DataRowReader.mRows">
	<summary>The array of DataRows that the reader is reading from</summary>
</member><member name="P:Nrc.Framework.Data.DataRowReader.CurrentRow">
	<summary>
 Returns the DataRow object that the reader is currently reading from
 </summary>
</member><member name="M:Nrc.Framework.Data.DataRowReader.#ctor(System.Data.DataRow[])">
	<summary>
 Initializes the DataRowReader with a set of DataRow objects
 </summary>
	<param name="rows">The array of DataRow objects that the reader will read from</param>
</member><member name="M:Nrc.Framework.Data.DataRowReader.#ctor(System.Data.DataRowCollection)">
	<summary>
 Initializes the DataRowReader with a collection of DataRow objects
 </summary>
	<param name="rows">The collection of DataRow objects that the reader will read from</param>
</member><member name="T:Nrc.Framework.Data.DataRowReader">
	<summary>
 This class implements an IDataReader that reads data from a set of DataRow objects from a DataTable
 </summary>
	<remarks>When reading directly from a DataTable the System.Data.DataTableReader should be sufficient
 however, sometimes DataRows are accessed though DataTable Relationships such as the GetChildRows()
 method that returns an array of DataRow objects.  In such a case it may still be disireable to read
 the data though an IDataReader interface.  DataRowReader does exactly that.</remarks>
</member><member name="P:Nrc.Framework.WinForms.SectionPanel.Caption">
 -----------------------------------------------------------------------------
 <summary>
 If ShowCaption is True then this text will be displayed in the Pane Caption at the top of the SectionPanel control.
 </summary>
	<history>
 	[JCamp]	7/14/2004	Created
 </history>
 -----------------------------------------------------------------------------

</member><member name="P:Nrc.Framework.WinForms.SectionPanel.ShowCaption">
 -----------------------------------------------------------------------------
 <summary>
 Determines if the PaneCaption at the top of the control will be displayed.
 </summary>
	<history>
 	[JCamp]	7/14/2004	Created
 </history>
 -----------------------------------------------------------------------------

</member><member name="P:Nrc.Framework.WinForms.SectionPanel.BorderColor">
 -----------------------------------------------------------------------------
 <summary>
 The color of the border drawn around the section.
 </summary>
	<history>
 	[JCamp]	7/14/2004	Created
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:Nrc.Framework.WinForms.SectionPanel.#ctor">
 -----------------------------------------------------------------------------
 <summary>
 Default constructor to initialize the SectionPanel control.
 </summary>
	<remarks>
	</remarks>
	<history>
 	[JCamp]	7/14/2004	Created
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:Nrc.Framework.WinForms.SectionPanel.OnPaint(System.Windows.Forms.PaintEventArgs)">
 -----------------------------------------------------------------------------
 <summary>
 Overrides OnPaint to also draw a border around the control.
 </summary>
	<param name="e">the PaintEventArgs for this control</param>
	<remarks>
	</remarks>
	<history>
 	[JCamp]	7/14/2004	Created
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:Nrc.Framework.WinForms.SectionPanel.DrawBorder(System.Drawing.Graphics)">
 -----------------------------------------------------------------------------
 <summary>
 Draws a 1 pixel border around the outside of the control.
 </summary>
	<param name="g"></param>
	<remarks>
	</remarks>
	<history>
 	[JCamp]	7/14/2004	Created
 </history>
 -----------------------------------------------------------------------------

</member><member name="T:Nrc.Framework.WinForms.SectionPanel">
 -----------------------------------------------------------------------------
 Project	 : NRC_Common_Classes
 Class	 : WinForms.SectionPanel
 
 -----------------------------------------------------------------------------
 <summary>
 Represents a section on a form drawn with a colored border around it and an
 optional PaneCaption at the top.
 </summary>
	<remarks>
 This control is used to distinguish different sections of the form much like how
 a group box would be used.
 </remarks>
	<history>
 	[JCamp]	7/14/2004	Created
 </history>
 -----------------------------------------------------------------------------

</member><member name="T:Nrc.Framework.Configuration.EnvironmentSettingsSectionHandler">
	<summary>
 A custom Configuration Section Handler for the environmentSettings
 section of a .Config file
 </summary>
	<remarks>
		<example>
			<code>
				<![CDATA[
 <configuration>
   <configSections>
     <section name="environmentSettings" type="Nrc.Framework.Configuration.EnvironmentSettingsSectionHandler, Nrc.Framework"/>
   </configSections>

   <environmentSettings currentEnvironment="Testing">
     <environment name="Production">
       <setting name="connectionString" value="Production connection string" />
       <setting name="SQLTimeout" value="60" />
       <setting name="ImportantPath" value="G:\Application\Data.xml" />	
     </environment>
     <environment name="Testing">
       <setting name="connectionString" value="Testing connection string" />
       <setting name="SQLTimeout" value="600" />
       <setting name="ImportantPath" value="C:\Application\Data.xml" />	
     </environment>
   </environmentSettings>
 </configuration>
 ]]>
			</code>
		</example>
		<example>
			<code>
				<![CDATA[
 <configuration>
   <configSections>
     <section name="environmentSettings" type="NRC.Configuration.EnvironmentSectionHandler, NRC"/>
   </configSections>

   <environmentSettings>
     <environment name="Production">
       <environmentID name="www.thenrcpickergroup.com" />
       <setting name="connectionString" value="Production connection string" />
       <setting name="SQLTimeout" value="60" />
       <setting name="ImportantPath" value="G:\Application\Data.xml" />	
     </environment>
     <environment name="Testing">
       <environmentID name="dev.thenrcpickergroup.com" />
       <environmentID name="localhost" />
       <setting name="connectionString" value="Testing connection string" />
       <setting name="SQLTimeout" value="600" />
       <setting name="ImportantPath" value="C:\Application\Data.xml" />	
     </environment>
   </environmentSettings>
 </configuration>
 ]]>
			</code>
		</example>
	</remarks>
</member><member name="M:Nrc.Framework.Security.CryptoHelper.CreateDESCryptoHelper(System.Byte[],System.Byte[])">
	<summary>
 Creates a CryptoHelper instance using the DES algorithm
 </summary>
	<param name="key">An 8 byte encryption key</param>
	<param name="vector">An 8 byte initialization vector</param>
	<returns>Returns a new CryptoHelper instance.</returns>
</member><member name="M:Nrc.Framework.Security.CryptoHelper.CreateDESCryptoHelper">
	<summary>
 Creates a CryptoHelper instance using the DES algorithm with a generated key and initialization vector
 </summary>
	<returns>Returns a new CryptoHelper instance.</returns>
</member><member name="M:Nrc.Framework.Security.CryptoHelper.CreateTripleDESCryptoHelper(System.Byte[],System.Byte[])">
	<summary>
 Creates a CryptoHelper instance using the Triple DES algorithm
 </summary>
	<param name="key">A 16 or 24 byte encryption key</param>
	<param name="vector">An 8 byte initialization vector</param>
	<returns>Returns a new CryptoHelper instance.</returns>
</member><member name="M:Nrc.Framework.Security.CryptoHelper.CreateTripleDESCryptoHelper">
	<summary>
 Creates a CryptoHelper instance using the Triple DES algorithm with a generated key and initialization vector
 </summary>
	<returns>Returns a new CryptoHelper instance.</returns>
</member><member name="M:Nrc.Framework.Security.CryptoHelper.CreateAESCryptoHelper(System.Byte[],System.Byte[])">
	<summary>
 Creates a CryptoHelper instance using the AES (Rijndael) algorithm
 </summary>
	<param name="key">A 16 byte encryption key</param>
	<param name="vector">A 16 byte initialization vector</param>
	<returns>Returns a new CryptoHelper instance.</returns>
</member><member name="M:Nrc.Framework.Security.CryptoHelper.CreateAESCryptoHelper">
	<summary>
 Creates a CryptoHelper instance using the AES (Rijndael) algorithm with a generated key and initialization vector
 </summary>
	<returns>Returns a new CryptoHelper instance.</returns>
</member><member name="M:Nrc.Framework.Security.CryptoHelper.CreateRC2CryptoHelper(System.Byte[],System.Byte[])">
	<summary>
 Creates a CryptoHelper instance using the RC2 algorithm
 </summary>
	<param name="key">A 4-16 byte encryption key</param>
	<param name="vector">A 8 byte initialization vector</param>
	<returns>Returns a new CryptoHelper instance.</returns>
</member><member name="M:Nrc.Framework.Security.CryptoHelper.CreateRC2CryptoHelper">
	<summary>
 Creates a CryptoHelper instance using the RC2 algorithm with a generated key and initialization vector
 </summary>
	<returns>Returns a new CryptoHelper instance.</returns>
</member><member name="M:Nrc.Framework.Security.CryptoHelper.#ctor(System.Security.Cryptography.SymmetricAlgorithm)">
	<summary>Constructor</summary>
	<param name="algorithm">The symmetric algorithm to use for encryption</param>
	<remarks>This constructor is private.  The shared factory methods should by used to create instances of this class.</remarks>
</member><member name="M:Nrc.Framework.Security.CryptoHelper.#ctor(System.Security.Cryptography.SymmetricAlgorithm,System.Byte[],System.Byte[])">
	<summary>Constructor</summary>
	<param name="algorithm">The symmetric algorithm to use for encryption</param>
	<param name="key">The encryption key</param>
	<param name="vector">The initialization vector</param>
	<remarks>This constructor is private.  The shared factory methods should by used to create instances of this class.</remarks>
</member><member name="M:Nrc.Framework.Security.CryptoHelper.Encrypt(System.Byte[])">
	<summary>
 Encrypts an array of bytes
 </summary>
	<param name="plainData">The "plain text" data to encrypt.</param>
	<returns>The encrypted array of bytes</returns>
</member><member name="M:Nrc.Framework.Security.CryptoHelper.Decrypt(System.Byte[])">
	<summary>
 Decrypts an array of bytes
 </summary>
	<param name="cipherData">The "cipher text" data to decrypt.</param>
	<returns>The decrypted array of bytes</returns>
</member><member name="M:Nrc.Framework.Security.CryptoHelper.EncryptString(System.String)">
	<summary>Encrypts a string</summary>
	<param name="plainText">The "plain text" string to encrypt</param>
	<returns>A Base 64 string of the cipher text</returns>
</member><member name="M:Nrc.Framework.Security.CryptoHelper.DecryptString(System.String)">
	<summary>Decrypts a string</summary>
	<param name="cipherText">The Base 64 "cipher text" string to decrypt</param>
	<returns>The plain text string</returns>
</member><member name="T:Nrc.Framework.Security.CryptoHelper">
	<summary>
 A class that simplifies usage of the .NET Framework cryptography namespace
 </summary>
</member><member name="P:Nrc.Framework.WinForms.DialogForm.Caption">
 -----------------------------------------------------------------------------
 <summary>
 The caption to be displayed in the form's title bar
 </summary>
	<history>
 	[JCamp]	6/22/2004	Created
 </history>
 -----------------------------------------------------------------------------

</member><member name="P:Nrc.Framework.WinForms.DialogForm.BorderColor">
 -----------------------------------------------------------------------------
 <summary>
 The color of the form's border
 </summary>
	<history>
 	[JCamp]	6/22/2004	Created
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:Nrc.Framework.WinForms.DialogForm.#ctor">
 -----------------------------------------------------------------------------
 <summary>
 Default constructor.
 </summary>
	<remarks>
	</remarks>
	<history>
 	[JCamp]	6/22/2004	Created
 </history>
 -----------------------------------------------------------------------------

</member><member name="T:Nrc.Framework.WinForms.DialogForm">
 -----------------------------------------------------------------------------
 Project	 : NRC_Common_Classes
 Class	 : WinForms.DialogForm
 
 -----------------------------------------------------------------------------
 <summary>
 This class is a simple form that uses a pre-formatted design for drawing pop-up
 dialog windows.
 </summary>
	<remarks>
	</remarks>
	<history>
 	[JCamp]	6/22/2004	Created
 </history>
 -----------------------------------------------------------------------------

</member><member name="T:Nrc.Framework.Data.DbfVersion">
	<summary>
 Enumerates the different DBF version values
 </summary>
	<remarks></remarks>
</member><member name="T:Nrc.Framework.Data.SqlCommandException">
 -----------------------------------------------------------------------------
 Project	 : NRC Class Library
 Class	 : Data.SqlCommandException
 
 -----------------------------------------------------------------------------
 <summary>
 Provides more detailed information when exceptions occur while trying to execute a SqlCommand.
 </summary>
	<remarks>
	</remarks>
	<history>
 	[jcamp]	8/18/2005	Created
 </history>
 -----------------------------------------------------------------------------

</member><member name="P:Nrc.Framework.WinForms.ExceptionReport.ReportSender">
 -----------------------------------------------------------------------------
 <summary>
 The email address of the person sending the exception report
 </summary>
	<history>
 	[JCamp]	7/7/2004	Created
 </history>
 -----------------------------------------------------------------------------

</member><member name="P:Nrc.Framework.WinForms.ExceptionReport.ReportRecipient">
 -----------------------------------------------------------------------------
 <summary>
 The email address of the recipient(s) of the exception report
 </summary>
	<history>
 	[JCamp]	7/7/2004	Created
 </history>
 -----------------------------------------------------------------------------

</member><member name="P:Nrc.Framework.WinForms.ExceptionReport.ReportSubject">
 -----------------------------------------------------------------------------
 <summary>
 The email subject line of the exception report
 </summary>
	<history>
 	[JCamp]	7/7/2004	Created
 </history>
 -----------------------------------------------------------------------------

</member><member name="P:Nrc.Framework.WinForms.ExceptionReport.UserMessage">
 -----------------------------------------------------------------------------
 <summary>
 The message entered by the user to describe how the exception was generated
 </summary>
	<history>
 	[JCamp]	7/7/2004	Created
 </history>
 -----------------------------------------------------------------------------

</member><member name="P:Nrc.Framework.WinForms.ExceptionReport.SMTPServer">
 -----------------------------------------------------------------------------
 <summary>
 The SMTP server to use in sending the exception email
 </summary>
	<value></value>
	<remarks>
	</remarks>
	<history>
 	[JCamp]	7/7/2004	Created
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:Nrc.Framework.WinForms.ExceptionReport.ReportException(System.Boolean,System.Boolean)">
 -----------------------------------------------------------------------------
 <summary>
 Submits the exception report
 </summary>
	<param name="sendEmail">if true, an email will be sent with the exception details</param>
	<param name="logToSQL">if true, the exception will be logged to a SQL server table</param>
	<remarks>
 SQL Server Logging is not functional...how can you do this for multiple apps and DBs?
 </remarks>
	<history>
 	[JCamp]	7/7/2004	Created
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:Nrc.Framework.WinForms.ExceptionReport.ShowException(System.String,System.Boolean,System.Boolean)">
 -----------------------------------------------------------------------------
 <summary>
 Displays the message box detailing the exception to the user.  This message box also
 gives the user the option of "reporting" the exception.
 
 The SMTPServer, ReportRecipient, and ReportSubject properties should have been set
 before this method is called
 </summary>
	<param name="title">The text to appear in the message box title bar</param>
	<param name="sendEmail">if true, an email report will be generated if the user reports the exception</param>
	<param name="logToSQL">if true, an SQL log entry will be created if the user reports the exception</param>
	<remarks>
	</remarks>
	<history>
 	[JCamp]	7/7/2004	Created
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:Nrc.Framework.WinForms.ExceptionReport.ShowReportUI">
 -----------------------------------------------------------------------------
 <summary>
 Shows the Exception Report Form where the user enters the recipient email
 address and writes a description of how the exception occurred.
 </summary>
	<returns>returns a DialogResult value indicating if the user clicked "OK" or "Cancel"</returns>
	<remarks>
	</remarks>
	<history>
 	[JCamp]	7/7/2004	Created
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:Nrc.Framework.WinForms.ExceptionReport.GetScreenShot">
 -----------------------------------------------------------------------------
 <summary>
 If the screen shot has not yet been captured and stored then this method does so
 </summary>
	<remarks>
	</remarks>
	<history>
 	[JCamp]	7/7/2004	Created
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:Nrc.Framework.WinForms.ExceptionReport.StoreImage(System.Drawing.Bitmap)">
 -----------------------------------------------------------------------------
 <summary>
 Stores the image to a JPEG file in the user's application data folder 
 with a timestamp name
 </summary>
	<param name="img">the image to be stored</param>
	<remarks>
	</remarks>
	<history>
 	[JCamp]	7/7/2004	Created
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:Nrc.Framework.WinForms.ExceptionReport.DeleteImage">
 -----------------------------------------------------------------------------
 <summary>
 Deletes the temporary screen capture JPEG in the user's application data folder
 </summary>
	<remarks>
	</remarks>
	<history>
 	[JCamp]	7/7/2004	Created
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:Nrc.Framework.WinForms.ExceptionReport.EmailReport">
 -----------------------------------------------------------------------------
 <summary>
 Generates and sends the exception report
 </summary>
	<remarks>
	</remarks>
	<history>
 	[JCamp]	7/7/2004	Created
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:Nrc.Framework.WinForms.ExceptionReport.GetExceptionHtml">
 -----------------------------------------------------------------------------
 <summary>
 Generates the HTML for the body of the email
 </summary>
	<returns></returns>
	<remarks>
	</remarks>
	<history>
 	[JCamp]	7/7/2004	Created
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:Nrc.Framework.WinForms.ExceptionReport.SQLReport">
 -----------------------------------------------------------------------------
 <summary>
 Not yet implemented
 </summary>
	<remarks>
	</remarks>
	<history>
 	[JCamp]	7/7/2004	Created
 </history>
 -----------------------------------------------------------------------------

</member><member name="T:Nrc.Framework.WinForms.ExceptionReport">
 -----------------------------------------------------------------------------
 Project	 : NRC_Common_Classes
 Class	 : WinForms.ExceptionReport
 
 -----------------------------------------------------------------------------
 <summary>
 This class is used to display and report exceptions in a Windows Forms application.
 The ExceptionReport object will display a message box for the user to see the exception
 details and give them the option of "reporting" the exception.  When the exception is 
 reported an email is generated with the exception details and a screen shot of the
 user's desktop when the exception occurred.
 </summary>
	<remarks>
	</remarks>
	<history>
 	[JCamp]	7/7/2004	Created
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:Nrc.Framework.Data.DbfWriter.#ctor(System.Data.IDataReader)">
	<summary>
 Initializes the DbfWriter instance.
 </summary>
	<param name="reader">The data reader to be used in creating the DBF file.</param>
</member><member name="M:Nrc.Framework.Data.DbfWriter.Write(System.String,System.Int32,System.Int32@)">
	<summary>
 Creates a DBF file (or multiple files) from the specified IDataReader and schema column collection
 </summary>
	<param name="filePath">The full path of the file to create</param>
	<param name="reportProgressInterval">Indicates the number of records that should be written before the ReportProgress event is raised</param>
	<param name="filesCreated">The ByRef filesCreated will contain the number of files created after the operation completes.</param>
	<returns>Returns the number of records written</returns>
</member><member name="M:Nrc.Framework.Data.DbfWriter.BuildColumnSets">
	<summary>
 Splits up all of the columns in the schema into sets of columns 
 that define all of the columns in each DBF that will be created.
 </summary>
	<returns>Returns the list of column sets</returns>
	<remarks>This function essentially splits the data set into multiple
 files in order to accomodate the DBF column number limit</remarks>
</member><member name="M:Nrc.Framework.Data.DbfWriter.GetHeaderBytes(System.Collections.Generic.List{Nrc.Framework.Data.DbfColumn})">
	<summary>
 Builds the binary data for the Header of a DBF file that will contain the list of columns specified
 </summary>
	<param name="columnList">The list of columns in this DBF file</param>
	<returns>Returns an array of bytes representing the DBF file header</returns>
	<remarks>Many of the fields in the header are left blank</remarks>
</member><member name="M:Nrc.Framework.Data.DbfWriter.GetColumnHeaderBytes(Nrc.Framework.Data.DbfColumn)">
	<summary>
 Gets the data for the column definition of the DBF header
 </summary>
	<param name="col">The column for the definition data</param>
	<returns>Returns an array of bytes representing the column definition data</returns>
</member><member name="M:Nrc.Framework.Data.DbfWriter.GetTotalRecordLength(System.Collections.Generic.List{Nrc.Framework.Data.DbfColumn})">
	<summary>
 Computes the total length of a record for the specified column list
 </summary>
	<param name="columnList">The set of columns that defines the DBF file</param>
	<returns>Returns the length of each record in the file</returns>
</member><member name="M:Nrc.Framework.Data.DbfWriter.GetCurrentDateBytes">
	<summary>
 Returns a byte array containing the current date
 </summary>
</member><member name="M:Nrc.Framework.Data.DbfWriter.GetRecordBytes(System.Collections.Generic.List{Nrc.Framework.Data.DbfColumn},System.Data.IDataReader)">
	<summary>
 Builds the binary data for an individual record in the DBF
 </summary>
	<param name="columnList">The column set defining the DBF file</param>
	<param name="rdr">The IDataReader that contains the data to be written</param>
	<returns>Returns an array of bytes representing the record data</returns>
</member><member name="M:Nrc.Framework.Data.DbfWriter.GetColumnTypeCode(Nrc.Framework.Data.DbfColumnType)">
	<summary>
 Converts a DbfColumnType to the single character code for DBF
 </summary>
	<param name="columnType">The DbfColumnType to convert</param>
	<returns>A character representing the DBF code for the data type</returns>
</member><member name="M:Nrc.Framework.Data.DbfWriter.GetDbfColumnType(System.String)">
	<summary>
 Converts a string representation of a .NET type to an equivalent DbfColumnType
 </summary>
	<param name="dataType">The name of the .NET type to convert</param>
	<returns>Returns the compatible DbfColumnType</returns>
</member><member name="T:Nrc.Framework.Configuration.EnvironmentSettings">
	<summary>
 Represents configuration settings for various defined environments.
 </summary>
</member><member name="P:Nrc.Framework.Data.DbfColumn.Name">
	<summary>The name of the column</summary>
</member><member name="P:Nrc.Framework.Data.DbfColumn.ColumnType">
	<summary>The data type of the column</summary>
</member><member name="P:Nrc.Framework.Data.DbfColumn.Length">
	<summary>The length, in bytes, of the column</summary>
</member><member name="P:Nrc.Framework.Data.DbfColumn.DecimalCount">
	<summary>The number of decimals included in the column</summary>
	<remarks>Applies only to numeric fields</remarks>
</member><member name="P:Nrc.Framework.Data.DbfColumn.Ordinal">
	<summary>The ordinal value of the column in the data source</summary>
</member><member name="P:Nrc.Framework.Data.DbfColumn.IsMasterColumn">
	<summary>Indicates if the column is a "Master Column" and should be 
 repeated in every file created when the number of columns is greater 
 than the DBF limit of 255</summary>
</member><member name="P:Nrc.Framework.Data.DbfColumn.IgnoreColumn">
	<summary>Indicates that the column should not be output to the DBF file</summary>
</member><member name="T:Nrc.Framework.Data.DbfColumn">
	<summary>
 Represents a column in a DBF file that will be written using the DbfWriter class
 </summary>
</member><member name="P:Nrc.Framework.My.Resources.Resources.ResourceManager">
	<summary>
  Returns the cached ResourceManager instance used by this class.
</summary>
</member><member name="P:Nrc.Framework.My.Resources.Resources.Culture">
	<summary>
  Overrides the current thread's CurrentUICulture property for all
  resource lookups using this strongly typed resource class.
</summary>
</member><member name="T:Nrc.Framework.My.Resources.Resources">
	<summary>
  A strongly-typed resource class, for looking up localized strings, etc.
</summary>
</member>
</members>
</doc>
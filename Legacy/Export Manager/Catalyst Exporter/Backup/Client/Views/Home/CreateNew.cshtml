@model Nrc.CatalystExporter.ExportClient.Models.CreateNewModel
@{
    ViewBag.Title = "Create New Definition";
}
@section scripts{
    <script src="@Url.Content("~/Scripts/jquery.validate.min.js")" type="text/javascript"></script>
    <script src="@Url.Content("~/Scripts/jquery.validate.unobtrusive.min.js")" type="text/javascript"></script>
    <script src="@Url.Content("~/Scripts/fileDefinitionEditing.js")" type="text/javascript"></script>
    <script type="text/javascript">
        $(document).ready(function () {
            $(":selected").removeAttr("selected");
            $("#StartDate").datepicker();
            $("#EndDate").datepicker();
            $("#Schedule_NextRunDate").datepicker({ minDate: 1 });
            $("#Schedule_DataStartDate").datepicker({ minDate: -9125 });

            $("#TypeOfFile").change(function () {
                if ($(this).val() == 9) {
                    $("#Delimiter").css("display", "inline-block");
                } else {
                    $("#Delimiter").css("display", "none");
                    $("#delimValidation").html("");
                }
            });

            $("#submitBtn").click(function () {
                AdjustNameIndexes();
                $("#createNewForm").submit();
            });

            addValidation("@(Model.IsScheduled)");
        });

    </script>
}
<h2>
    Create New Export Definition</h2>
@using (Html.BeginForm("CreateNew", "Home", FormMethod.Post, new { id = "createNewForm" }))
{
    @Html.HiddenFor(m => m.IsScheduled)
    <div>
        <label>
            File Name:
        </label>@Html.EditorFor(m => m.FileName)
        @Html.ValidationMessageFor(m => m.FileName)
    </div>
    if (Model.IsScheduled)
    { 
    <div>
        <label>
            Start running on:
        </label>@Html.EditorFor(m => m.Schedule.NextRunDate)
        @Html.ValidationMessageFor(m => m.Schedule.NextRunDate)
    </div>
    <div>
        <label>
            Run every:
        </label>
        @Html.EditorFor(m => m.Schedule.RunIntervalCount)
        @Html.DropDownListFor(m => m.Schedule.RunInterval, Model.Intervals)
        @Html.ValidationMessageFor(m => m.Schedule.RunIntervalCount)
        @Html.ValidationMessageFor(m => m.Schedule.RunInterval)
    </div>
    <div>
        <label>
            Start data on:
        </label>@Html.EditorFor(m => m.Schedule.DataStartDate)
        @Html.ValidationMessageFor(m => m.Schedule.DataStartDate)
    </div>
    <div>
        <label>
            Rolling:
        </label>@Html.CheckBoxFor(m => m.Schedule.IsRolling)
        @Html.ValidationMessageFor(m => m.Schedule.IsRolling)
    </div>
    <div>
        <label>
            Include
        </label>
        @Html.EditorFor(m => m.Schedule.DataIntervalCount)
        @Html.DropDownListFor(m => m.Schedule.DataInterval, Model.Intervals)
        <label>
            of data
        </label>
    </div>
    <div>
        @Html.ValidationMessageFor(m => m.Schedule.DataIntervalCount)
        @Html.ValidationMessageFor(m => m.Schedule.DataInterval)
    </div>
    }
    else
    { 
    <div>
        <label>
            Start Date:
        </label>
        @Html.EditorFor(m => m.StartDate)
        @Html.ValidationMessageFor(m => m.StartDate)
    </div>
    <div>
        <label>
            End Date:
        </label>
        @Html.EditorFor(m => m.EndDate)
        @Html.ValidationMessageFor(m => m.EndDate)
    </div>
    }
    <div>
        <label>
            File Type:</label>
        @Html.DropDownListFor(m => m.TypeOfFile, Model.FileTypes)
        @Html.TextBoxFor(m => m.Delimiter, new { maxlength = "2", style = "display: none; width: 20px;", title = "tab = \\t" })
        &nbsp;<span id="delimValidation"></span>
        @Html.ValidationMessageFor(m => m.TypeOfFile)
    </div>
    <div>
        <label>
            Date Type:</label>
        @Html.DropDownListFor(m => m.DateType, Model.DateTypes)
        @Html.ValidationMessageFor(m => m.DateType)
    </div>
    <div>
        <label>
            File Structure:</label>
        @Html.DropDownListFor(m => m.FileStructure, Model.FileStructureTypes)
        @Html.ValidationMessageFor(m => m.FileStructure)
    </div>
    
    if (Model.Definitions.FirstOrDefault() != null && Model.Definitions.FirstOrDefault().Surveys.Count() > 1 && Model.Definitions.FirstOrDefault().Surveys.Select(s => s.Client_ID).Distinct().Count() == 1)
    {
        <div>
            <label>
                Combine Files:</label>
            @Html.CheckBoxFor(m => m.IsCombined)
        </div>
    }
    <br />
    
    
    @Html.EditorFor(m => m.Definitions)
    <div>
        <button id="submitBtn" type="button">
            Submit</button>
    </div>   
}
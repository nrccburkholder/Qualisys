#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.4952
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace NRC.Picker.Depricated.OCSHHCAHPS.ImportProcessor.DAL.Generated
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	public partial class QP_DataLoad : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertClientTransform(ClientTransform instance);
    partial void UpdateClientTransform(ClientTransform instance);
    partial void DeleteClientTransform(ClientTransform instance);
    partial void InsertDataFile(DataFile instance);
    partial void UpdateDataFile(DataFile instance);
    partial void DeleteDataFile(DataFile instance);
    partial void InsertDataFileLoadMsg(DataFileLoadMsg instance);
    partial void UpdateDataFileLoadMsg(DataFileLoadMsg instance);
    partial void DeleteDataFileLoadMsg(DataFileLoadMsg instance);
    partial void InsertDataFileState(DataFileState instance);
    partial void UpdateDataFileState(DataFileState instance);
    partial void DeleteDataFileState(DataFileState instance);
    partial void InsertDataFileState_History(DataFileState_History instance);
    partial void UpdateDataFileState_History(DataFileState_History instance);
    partial void DeleteDataFileState_History(DataFileState_History instance);
    partial void InsertDataFileStates(DataFileStates instance);
    partial void UpdateDataFileStates(DataFileStates instance);
    partial void DeleteDataFileStates(DataFileStates instance);
    partial void InsertMatchFieldValidation(MatchFieldValidation instance);
    partial void UpdateMatchFieldValidation(MatchFieldValidation instance);
    partial void DeleteMatchFieldValidation(MatchFieldValidation instance);
    partial void InsertTransform(Transform instance);
    partial void UpdateTransform(Transform instance);
    partial void DeleteTransform(Transform instance);
    partial void InsertTransformClientMapping(TransformClientMapping instance);
    partial void UpdateTransformClientMapping(TransformClientMapping instance);
    partial void DeleteTransformClientMapping(TransformClientMapping instance);
    partial void InsertTransformDefinition(TransformDefinition instance);
    partial void UpdateTransformDefinition(TransformDefinition instance);
    partial void DeleteTransformDefinition(TransformDefinition instance);
    partial void InsertTransformImports(TransformImports instance);
    partial void UpdateTransformImports(TransformImports instance);
    partial void DeleteTransformImports(TransformImports instance);
    partial void InsertTransformLibrary(TransformLibrary instance);
    partial void UpdateTransformLibrary(TransformLibrary instance);
    partial void DeleteTransformLibrary(TransformLibrary instance);
    partial void InsertTransformMapping(TransformMapping instance);
    partial void UpdateTransformMapping(TransformMapping instance);
    partial void DeleteTransformMapping(TransformMapping instance);
    partial void InsertTransformTarget(TransformTarget instance);
    partial void UpdateTransformTarget(TransformTarget instance);
    partial void DeleteTransformTarget(TransformTarget instance);
    partial void InsertUploadActions(UploadActions instance);
    partial void UpdateUploadActions(UploadActions instance);
    partial void DeleteUploadActions(UploadActions instance);
    partial void InsertUploadFile(UploadFile instance);
    partial void UpdateUploadFile(UploadFile instance);
    partial void DeleteUploadFile(UploadFile instance);
    partial void InsertUploadFileNotes(UploadFileNotes instance);
    partial void UpdateUploadFileNotes(UploadFileNotes instance);
    partial void DeleteUploadFileNotes(UploadFileNotes instance);
    partial void InsertUploadFileState(UploadFileState instance);
    partial void UpdateUploadFileState(UploadFileState instance);
    partial void DeleteUploadFileState(UploadFileState instance);
    partial void InsertUploadFileState_History(UploadFileState_History instance);
    partial void UpdateUploadFileState_History(UploadFileState_History instance);
    partial void DeleteUploadFileState_History(UploadFileState_History instance);
    partial void InsertUploadFilesToDataFiles(UploadFilesToDataFiles instance);
    partial void UpdateUploadFilesToDataFiles(UploadFilesToDataFiles instance);
    partial void DeleteUploadFilesToDataFiles(UploadFilesToDataFiles instance);
    partial void InsertUploadStates(UploadStates instance);
    partial void UpdateUploadStates(UploadStates instance);
    partial void DeleteUploadStates(UploadStates instance);
    partial void InsertValidation_Counts(Validation_Counts instance);
    partial void UpdateValidation_Counts(Validation_Counts instance);
    partial void DeleteValidation_Counts(Validation_Counts instance);
    partial void InsertValidation_Definitions(Validation_Definitions instance);
    partial void UpdateValidation_Definitions(Validation_Definitions instance);
    partial void DeleteValidation_Definitions(Validation_Definitions instance);
    partial void InsertValidationType(ValidationType instance);
    partial void UpdateValidationType(ValidationType instance);
    partial void DeleteValidationType(ValidationType instance);
    partial void InsertVR_Freqs(VR_Freqs instance);
    partial void UpdateVR_Freqs(VR_Freqs instance);
    partial void DeleteVR_Freqs(VR_Freqs instance);
    partial void InsertVR_MatchFieldValidation(VR_MatchFieldValidation instance);
    partial void UpdateVR_MatchFieldValidation(VR_MatchFieldValidation instance);
    partial void DeleteVR_MatchFieldValidation(VR_MatchFieldValidation instance);
    partial void InsertVR_RecordCounts(VR_RecordCounts instance);
    partial void UpdateVR_RecordCounts(VR_RecordCounts instance);
    partial void DeleteVR_RecordCounts(VR_RecordCounts instance);
    #endregion
		
		public QP_DataLoad(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public QP_DataLoad(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public QP_DataLoad(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public QP_DataLoad(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<ClientDetail> ClientDetail
		{
			get
			{
				return this.GetTable<ClientDetail>();
			}
		}
		
		public System.Data.Linq.Table<ClientTransform> ClientTransform
		{
			get
			{
				return this.GetTable<ClientTransform>();
			}
		}
		
		public System.Data.Linq.Table<DatabaseAudit> DatabaseAudit
		{
			get
			{
				return this.GetTable<DatabaseAudit>();
			}
		}
		
		public System.Data.Linq.Table<DataFile> DataFile
		{
			get
			{
				return this.GetTable<DataFile>();
			}
		}
		
		public System.Data.Linq.Table<DataFileLoadMsg> DataFileLoadMsg
		{
			get
			{
				return this.GetTable<DataFileLoadMsg>();
			}
		}
		
		public System.Data.Linq.Table<DataFileState> DataFileState
		{
			get
			{
				return this.GetTable<DataFileState>();
			}
		}
		
		public System.Data.Linq.Table<DataFileState_History> DataFileState_History
		{
			get
			{
				return this.GetTable<DataFileState_History>();
			}
		}
		
		public System.Data.Linq.Table<DataFileStates> DataFileStates
		{
			get
			{
				return this.GetTable<DataFileStates>();
			}
		}
		
		public System.Data.Linq.Table<HCAHPSIP> HCAHPSIP
		{
			get
			{
				return this.GetTable<HCAHPSIP>();
			}
		}
		
		public System.Data.Linq.Table<Loading_PARAMS> Loading_PARAMS
		{
			get
			{
				return this.GetTable<Loading_PARAMS>();
			}
		}
		
		public System.Data.Linq.Table<MatchFieldValidation> MatchFieldValidation
		{
			get
			{
				return this.GetTable<MatchFieldValidation>();
			}
		}
		
		public System.Data.Linq.Table<MSDRG> MSDRG
		{
			get
			{
				return this.GetTable<MSDRG>();
			}
		}
		
		public System.Data.Linq.Table<PervasiveProcessErrorLog> PervasiveProcessErrorLog
		{
			get
			{
				return this.GetTable<PervasiveProcessErrorLog>();
			}
		}
		
		public System.Data.Linq.Table<Temp_dmp_val_counts> Temp_dmp_val_counts
		{
			get
			{
				return this.GetTable<Temp_dmp_val_counts>();
			}
		}
		
		public System.Data.Linq.Table<Transform> Transform
		{
			get
			{
				return this.GetTable<Transform>();
			}
		}
		
		public System.Data.Linq.Table<TransformClientMapping> TransformClientMapping
		{
			get
			{
				return this.GetTable<TransformClientMapping>();
			}
		}
		
		public System.Data.Linq.Table<TransformDefinition> TransformDefinition
		{
			get
			{
				return this.GetTable<TransformDefinition>();
			}
		}
		
		public System.Data.Linq.Table<TransformImports> TransformImports
		{
			get
			{
				return this.GetTable<TransformImports>();
			}
		}
		
		public System.Data.Linq.Table<TransformLibrary> TransformLibrary
		{
			get
			{
				return this.GetTable<TransformLibrary>();
			}
		}
		
		public System.Data.Linq.Table<TransformMapping> TransformMapping
		{
			get
			{
				return this.GetTable<TransformMapping>();
			}
		}
		
		public System.Data.Linq.Table<TransformTarget> TransformTarget
		{
			get
			{
				return this.GetTable<TransformTarget>();
			}
		}
		
		public System.Data.Linq.Table<UploadActions> UploadActions
		{
			get
			{
				return this.GetTable<UploadActions>();
			}
		}
		
		public System.Data.Linq.Table<UploadedFileLogView> UploadedFileLogView
		{
			get
			{
				return this.GetTable<UploadedFileLogView>();
			}
		}
		
		public System.Data.Linq.Table<UploadFile> UploadFile
		{
			get
			{
				return this.GetTable<UploadFile>();
			}
		}
		
		public System.Data.Linq.Table<UploadFileNotes> UploadFileNotes
		{
			get
			{
				return this.GetTable<UploadFileNotes>();
			}
		}
		
		public System.Data.Linq.Table<UploadFileState> UploadFileState
		{
			get
			{
				return this.GetTable<UploadFileState>();
			}
		}
		
		public System.Data.Linq.Table<UploadFileState_History> UploadFileState_History
		{
			get
			{
				return this.GetTable<UploadFileState_History>();
			}
		}
		
		public System.Data.Linq.Table<UploadFilesToDataFiles> UploadFilesToDataFiles
		{
			get
			{
				return this.GetTable<UploadFilesToDataFiles>();
			}
		}
		
		public System.Data.Linq.Table<UploadStates> UploadStates
		{
			get
			{
				return this.GetTable<UploadStates>();
			}
		}
		
		public System.Data.Linq.Table<Validation_Counts> Validation_Counts
		{
			get
			{
				return this.GetTable<Validation_Counts>();
			}
		}
		
		public System.Data.Linq.Table<Validation_Definitions> Validation_Definitions
		{
			get
			{
				return this.GetTable<Validation_Definitions>();
			}
		}
		
		public System.Data.Linq.Table<ValidationType> ValidationType
		{
			get
			{
				return this.GetTable<ValidationType>();
			}
		}
		
		public System.Data.Linq.Table<VR_Freqs> VR_Freqs
		{
			get
			{
				return this.GetTable<VR_Freqs>();
			}
		}
		
		public System.Data.Linq.Table<VR_MatchFieldValidation> VR_MatchFieldValidation
		{
			get
			{
				return this.GetTable<VR_MatchFieldValidation>();
			}
		}
		
		public System.Data.Linq.Table<VR_RecordCounts> VR_RecordCounts
		{
			get
			{
				return this.GetTable<VR_RecordCounts>();
			}
		}
		
		[Function(Name="dbo.AC_GetCounts")]
		[return: Parameter(DbType="Int")]
		public int AC_GetCounts([Parameter(DbType="Int")] System.Nullable<int> intDataFile_id, [Parameter(DbType="VarChar(20)")] string strStatusFieldName, [Parameter(DbType="VarChar(20)")] string strErrorFieldName, [Parameter(DbType="VarChar(50)")] string strTableName, [Parameter(DbType="Bit")] System.Nullable<bool> bitIsAddress)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), intDataFile_id, strStatusFieldName, strErrorFieldName, strTableName, bitIsAddress);
			return ((int)(result.ReturnValue));
		}
		
		[Function(Name="dbo.AC_GetRecords")]
		[return: Parameter(DbType="Int")]
		public int AC_GetRecords([Parameter(Name="BatchSize", DbType="Int")] System.Nullable<int> batchSize, [Parameter(Name="SelectFieldList", DbType="VarChar(1500)")] string selectFieldList, [Parameter(Name="KeyFieldName", DbType="VarChar(20)")] string keyFieldName, [Parameter(Name="SQLTableName", DbType="VarChar(50)")] string sQLTableName, [Parameter(Name="StatusFieldName", DbType="VarChar(20)")] string statusFieldName, [Parameter(Name="FileID", DbType="Int")] System.Nullable<int> fileID)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), batchSize, selectFieldList, keyFieldName, sQLTableName, statusFieldName, fileID);
			return ((int)(result.ReturnValue));
		}
		
		[Function(Name="dbo.AC_UpdateRecord")]
		[return: Parameter(DbType="Int")]
		public int AC_UpdateRecord([Parameter(Name="SQLTableName", DbType="VarChar(50)")] string sQLTableName, [Parameter(Name="UpdateFieldList", DbType="VarChar(1500)")] string updateFieldList, [Parameter(Name="KeyFieldName", DbType="VarChar(20)")] string keyFieldName, [Parameter(Name="DBKey", DbType="Int")] System.Nullable<int> dBKey)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), sQLTableName, updateFieldList, keyFieldName, dBKey);
			return ((int)(result.ReturnValue));
		}
		
		[Function(Name="dbo.GetClientTransforms")]
		public ISingleResult<GetClientTransformsResult> GetClientTransforms([Parameter(Name="Client_id", DbType="Int")] System.Nullable<int> client_id, [Parameter(Name="Study_id", DbType="Int")] System.Nullable<int> study_id, [Parameter(Name="Survey_id", DbType="Int")] System.Nullable<int> survey_id)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), client_id, study_id, survey_id);
			return ((ISingleResult<GetClientTransformsResult>)(result.ReturnValue));
		}
		
		[Function(Name="dbo.GetTransformImports")]
		public ISingleResult<GetTransformImportsResult> GetTransformImports([Parameter(Name="TransformId", DbType="Int")] System.Nullable<int> transformId)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), transformId);
			return ((ISingleResult<GetTransformImportsResult>)(result.ReturnValue));
		}
		
		[Function(Name="dbo.GetTransforms")]
		public ISingleResult<GetTransformsResult> GetTransforms([Parameter(Name="Client_id", DbType="Int")] System.Nullable<int> client_id, [Parameter(Name="Study_id", DbType="Int")] System.Nullable<int> study_id, [Parameter(Name="Survey_id", DbType="Int")] System.Nullable<int> survey_id)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), client_id, study_id, survey_id);
			return ((ISingleResult<GetTransformsResult>)(result.ReturnValue));
		}
		
		[Function(Name="dbo.LD_AddRecordCounts")]
		[return: Parameter(DbType="Int")]
		public int LD_AddRecordCounts([Parameter(Name="DataFile_id", DbType="Int")] System.Nullable<int> dataFile_id, [Parameter(Name="RecordType", DbType="VarChar(20)")] string recordType, [Parameter(Name="GroupName", DbType="VarChar(42)")] string groupName, [Parameter(Name="QtyUpd", DbType="Int")] System.Nullable<int> qtyUpd, [Parameter(Name="QtyErr", DbType="Int")] System.Nullable<int> qtyErr, [Parameter(Name="QtyRem", DbType="Int")] System.Nullable<int> qtyRem, [Parameter(Name="QtyTot", DbType="Int")] System.Nullable<int> qtyTot)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), dataFile_id, recordType, groupName, qtyUpd, qtyErr, qtyRem, qtyTot);
			return ((int)(result.ReturnValue));
		}
		
		[Function(Name="dbo.LD_DeleteDataFile")]
		[return: Parameter(DbType="Int")]
		public int LD_DeleteDataFile([Parameter(Name="DataFile_id", DbType="Int")] System.Nullable<int> dataFile_id)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), dataFile_id);
			return ((int)(result.ReturnValue));
		}
		
		[Function(Name="dbo.LD_DeleteDataFileState")]
		[return: Parameter(DbType="Int")]
		public int LD_DeleteDataFileState([Parameter(Name="DataFileState_id", DbType="Int")] System.Nullable<int> dataFileState_id)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), dataFileState_id);
			return ((int)(result.ReturnValue));
		}
		
		[Function(Name="dbo.LD_InsertDataFile")]
		public ISingleResult<LD_InsertDataFileResult> LD_InsertDataFile(
					[Parameter(Name="Client_ID", DbType="Int")] System.Nullable<int> client_ID, 
					[Parameter(Name="Study_ID", DbType="Int")] System.Nullable<int> study_ID, 
					[Parameter(Name="Survey_ID", DbType="Int")] System.Nullable<int> survey_ID, 
					[Parameter(Name="FileType_id", DbType="Int")] System.Nullable<int> fileType_id, 
					[Parameter(Name="PervasiveMapName", DbType="VarChar(255)")] string pervasiveMapName, 
					[Parameter(DbType="VarChar(200)")] string strFileLocation, 
					[Parameter(DbType="VarChar(42)")] string strFile_nm, 
					[Parameter(DbType="Int")] System.Nullable<int> intFileSize, 
					[Parameter(DbType="Int")] System.Nullable<int> intRecords, 
					[Parameter(DbType="DateTime")] System.Nullable<System.DateTime> datReceived, 
					[Parameter(DbType="DateTime")] System.Nullable<System.DateTime> datBegin, 
					[Parameter(DbType="DateTime")] System.Nullable<System.DateTime> datEnd, 
					[Parameter(DbType="Int")] System.Nullable<int> intLoaded, 
					[Parameter(DbType="DateTime")] System.Nullable<System.DateTime> datMinDate, 
					[Parameter(DbType="DateTime")] System.Nullable<System.DateTime> datMaxDate, 
					[Parameter(DbType="DateTime")] System.Nullable<System.DateTime> datDeleted, 
					[Parameter(Name="DataSet_id", DbType="Int")] System.Nullable<int> dataSet_id, 
					[Parameter(Name="AssocDataFiles", DbType="VarChar(100)")] string assocDataFiles)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), client_ID, study_ID, survey_ID, fileType_id, pervasiveMapName, strFileLocation, strFile_nm, intFileSize, intRecords, datReceived, datBegin, datEnd, intLoaded, datMinDate, datMaxDate, datDeleted, dataSet_id, assocDataFiles);
			return ((ISingleResult<LD_InsertDataFileResult>)(result.ReturnValue));
		}
		
		[Function(Name="dbo.LD_InsertDataFileState")]
		public ISingleResult<LD_InsertDataFileStateResult> LD_InsertDataFileState([Parameter(Name="DataFile_id", DbType="Int")] System.Nullable<int> dataFile_id, [Parameter(Name="State_ID", DbType="Int")] System.Nullable<int> state_ID, [Parameter(DbType="DateTime")] System.Nullable<System.DateTime> datOccurred, [Parameter(Name="StateParameter", DbType="VarChar(2000)")] string stateParameter)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), dataFile_id, state_ID, datOccurred, stateParameter);
			return ((ISingleResult<LD_InsertDataFileStateResult>)(result.ReturnValue));
		}
		
		[Function(Name="dbo.LD_PopulateEncounterPop_id")]
		[ResultType(typeof(LD_PopulateEncounterPop_idResult))]
		public IMultipleResults LD_PopulateEncounterPop_id([Parameter(Name="File_id", DbType="Int")] System.Nullable<int> file_id)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), file_id);
			return ((IMultipleResults)(result.ReturnValue));
		}
		
		[Function(Name="dbo.LD_SelectAllDataFiles")]
		public ISingleResult<LD_SelectAllDataFilesResult> LD_SelectAllDataFiles()
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())));
			return ((ISingleResult<LD_SelectAllDataFilesResult>)(result.ReturnValue));
		}
		
		[Function(Name="dbo.LD_SelectAllDataFileStates")]
		public ISingleResult<LD_SelectAllDataFileStatesResult> LD_SelectAllDataFileStates()
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())));
			return ((ISingleResult<LD_SelectAllDataFileStatesResult>)(result.ReturnValue));
		}
		
		[Function(Name="dbo.LD_SelectDataFile")]
		public ISingleResult<LD_SelectDataFileResult> LD_SelectDataFile([Parameter(Name="DataFile_id", DbType="Int")] System.Nullable<int> dataFile_id)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), dataFile_id);
			return ((ISingleResult<LD_SelectDataFileResult>)(result.ReturnValue));
		}
		
		[Function(Name="dbo.LD_SelectDataFileState")]
		public ISingleResult<LD_SelectDataFileStateResult> LD_SelectDataFileState([Parameter(Name="DataFileState_id", DbType="Int")] System.Nullable<int> dataFileState_id)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), dataFileState_id);
			return ((ISingleResult<LD_SelectDataFileStateResult>)(result.ReturnValue));
		}
		
		[Function(Name="dbo.LD_SelectDataFileStatesByDataFileId")]
		public ISingleResult<LD_SelectDataFileStatesByDataFileIdResult> LD_SelectDataFileStatesByDataFileId([Parameter(Name="DataFile_id", DbType="Int")] System.Nullable<int> dataFile_id)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), dataFile_id);
			return ((ISingleResult<LD_SelectDataFileStatesByDataFileIdResult>)(result.ReturnValue));
		}
		
		[Function(Name="dbo.LD_SelectDataFileStatesByStateId")]
		public ISingleResult<LD_SelectDataFileStatesByStateIdResult> LD_SelectDataFileStatesByStateId([Parameter(Name="State_ID", DbType="Int")] System.Nullable<int> state_ID)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), state_ID);
			return ((ISingleResult<LD_SelectDataFileStatesByStateIdResult>)(result.ReturnValue));
		}
		
		[Function(Name="dbo.LD_UpdateDataFile")]
		[return: Parameter(DbType="Int")]
		public int LD_UpdateDataFile(
					[Parameter(Name="DataFile_id", DbType="Int")] System.Nullable<int> dataFile_id, 
					[Parameter(Name="Client_ID", DbType="Int")] System.Nullable<int> client_ID, 
					[Parameter(Name="Study_ID", DbType="Int")] System.Nullable<int> study_ID, 
					[Parameter(Name="Survey_ID", DbType="Int")] System.Nullable<int> survey_ID, 
					[Parameter(Name="FileType_id", DbType="Int")] System.Nullable<int> fileType_id, 
					[Parameter(Name="PervasiveMapName", DbType="VarChar(255)")] string pervasiveMapName, 
					[Parameter(DbType="VarChar(200)")] string strFileLocation, 
					[Parameter(DbType="VarChar(42)")] string strFile_nm, 
					[Parameter(DbType="Int")] System.Nullable<int> intFileSize, 
					[Parameter(DbType="Int")] System.Nullable<int> intRecords, 
					[Parameter(DbType="DateTime")] System.Nullable<System.DateTime> datReceived, 
					[Parameter(DbType="DateTime")] System.Nullable<System.DateTime> datBegin, 
					[Parameter(DbType="DateTime")] System.Nullable<System.DateTime> datEnd, 
					[Parameter(DbType="Int")] System.Nullable<int> intLoaded, 
					[Parameter(DbType="DateTime")] System.Nullable<System.DateTime> datMinDate, 
					[Parameter(DbType="DateTime")] System.Nullable<System.DateTime> datMaxDate, 
					[Parameter(DbType="DateTime")] System.Nullable<System.DateTime> datDeleted, 
					[Parameter(Name="DataSet_id", DbType="Int")] System.Nullable<int> dataSet_id, 
					[Parameter(Name="AssocDataFiles", DbType="VarChar(100)")] string assocDataFiles)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), dataFile_id, client_ID, study_ID, survey_ID, fileType_id, pervasiveMapName, strFileLocation, strFile_nm, intFileSize, intRecords, datReceived, datBegin, datEnd, intLoaded, datMinDate, datMaxDate, datDeleted, dataSet_id, assocDataFiles);
			return ((int)(result.ReturnValue));
		}
		
		[Function(Name="dbo.LD_UpdateDataFileState")]
		[return: Parameter(DbType="Int")]
		public int LD_UpdateDataFileState([Parameter(Name="DataFileState_id", DbType="Int")] System.Nullable<int> dataFileState_id, [Parameter(Name="DataFile_id", DbType="Int")] System.Nullable<int> dataFile_id, [Parameter(Name="State_ID", DbType="Int")] System.Nullable<int> state_ID, [Parameter(DbType="DateTime")] System.Nullable<System.DateTime> datOccurred, [Parameter(Name="StateParameter", DbType="VarChar(2000)")] string stateParameter)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), dataFileState_id, dataFile_id, state_ID, datOccurred, stateParameter);
			return ((int)(result.ReturnValue));
		}
		
		[Function(Name="dbo.LD_UpdateDataFileStateChange")]
		public ISingleResult<LD_UpdateDataFileStateChangeResult> LD_UpdateDataFileStateChange([Parameter(Name="DataFile_id", DbType="Int")] System.Nullable<int> dataFile_id, [Parameter(Name="DataState_id", DbType="Int")] System.Nullable<int> dataState_id, [Parameter(Name="StateParameter", DbType="VarChar(2000)")] string stateParameter)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), dataFile_id, dataState_id, stateParameter);
			return ((ISingleResult<LD_UpdateDataFileStateChangeResult>)(result.ReturnValue));
		}
		
		[Function(Name="dbo.LD_UpdateUploadFileState")]
		public ISingleResult<LD_UpdateUploadFileStateResult> LD_UpdateUploadFileState([Parameter(Name="UploadFile_id", DbType="Int")] System.Nullable<int> uploadFile_id, [Parameter(Name="UploadState_id", DbType="Int")] System.Nullable<int> uploadState_id, [Parameter(Name="StateParameter", DbType="VarChar(2000)")] string stateParameter)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), uploadFile_id, uploadState_id, stateParameter);
			return ((ISingleResult<LD_UpdateUploadFileStateResult>)(result.ReturnValue));
		}
		
		[Function(Name="dbo.LD_UpdateUploadFileStateChange")]
		public ISingleResult<LD_UpdateUploadFileStateChangeResult> LD_UpdateUploadFileStateChange([Parameter(Name="UploadFile_id", DbType="Int")] System.Nullable<int> uploadFile_id, [Parameter(Name="UploadState_id", DbType="Int")] System.Nullable<int> uploadState_id, [Parameter(Name="StateParameter", DbType="VarChar(2000)")] string stateParameter)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), uploadFile_id, uploadState_id, stateParameter);
			return ((ISingleResult<LD_UpdateUploadFileStateChangeResult>)(result.ReturnValue));
		}
		
		[Function(Name="dbo.LD_ViewMatchFieldValidation")]
		[return: Parameter(DbType="Int")]
		public int LD_ViewMatchFieldValidation([Parameter(Name="DataFile", DbType="Int")] System.Nullable<int> dataFile)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), dataFile);
			return ((int)(result.ReturnValue));
		}
		
		[Function(Name="dbo.LD_ViewNULLCounts")]
		[return: Parameter(DbType="Int")]
		public int LD_ViewNULLCounts([Parameter(Name="DataFile", DbType="Int")] System.Nullable<int> dataFile)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), dataFile);
			return ((int)(result.ReturnValue));
		}
		
		[Function(Name="dbo.LD_ViewWarning")]
		public ISingleResult<LD_ViewWarningResult> LD_ViewWarning([Parameter(DbType="Int")] System.Nullable<int> datafile_Id)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), datafile_Id);
			return ((ISingleResult<LD_ViewWarningResult>)(result.ReturnValue));
		}
		
		[Function(Name="dbo.sp_alterdiagram")]
		[return: Parameter(DbType="Int")]
		public int Sp_alterdiagram([Parameter(DbType="NVarChar(128)")] string diagramname, [Parameter(DbType="Int")] System.Nullable<int> owner_id, [Parameter(DbType="Int")] System.Nullable<int> version, [Parameter(DbType="VarBinary(MAX)")] System.Data.Linq.Binary definition)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), diagramname, owner_id, version, definition);
			return ((int)(result.ReturnValue));
		}
		
		[Function(Name="dbo.sp_creatediagram")]
		[return: Parameter(DbType="Int")]
		public int Sp_creatediagram([Parameter(DbType="NVarChar(128)")] string diagramname, [Parameter(DbType="Int")] System.Nullable<int> owner_id, [Parameter(DbType="Int")] System.Nullable<int> version, [Parameter(DbType="VarBinary(MAX)")] System.Data.Linq.Binary definition)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), diagramname, owner_id, version, definition);
			return ((int)(result.ReturnValue));
		}
		
		[Function(Name="dbo.sp_dropdiagram")]
		[return: Parameter(DbType="Int")]
		public int Sp_dropdiagram([Parameter(DbType="NVarChar(128)")] string diagramname, [Parameter(DbType="Int")] System.Nullable<int> owner_id)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), diagramname, owner_id);
			return ((int)(result.ReturnValue));
		}
		
		[Function(Name="dbo.sp_helpdiagramdefinition")]
		public ISingleResult<Sp_helpdiagramdefinitionResult> Sp_helpdiagramdefinition([Parameter(DbType="NVarChar(128)")] string diagramname, [Parameter(DbType="Int")] System.Nullable<int> owner_id)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), diagramname, owner_id);
			return ((ISingleResult<Sp_helpdiagramdefinitionResult>)(result.ReturnValue));
		}
		
		[Function(Name="dbo.sp_helpdiagrams")]
		public ISingleResult<Sp_helpdiagramsResult> Sp_helpdiagrams([Parameter(DbType="NVarChar(128)")] string diagramname, [Parameter(DbType="Int")] System.Nullable<int> owner_id)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), diagramname, owner_id);
			return ((ISingleResult<Sp_helpdiagramsResult>)(result.ReturnValue));
		}
		
		[Function(Name="dbo.sp_renamediagram")]
		[return: Parameter(DbType="Int")]
		public int Sp_renamediagram([Parameter(DbType="NVarChar(128)")] string diagramname, [Parameter(DbType="Int")] System.Nullable<int> owner_id, [Parameter(DbType="NVarChar(128)")] string new_diagramname)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), diagramname, owner_id, new_diagramname);
			return ((int)(result.ReturnValue));
		}
	}
	
	[Table(Name="dbo.ClientDetail")]
	public partial class ClientDetail : NRC.Picker.Depricated.OCSHHCAHPS.ImportProcessor.DAL.EntityBase
	{
		
		private int _Client_id;
		
		private string _ClientName;
		
		private string _CCN;
		
		private int _Study_id;
		
		private int _Survey_id;
		
		private string _Languages;
		
		public ClientDetail()
		{
		}
		
		[Column(Storage="_Client_id", DbType="Int NOT NULL")]
		public int Client_id
		{
			get
			{
				return this._Client_id;
			}
			set
			{
				if ((this._Client_id != value))
				{
					this._Client_id = value;
				}
			}
		}
		
		[Column(Storage="_ClientName", DbType="VarChar(100)")]
		public string ClientName
		{
			get
			{
				return this._ClientName;
			}
			set
			{
				if ((this._ClientName != value))
				{
					this._ClientName = value;
				}
			}
		}
		
		[Column(Storage="_CCN", DbType="VarChar(32)")]
		public string CCN
		{
			get
			{
				return this._CCN;
			}
			set
			{
				if ((this._CCN != value))
				{
					this._CCN = value;
				}
			}
		}
		
		[Column(Storage="_Study_id", DbType="Int NOT NULL")]
		public int Study_id
		{
			get
			{
				return this._Study_id;
			}
			set
			{
				if ((this._Study_id != value))
				{
					this._Study_id = value;
				}
			}
		}
		
		[Column(Storage="_Survey_id", DbType="Int NOT NULL")]
		public int Survey_id
		{
			get
			{
				return this._Survey_id;
			}
			set
			{
				if ((this._Survey_id != value))
				{
					this._Survey_id = value;
				}
			}
		}
		
		[Column(Storage="_Languages", DbType="VarChar(32)")]
		public string Languages
		{
			get
			{
				return this._Languages;
			}
			set
			{
				if ((this._Languages != value))
				{
					this._Languages = value;
				}
			}
		}
	}
	
	[Table(Name="dbo.ClientTransform")]
	public partial class ClientTransform : NRC.Picker.Depricated.OCSHHCAHPS.ImportProcessor.DAL.EntityBase, INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Client_id;
		
		private int _Study_id;
		
		private int _Survey_id;
		
		private int _TransformId;
		
		private System.DateTime _CreateDate;
		
		private string _CreateUser;
		
		private System.Nullable<System.DateTime> _UpdateDate;
		
		private string _UpdateUser;
		
		private EntityRef<Transform> _Transform;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnClient_idChanging(int value);
    partial void OnClient_idChanged();
    partial void OnStudy_idChanging(int value);
    partial void OnStudy_idChanged();
    partial void OnSurvey_idChanging(int value);
    partial void OnSurvey_idChanged();
    partial void OnTransformIdChanging(int value);
    partial void OnTransformIdChanged();
    partial void OnCreateDateChanging(System.DateTime value);
    partial void OnCreateDateChanged();
    partial void OnCreateUserChanging(string value);
    partial void OnCreateUserChanged();
    partial void OnUpdateDateChanging(System.Nullable<System.DateTime> value);
    partial void OnUpdateDateChanged();
    partial void OnUpdateUserChanging(string value);
    partial void OnUpdateUserChanged();
    #endregion
		
		public ClientTransform()
		{
			this._Transform = default(EntityRef<Transform>);
			OnCreated();
		}
		
		[Column(Storage="_Client_id", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int Client_id
		{
			get
			{
				return this._Client_id;
			}
			set
			{
				if ((this._Client_id != value))
				{
					this.OnClient_idChanging(value);
					this.SendPropertyChanging();
					this._Client_id = value;
					this.SendPropertyChanged("Client_id");
					this.OnClient_idChanged();
				}
			}
		}
		
		[Column(Storage="_Study_id", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int Study_id
		{
			get
			{
				return this._Study_id;
			}
			set
			{
				if ((this._Study_id != value))
				{
					this.OnStudy_idChanging(value);
					this.SendPropertyChanging();
					this._Study_id = value;
					this.SendPropertyChanged("Study_id");
					this.OnStudy_idChanged();
				}
			}
		}
		
		[Column(Storage="_Survey_id", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int Survey_id
		{
			get
			{
				return this._Survey_id;
			}
			set
			{
				if ((this._Survey_id != value))
				{
					this.OnSurvey_idChanging(value);
					this.SendPropertyChanging();
					this._Survey_id = value;
					this.SendPropertyChanged("Survey_id");
					this.OnSurvey_idChanged();
				}
			}
		}
		
		[Column(Storage="_TransformId", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int TransformId
		{
			get
			{
				return this._TransformId;
			}
			set
			{
				if ((this._TransformId != value))
				{
					if (this._Transform.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnTransformIdChanging(value);
					this.SendPropertyChanging();
					this._TransformId = value;
					this.SendPropertyChanged("TransformId");
					this.OnTransformIdChanged();
				}
			}
		}
		
		[Column(Storage="_CreateDate", DbType="DateTime NOT NULL")]
		public System.DateTime CreateDate
		{
			get
			{
				return this._CreateDate;
			}
			set
			{
				if ((this._CreateDate != value))
				{
					this.OnCreateDateChanging(value);
					this.SendPropertyChanging();
					this._CreateDate = value;
					this.SendPropertyChanged("CreateDate");
					this.OnCreateDateChanged();
				}
			}
		}
		
		[Column(Storage="_CreateUser", DbType="VarChar(64) NOT NULL", CanBeNull=false)]
		public string CreateUser
		{
			get
			{
				return this._CreateUser;
			}
			set
			{
				if ((this._CreateUser != value))
				{
					this.OnCreateUserChanging(value);
					this.SendPropertyChanging();
					this._CreateUser = value;
					this.SendPropertyChanged("CreateUser");
					this.OnCreateUserChanged();
				}
			}
		}
		
		[Column(Storage="_UpdateDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> UpdateDate
		{
			get
			{
				return this._UpdateDate;
			}
			set
			{
				if ((this._UpdateDate != value))
				{
					this.OnUpdateDateChanging(value);
					this.SendPropertyChanging();
					this._UpdateDate = value;
					this.SendPropertyChanged("UpdateDate");
					this.OnUpdateDateChanged();
				}
			}
		}
		
		[Column(Storage="_UpdateUser", DbType="VarChar(64)")]
		public string UpdateUser
		{
			get
			{
				return this._UpdateUser;
			}
			set
			{
				if ((this._UpdateUser != value))
				{
					this.OnUpdateUserChanging(value);
					this.SendPropertyChanging();
					this._UpdateUser = value;
					this.SendPropertyChanged("UpdateUser");
					this.OnUpdateUserChanged();
				}
			}
		}
		
		[Association(Name="FK_ClientTransform_Transform", Storage="_Transform", ThisKey="TransformId", IsForeignKey=true)]
		public Transform Transform
		{
			get
			{
				return this._Transform.Entity;
			}
			set
			{
				Transform previousValue = this._Transform.Entity;
				if (((previousValue != value) 
							|| (this._Transform.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Transform.Entity = null;
						previousValue.ClientTransform.Remove(this);
					}
					this._Transform.Entity = value;
					if ((value != null))
					{
						value.ClientTransform.Add(this);
						this._TransformId = value.TransformId;
					}
					else
					{
						this._TransformId = default(int);
					}
					this.SendPropertyChanged("Transform");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.DatabaseAudit")]
	public partial class DatabaseAudit : NRC.Picker.Depricated.OCSHHCAHPS.ImportProcessor.DAL.EntityBase
	{
		
		private System.DateTime _AuditDate;
		
		private string _LoginName;
		
		private string _EventType;
		
		private string _SchemaName;
		
		private string _ObjectName;
		
		private string _TSQLCommand;
		
		private System.Xml.Linq.XElement _XMLEventData;
		
		public DatabaseAudit()
		{
		}
		
		[Column(Storage="_AuditDate", DbType="DateTime NOT NULL")]
		public System.DateTime AuditDate
		{
			get
			{
				return this._AuditDate;
			}
			set
			{
				if ((this._AuditDate != value))
				{
					this._AuditDate = value;
				}
			}
		}
		
		[Column(Storage="_LoginName", DbType="NVarChar(128) NOT NULL", CanBeNull=false)]
		public string LoginName
		{
			get
			{
				return this._LoginName;
			}
			set
			{
				if ((this._LoginName != value))
				{
					this._LoginName = value;
				}
			}
		}
		
		[Column(Storage="_EventType", DbType="NVarChar(128) NOT NULL", CanBeNull=false)]
		public string EventType
		{
			get
			{
				return this._EventType;
			}
			set
			{
				if ((this._EventType != value))
				{
					this._EventType = value;
				}
			}
		}
		
		[Column(Storage="_SchemaName", DbType="NVarChar(128)")]
		public string SchemaName
		{
			get
			{
				return this._SchemaName;
			}
			set
			{
				if ((this._SchemaName != value))
				{
					this._SchemaName = value;
				}
			}
		}
		
		[Column(Storage="_ObjectName", DbType="NVarChar(128)")]
		public string ObjectName
		{
			get
			{
				return this._ObjectName;
			}
			set
			{
				if ((this._ObjectName != value))
				{
					this._ObjectName = value;
				}
			}
		}
		
		[Column(Storage="_TSQLCommand", DbType="VarChar(MAX)", UpdateCheck=UpdateCheck.Never)]
		public string TSQLCommand
		{
			get
			{
				return this._TSQLCommand;
			}
			set
			{
				if ((this._TSQLCommand != value))
				{
					this._TSQLCommand = value;
				}
			}
		}
		
		[Column(Storage="_XMLEventData", DbType="Xml NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public System.Xml.Linq.XElement XMLEventData
		{
			get
			{
				return this._XMLEventData;
			}
			set
			{
				if ((this._XMLEventData != value))
				{
					this._XMLEventData = value;
				}
			}
		}
	}
	
	[Table(Name="dbo.DataFile")]
	public partial class DataFile : NRC.Picker.Depricated.OCSHHCAHPS.ImportProcessor.DAL.EntityBase, INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _DataFile_id;
		
		private System.Nullable<int> _Client_ID;
		
		private System.Nullable<int> _Study_ID;
		
		private System.Nullable<int> _Survey_ID;
		
		private int _FileType_id;
		
		private string _PervasiveMapName;
		
		private string _StrFileLocation;
		
		private string _StrFile_nm;
		
		private System.Nullable<int> _IntFileSize;
		
		private System.Nullable<int> _IntRecords;
		
		private System.Nullable<int> _IntLoaded;
		
		private System.Nullable<System.DateTime> _DatReceived;
		
		private System.Nullable<System.DateTime> _DatBegin;
		
		private System.Nullable<System.DateTime> _DatEnd;
		
		private System.Nullable<System.DateTime> _DatApplied;
		
		private System.Nullable<System.DateTime> _DatMinDate;
		
		private System.Nullable<System.DateTime> _DatMaxDate;
		
		private System.Nullable<System.DateTime> _DatDeleted;
		
		private System.Nullable<int> _DataSet_id;
		
		private string _AssocDataFiles;
		
		private EntitySet<DataFileState> _DataFileState;
		
		private EntitySet<DataFileState_History> _DataFileState_History;
		
		private EntitySet<UploadFilesToDataFiles> _UploadFilesToDataFiles;
		
		private EntitySet<DataFileLoadMsg> _DataFileLoadMsg;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnDataFile_idChanging(int value);
    partial void OnDataFile_idChanged();
    partial void OnClient_IDChanging(System.Nullable<int> value);
    partial void OnClient_IDChanged();
    partial void OnStudy_IDChanging(System.Nullable<int> value);
    partial void OnStudy_IDChanged();
    partial void OnSurvey_IDChanging(System.Nullable<int> value);
    partial void OnSurvey_IDChanged();
    partial void OnFileType_idChanging(int value);
    partial void OnFileType_idChanged();
    partial void OnPervasiveMapNameChanging(string value);
    partial void OnPervasiveMapNameChanged();
    partial void OnStrFileLocationChanging(string value);
    partial void OnStrFileLocationChanged();
    partial void OnStrFile_nmChanging(string value);
    partial void OnStrFile_nmChanged();
    partial void OnIntFileSizeChanging(System.Nullable<int> value);
    partial void OnIntFileSizeChanged();
    partial void OnIntRecordsChanging(System.Nullable<int> value);
    partial void OnIntRecordsChanged();
    partial void OnIntLoadedChanging(System.Nullable<int> value);
    partial void OnIntLoadedChanged();
    partial void OnDatReceivedChanging(System.Nullable<System.DateTime> value);
    partial void OnDatReceivedChanged();
    partial void OnDatBeginChanging(System.Nullable<System.DateTime> value);
    partial void OnDatBeginChanged();
    partial void OnDatEndChanging(System.Nullable<System.DateTime> value);
    partial void OnDatEndChanged();
    partial void OnDatAppliedChanging(System.Nullable<System.DateTime> value);
    partial void OnDatAppliedChanged();
    partial void OnDatMinDateChanging(System.Nullable<System.DateTime> value);
    partial void OnDatMinDateChanged();
    partial void OnDatMaxDateChanging(System.Nullable<System.DateTime> value);
    partial void OnDatMaxDateChanged();
    partial void OnDatDeletedChanging(System.Nullable<System.DateTime> value);
    partial void OnDatDeletedChanged();
    partial void OnDataSet_idChanging(System.Nullable<int> value);
    partial void OnDataSet_idChanged();
    partial void OnAssocDataFilesChanging(string value);
    partial void OnAssocDataFilesChanged();
    #endregion
		
		public DataFile()
		{
			this._DataFileState = new EntitySet<DataFileState>(new Action<DataFileState>(this.attach_DataFileState), new Action<DataFileState>(this.detach_DataFileState));
			this._DataFileState_History = new EntitySet<DataFileState_History>(new Action<DataFileState_History>(this.attach_DataFileState_History), new Action<DataFileState_History>(this.detach_DataFileState_History));
			this._UploadFilesToDataFiles = new EntitySet<UploadFilesToDataFiles>(new Action<UploadFilesToDataFiles>(this.attach_UploadFilesToDataFiles), new Action<UploadFilesToDataFiles>(this.detach_UploadFilesToDataFiles));
			this._DataFileLoadMsg = new EntitySet<DataFileLoadMsg>(new Action<DataFileLoadMsg>(this.attach_DataFileLoadMsg), new Action<DataFileLoadMsg>(this.detach_DataFileLoadMsg));
			OnCreated();
		}
		
		[Column(Storage="_DataFile_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int DataFile_id
		{
			get
			{
				return this._DataFile_id;
			}
			set
			{
				if ((this._DataFile_id != value))
				{
					this.OnDataFile_idChanging(value);
					this.SendPropertyChanging();
					this._DataFile_id = value;
					this.SendPropertyChanged("DataFile_id");
					this.OnDataFile_idChanged();
				}
			}
		}
		
		[Column(Storage="_Client_ID", DbType="Int")]
		public System.Nullable<int> Client_ID
		{
			get
			{
				return this._Client_ID;
			}
			set
			{
				if ((this._Client_ID != value))
				{
					this.OnClient_IDChanging(value);
					this.SendPropertyChanging();
					this._Client_ID = value;
					this.SendPropertyChanged("Client_ID");
					this.OnClient_IDChanged();
				}
			}
		}
		
		[Column(Storage="_Study_ID", DbType="Int")]
		public System.Nullable<int> Study_ID
		{
			get
			{
				return this._Study_ID;
			}
			set
			{
				if ((this._Study_ID != value))
				{
					this.OnStudy_IDChanging(value);
					this.SendPropertyChanging();
					this._Study_ID = value;
					this.SendPropertyChanged("Study_ID");
					this.OnStudy_IDChanged();
				}
			}
		}
		
		[Column(Storage="_Survey_ID", DbType="Int")]
		public System.Nullable<int> Survey_ID
		{
			get
			{
				return this._Survey_ID;
			}
			set
			{
				if ((this._Survey_ID != value))
				{
					this.OnSurvey_IDChanging(value);
					this.SendPropertyChanging();
					this._Survey_ID = value;
					this.SendPropertyChanged("Survey_ID");
					this.OnSurvey_IDChanged();
				}
			}
		}
		
		[Column(Storage="_FileType_id", DbType="Int NOT NULL")]
		public int FileType_id
		{
			get
			{
				return this._FileType_id;
			}
			set
			{
				if ((this._FileType_id != value))
				{
					this.OnFileType_idChanging(value);
					this.SendPropertyChanging();
					this._FileType_id = value;
					this.SendPropertyChanged("FileType_id");
					this.OnFileType_idChanged();
				}
			}
		}
		
		[Column(Storage="_PervasiveMapName", DbType="VarChar(255)")]
		public string PervasiveMapName
		{
			get
			{
				return this._PervasiveMapName;
			}
			set
			{
				if ((this._PervasiveMapName != value))
				{
					this.OnPervasiveMapNameChanging(value);
					this.SendPropertyChanging();
					this._PervasiveMapName = value;
					this.SendPropertyChanged("PervasiveMapName");
					this.OnPervasiveMapNameChanged();
				}
			}
		}
		
		[Column(Name="strFileLocation", Storage="_StrFileLocation", DbType="VarChar(200) NOT NULL", CanBeNull=false)]
		public string StrFileLocation
		{
			get
			{
				return this._StrFileLocation;
			}
			set
			{
				if ((this._StrFileLocation != value))
				{
					this.OnStrFileLocationChanging(value);
					this.SendPropertyChanging();
					this._StrFileLocation = value;
					this.SendPropertyChanged("StrFileLocation");
					this.OnStrFileLocationChanged();
				}
			}
		}
		
		[Column(Name="strFile_nm", Storage="_StrFile_nm", DbType="VarChar(42) NOT NULL", CanBeNull=false)]
		public string StrFile_nm
		{
			get
			{
				return this._StrFile_nm;
			}
			set
			{
				if ((this._StrFile_nm != value))
				{
					this.OnStrFile_nmChanging(value);
					this.SendPropertyChanging();
					this._StrFile_nm = value;
					this.SendPropertyChanged("StrFile_nm");
					this.OnStrFile_nmChanged();
				}
			}
		}
		
		[Column(Name="intFileSize", Storage="_IntFileSize", DbType="Int")]
		public System.Nullable<int> IntFileSize
		{
			get
			{
				return this._IntFileSize;
			}
			set
			{
				if ((this._IntFileSize != value))
				{
					this.OnIntFileSizeChanging(value);
					this.SendPropertyChanging();
					this._IntFileSize = value;
					this.SendPropertyChanged("IntFileSize");
					this.OnIntFileSizeChanged();
				}
			}
		}
		
		[Column(Name="intRecords", Storage="_IntRecords", DbType="Int")]
		public System.Nullable<int> IntRecords
		{
			get
			{
				return this._IntRecords;
			}
			set
			{
				if ((this._IntRecords != value))
				{
					this.OnIntRecordsChanging(value);
					this.SendPropertyChanging();
					this._IntRecords = value;
					this.SendPropertyChanged("IntRecords");
					this.OnIntRecordsChanged();
				}
			}
		}
		
		[Column(Name="intLoaded", Storage="_IntLoaded", DbType="Int")]
		public System.Nullable<int> IntLoaded
		{
			get
			{
				return this._IntLoaded;
			}
			set
			{
				if ((this._IntLoaded != value))
				{
					this.OnIntLoadedChanging(value);
					this.SendPropertyChanging();
					this._IntLoaded = value;
					this.SendPropertyChanged("IntLoaded");
					this.OnIntLoadedChanged();
				}
			}
		}
		
		[Column(Name="datReceived", Storage="_DatReceived", DbType="DateTime")]
		public System.Nullable<System.DateTime> DatReceived
		{
			get
			{
				return this._DatReceived;
			}
			set
			{
				if ((this._DatReceived != value))
				{
					this.OnDatReceivedChanging(value);
					this.SendPropertyChanging();
					this._DatReceived = value;
					this.SendPropertyChanged("DatReceived");
					this.OnDatReceivedChanged();
				}
			}
		}
		
		[Column(Name="datBegin", Storage="_DatBegin", DbType="DateTime")]
		public System.Nullable<System.DateTime> DatBegin
		{
			get
			{
				return this._DatBegin;
			}
			set
			{
				if ((this._DatBegin != value))
				{
					this.OnDatBeginChanging(value);
					this.SendPropertyChanging();
					this._DatBegin = value;
					this.SendPropertyChanged("DatBegin");
					this.OnDatBeginChanged();
				}
			}
		}
		
		[Column(Name="datEnd", Storage="_DatEnd", DbType="DateTime")]
		public System.Nullable<System.DateTime> DatEnd
		{
			get
			{
				return this._DatEnd;
			}
			set
			{
				if ((this._DatEnd != value))
				{
					this.OnDatEndChanging(value);
					this.SendPropertyChanging();
					this._DatEnd = value;
					this.SendPropertyChanged("DatEnd");
					this.OnDatEndChanged();
				}
			}
		}
		
		[Column(Storage="_DatApplied", DbType="DateTime")]
		public System.Nullable<System.DateTime> DatApplied
		{
			get
			{
				return this._DatApplied;
			}
			set
			{
				if ((this._DatApplied != value))
				{
					this.OnDatAppliedChanging(value);
					this.SendPropertyChanging();
					this._DatApplied = value;
					this.SendPropertyChanged("DatApplied");
					this.OnDatAppliedChanged();
				}
			}
		}
		
		[Column(Name="datMinDate", Storage="_DatMinDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> DatMinDate
		{
			get
			{
				return this._DatMinDate;
			}
			set
			{
				if ((this._DatMinDate != value))
				{
					this.OnDatMinDateChanging(value);
					this.SendPropertyChanging();
					this._DatMinDate = value;
					this.SendPropertyChanged("DatMinDate");
					this.OnDatMinDateChanged();
				}
			}
		}
		
		[Column(Name="datMaxDate", Storage="_DatMaxDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> DatMaxDate
		{
			get
			{
				return this._DatMaxDate;
			}
			set
			{
				if ((this._DatMaxDate != value))
				{
					this.OnDatMaxDateChanging(value);
					this.SendPropertyChanging();
					this._DatMaxDate = value;
					this.SendPropertyChanged("DatMaxDate");
					this.OnDatMaxDateChanged();
				}
			}
		}
		
		[Column(Name="datDeleted", Storage="_DatDeleted", DbType="DateTime")]
		public System.Nullable<System.DateTime> DatDeleted
		{
			get
			{
				return this._DatDeleted;
			}
			set
			{
				if ((this._DatDeleted != value))
				{
					this.OnDatDeletedChanging(value);
					this.SendPropertyChanging();
					this._DatDeleted = value;
					this.SendPropertyChanged("DatDeleted");
					this.OnDatDeletedChanged();
				}
			}
		}
		
		[Column(Storage="_DataSet_id", DbType="Int")]
		public System.Nullable<int> DataSet_id
		{
			get
			{
				return this._DataSet_id;
			}
			set
			{
				if ((this._DataSet_id != value))
				{
					this.OnDataSet_idChanging(value);
					this.SendPropertyChanging();
					this._DataSet_id = value;
					this.SendPropertyChanged("DataSet_id");
					this.OnDataSet_idChanged();
				}
			}
		}
		
		[Column(Storage="_AssocDataFiles", DbType="VarChar(100)")]
		public string AssocDataFiles
		{
			get
			{
				return this._AssocDataFiles;
			}
			set
			{
				if ((this._AssocDataFiles != value))
				{
					this.OnAssocDataFilesChanging(value);
					this.SendPropertyChanging();
					this._AssocDataFiles = value;
					this.SendPropertyChanged("AssocDataFiles");
					this.OnAssocDataFilesChanged();
				}
			}
		}
		
		[Association(Name="FK__DataFileS__DataF__4CA06362", Storage="_DataFileState", OtherKey="DataFile_id", DeleteRule="NO ACTION")]
		public EntitySet<DataFileState> DataFileState
		{
			get
			{
				return this._DataFileState;
			}
			set
			{
				this._DataFileState.Assign(value);
			}
		}
		
		[Association(Name="FK__DataFileS__DataF__4D94879B", Storage="_DataFileState_History", OtherKey="DataFile_id", DeleteRule="NO ACTION")]
		public EntitySet<DataFileState_History> DataFileState_History
		{
			get
			{
				return this._DataFileState_History;
			}
			set
			{
				this._DataFileState_History.Assign(value);
			}
		}
		
		[Association(Name="FK__UploadFil__DataF__4E88ABD4", Storage="_UploadFilesToDataFiles", OtherKey="DataFile_id", DeleteRule="NO ACTION")]
		public EntitySet<UploadFilesToDataFiles> UploadFilesToDataFiles
		{
			get
			{
				return this._UploadFilesToDataFiles;
			}
			set
			{
				this._UploadFilesToDataFiles.Assign(value);
			}
		}
		
		[Association(Name="FK_DataFileLoadMsg_DataFile", Storage="_DataFileLoadMsg", OtherKey="DataFile_ID", DeleteRule="NO ACTION")]
		public EntitySet<DataFileLoadMsg> DataFileLoadMsg
		{
			get
			{
				return this._DataFileLoadMsg;
			}
			set
			{
				this._DataFileLoadMsg.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_DataFileState(DataFileState entity)
		{
			this.SendPropertyChanging();
			entity.DataFile = this;
		}
		
		private void detach_DataFileState(DataFileState entity)
		{
			this.SendPropertyChanging();
			entity.DataFile = null;
		}
		
		private void attach_DataFileState_History(DataFileState_History entity)
		{
			this.SendPropertyChanging();
			entity.DataFile = this;
		}
		
		private void detach_DataFileState_History(DataFileState_History entity)
		{
			this.SendPropertyChanging();
			entity.DataFile = null;
		}
		
		private void attach_UploadFilesToDataFiles(UploadFilesToDataFiles entity)
		{
			this.SendPropertyChanging();
			entity.DataFile = this;
		}
		
		private void detach_UploadFilesToDataFiles(UploadFilesToDataFiles entity)
		{
			this.SendPropertyChanging();
			entity.DataFile = null;
		}
		
		private void attach_DataFileLoadMsg(DataFileLoadMsg entity)
		{
			this.SendPropertyChanging();
			entity.DataFile = this;
		}
		
		private void detach_DataFileLoadMsg(DataFileLoadMsg entity)
		{
			this.SendPropertyChanging();
			entity.DataFile = null;
		}
	}
	
	[Table(Name="dbo.DataFileLoadMsg")]
	public partial class DataFileLoadMsg : NRC.Picker.Depricated.OCSHHCAHPS.ImportProcessor.DAL.EntityBase, INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _DataFileLoadMsgID;
		
		private System.Nullable<int> _DataFile_ID;
		
		private System.Nullable<int> _ErrorLevel_ID;
		
		private string _ErrorMessage;
		
		private EntityRef<DataFile> _DataFile;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnDataFileLoadMsgIDChanging(int value);
    partial void OnDataFileLoadMsgIDChanged();
    partial void OnDataFile_IDChanging(System.Nullable<int> value);
    partial void OnDataFile_IDChanged();
    partial void OnErrorLevel_IDChanging(System.Nullable<int> value);
    partial void OnErrorLevel_IDChanged();
    partial void OnErrorMessageChanging(string value);
    partial void OnErrorMessageChanged();
    #endregion
		
		public DataFileLoadMsg()
		{
			this._DataFile = default(EntityRef<DataFile>);
			OnCreated();
		}
		
		[Column(Storage="_DataFileLoadMsgID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int DataFileLoadMsgID
		{
			get
			{
				return this._DataFileLoadMsgID;
			}
			set
			{
				if ((this._DataFileLoadMsgID != value))
				{
					this.OnDataFileLoadMsgIDChanging(value);
					this.SendPropertyChanging();
					this._DataFileLoadMsgID = value;
					this.SendPropertyChanged("DataFileLoadMsgID");
					this.OnDataFileLoadMsgIDChanged();
				}
			}
		}
		
		[Column(Storage="_DataFile_ID", DbType="Int")]
		public System.Nullable<int> DataFile_ID
		{
			get
			{
				return this._DataFile_ID;
			}
			set
			{
				if ((this._DataFile_ID != value))
				{
					if (this._DataFile.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnDataFile_IDChanging(value);
					this.SendPropertyChanging();
					this._DataFile_ID = value;
					this.SendPropertyChanged("DataFile_ID");
					this.OnDataFile_IDChanged();
				}
			}
		}
		
		[Column(Storage="_ErrorLevel_ID", DbType="Int")]
		public System.Nullable<int> ErrorLevel_ID
		{
			get
			{
				return this._ErrorLevel_ID;
			}
			set
			{
				if ((this._ErrorLevel_ID != value))
				{
					this.OnErrorLevel_IDChanging(value);
					this.SendPropertyChanging();
					this._ErrorLevel_ID = value;
					this.SendPropertyChanged("ErrorLevel_ID");
					this.OnErrorLevel_IDChanged();
				}
			}
		}
		
		[Column(Storage="_ErrorMessage", DbType="NChar(500)")]
		public string ErrorMessage
		{
			get
			{
				return this._ErrorMessage;
			}
			set
			{
				if ((this._ErrorMessage != value))
				{
					this.OnErrorMessageChanging(value);
					this.SendPropertyChanging();
					this._ErrorMessage = value;
					this.SendPropertyChanged("ErrorMessage");
					this.OnErrorMessageChanged();
				}
			}
		}
		
		[Association(Name="FK_DataFileLoadMsg_DataFile", Storage="_DataFile", ThisKey="DataFile_ID", IsForeignKey=true)]
		public DataFile DataFile
		{
			get
			{
				return this._DataFile.Entity;
			}
			set
			{
				DataFile previousValue = this._DataFile.Entity;
				if (((previousValue != value) 
							|| (this._DataFile.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._DataFile.Entity = null;
						previousValue.DataFileLoadMsg.Remove(this);
					}
					this._DataFile.Entity = value;
					if ((value != null))
					{
						value.DataFileLoadMsg.Add(this);
						this._DataFile_ID = value.DataFile_id;
					}
					else
					{
						this._DataFile_ID = default(Nullable<int>);
					}
					this.SendPropertyChanged("DataFile");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.DataFileState")]
	public partial class DataFileState : NRC.Picker.Depricated.OCSHHCAHPS.ImportProcessor.DAL.EntityBase, INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _DataFileState_id;
		
		private System.Nullable<int> _DataFile_id;
		
		private System.Nullable<int> _State_ID;
		
		private System.DateTime _DatOccurred;
		
		private string _StateParameter;
		
		private EntityRef<DataFile> _DataFile;
		
		private EntityRef<DataFileStates> _DataFileStates;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnDataFileState_idChanging(int value);
    partial void OnDataFileState_idChanged();
    partial void OnDataFile_idChanging(System.Nullable<int> value);
    partial void OnDataFile_idChanged();
    partial void OnState_IDChanging(System.Nullable<int> value);
    partial void OnState_IDChanged();
    partial void OnDatOccurredChanging(System.DateTime value);
    partial void OnDatOccurredChanged();
    partial void OnStateParameterChanging(string value);
    partial void OnStateParameterChanged();
    #endregion
		
		public DataFileState()
		{
			this._DataFile = default(EntityRef<DataFile>);
			this._DataFileStates = default(EntityRef<DataFileStates>);
			OnCreated();
		}
		
		[Column(Storage="_DataFileState_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int DataFileState_id
		{
			get
			{
				return this._DataFileState_id;
			}
			set
			{
				if ((this._DataFileState_id != value))
				{
					this.OnDataFileState_idChanging(value);
					this.SendPropertyChanging();
					this._DataFileState_id = value;
					this.SendPropertyChanged("DataFileState_id");
					this.OnDataFileState_idChanged();
				}
			}
		}
		
		[Column(Storage="_DataFile_id", DbType="Int")]
		public System.Nullable<int> DataFile_id
		{
			get
			{
				return this._DataFile_id;
			}
			set
			{
				if ((this._DataFile_id != value))
				{
					if (this._DataFile.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnDataFile_idChanging(value);
					this.SendPropertyChanging();
					this._DataFile_id = value;
					this.SendPropertyChanged("DataFile_id");
					this.OnDataFile_idChanged();
				}
			}
		}
		
		[Column(Storage="_State_ID", DbType="Int")]
		public System.Nullable<int> State_ID
		{
			get
			{
				return this._State_ID;
			}
			set
			{
				if ((this._State_ID != value))
				{
					if (this._DataFileStates.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnState_IDChanging(value);
					this.SendPropertyChanging();
					this._State_ID = value;
					this.SendPropertyChanged("State_ID");
					this.OnState_IDChanged();
				}
			}
		}
		
		[Column(Name="datOccurred", Storage="_DatOccurred", DbType="DateTime NOT NULL")]
		public System.DateTime DatOccurred
		{
			get
			{
				return this._DatOccurred;
			}
			set
			{
				if ((this._DatOccurred != value))
				{
					this.OnDatOccurredChanging(value);
					this.SendPropertyChanging();
					this._DatOccurred = value;
					this.SendPropertyChanged("DatOccurred");
					this.OnDatOccurredChanged();
				}
			}
		}
		
		[Column(Storage="_StateParameter", DbType="VarChar(2000)")]
		public string StateParameter
		{
			get
			{
				return this._StateParameter;
			}
			set
			{
				if ((this._StateParameter != value))
				{
					this.OnStateParameterChanging(value);
					this.SendPropertyChanging();
					this._StateParameter = value;
					this.SendPropertyChanged("StateParameter");
					this.OnStateParameterChanged();
				}
			}
		}
		
		[Association(Name="FK__DataFileS__DataF__4CA06362", Storage="_DataFile", ThisKey="DataFile_id", IsForeignKey=true)]
		public DataFile DataFile
		{
			get
			{
				return this._DataFile.Entity;
			}
			set
			{
				DataFile previousValue = this._DataFile.Entity;
				if (((previousValue != value) 
							|| (this._DataFile.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._DataFile.Entity = null;
						previousValue.DataFileState.Remove(this);
					}
					this._DataFile.Entity = value;
					if ((value != null))
					{
						value.DataFileState.Add(this);
						this._DataFile_id = value.DataFile_id;
					}
					else
					{
						this._DataFile_id = default(Nullable<int>);
					}
					this.SendPropertyChanged("DataFile");
				}
			}
		}
		
		[Association(Name="FK__DataFileS__State__6754599E", Storage="_DataFileStates", ThisKey="State_ID", IsForeignKey=true)]
		public DataFileStates DataFileStates
		{
			get
			{
				return this._DataFileStates.Entity;
			}
			set
			{
				DataFileStates previousValue = this._DataFileStates.Entity;
				if (((previousValue != value) 
							|| (this._DataFileStates.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._DataFileStates.Entity = null;
						previousValue.DataFileState.Remove(this);
					}
					this._DataFileStates.Entity = value;
					if ((value != null))
					{
						value.DataFileState.Add(this);
						this._State_ID = value.State_ID;
					}
					else
					{
						this._State_ID = default(Nullable<int>);
					}
					this.SendPropertyChanged("DataFileStates");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.DataFileState_History")]
	public partial class DataFileState_History : NRC.Picker.Depricated.OCSHHCAHPS.ImportProcessor.DAL.EntityBase, INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _DataFileState_id;
		
		private System.Nullable<int> _DataFile_id;
		
		private System.Nullable<int> _State_ID;
		
		private System.DateTime _DatOccurred;
		
		private string _StateParameter;
		
		private EntityRef<DataFile> _DataFile;
		
		private EntityRef<DataFileStates> _DataFileStates;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnDataFileState_idChanging(int value);
    partial void OnDataFileState_idChanged();
    partial void OnDataFile_idChanging(System.Nullable<int> value);
    partial void OnDataFile_idChanged();
    partial void OnState_IDChanging(System.Nullable<int> value);
    partial void OnState_IDChanged();
    partial void OnDatOccurredChanging(System.DateTime value);
    partial void OnDatOccurredChanged();
    partial void OnStateParameterChanging(string value);
    partial void OnStateParameterChanged();
    #endregion
		
		public DataFileState_History()
		{
			this._DataFile = default(EntityRef<DataFile>);
			this._DataFileStates = default(EntityRef<DataFileStates>);
			OnCreated();
		}
		
		[Column(Storage="_DataFileState_id", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int DataFileState_id
		{
			get
			{
				return this._DataFileState_id;
			}
			set
			{
				if ((this._DataFileState_id != value))
				{
					this.OnDataFileState_idChanging(value);
					this.SendPropertyChanging();
					this._DataFileState_id = value;
					this.SendPropertyChanged("DataFileState_id");
					this.OnDataFileState_idChanged();
				}
			}
		}
		
		[Column(Storage="_DataFile_id", DbType="Int")]
		public System.Nullable<int> DataFile_id
		{
			get
			{
				return this._DataFile_id;
			}
			set
			{
				if ((this._DataFile_id != value))
				{
					if (this._DataFile.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnDataFile_idChanging(value);
					this.SendPropertyChanging();
					this._DataFile_id = value;
					this.SendPropertyChanged("DataFile_id");
					this.OnDataFile_idChanged();
				}
			}
		}
		
		[Column(Storage="_State_ID", DbType="Int")]
		public System.Nullable<int> State_ID
		{
			get
			{
				return this._State_ID;
			}
			set
			{
				if ((this._State_ID != value))
				{
					if (this._DataFileStates.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnState_IDChanging(value);
					this.SendPropertyChanging();
					this._State_ID = value;
					this.SendPropertyChanged("State_ID");
					this.OnState_IDChanged();
				}
			}
		}
		
		[Column(Name="datOccurred", Storage="_DatOccurred", DbType="DateTime NOT NULL", IsPrimaryKey=true)]
		public System.DateTime DatOccurred
		{
			get
			{
				return this._DatOccurred;
			}
			set
			{
				if ((this._DatOccurred != value))
				{
					this.OnDatOccurredChanging(value);
					this.SendPropertyChanging();
					this._DatOccurred = value;
					this.SendPropertyChanged("DatOccurred");
					this.OnDatOccurredChanged();
				}
			}
		}
		
		[Column(Storage="_StateParameter", DbType="VarChar(2000)")]
		public string StateParameter
		{
			get
			{
				return this._StateParameter;
			}
			set
			{
				if ((this._StateParameter != value))
				{
					this.OnStateParameterChanging(value);
					this.SendPropertyChanging();
					this._StateParameter = value;
					this.SendPropertyChanged("StateParameter");
					this.OnStateParameterChanged();
				}
			}
		}
		
		[Association(Name="FK__DataFileS__DataF__4D94879B", Storage="_DataFile", ThisKey="DataFile_id", IsForeignKey=true)]
		public DataFile DataFile
		{
			get
			{
				return this._DataFile.Entity;
			}
			set
			{
				DataFile previousValue = this._DataFile.Entity;
				if (((previousValue != value) 
							|| (this._DataFile.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._DataFile.Entity = null;
						previousValue.DataFileState_History.Remove(this);
					}
					this._DataFile.Entity = value;
					if ((value != null))
					{
						value.DataFileState_History.Add(this);
						this._DataFile_id = value.DataFile_id;
					}
					else
					{
						this._DataFile_id = default(Nullable<int>);
					}
					this.SendPropertyChanged("DataFile");
				}
			}
		}
		
		[Association(Name="FK__DataFileS__State__5070F446", Storage="_DataFileStates", ThisKey="State_ID", IsForeignKey=true)]
		public DataFileStates DataFileStates
		{
			get
			{
				return this._DataFileStates.Entity;
			}
			set
			{
				DataFileStates previousValue = this._DataFileStates.Entity;
				if (((previousValue != value) 
							|| (this._DataFileStates.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._DataFileStates.Entity = null;
						previousValue.DataFileState_History.Remove(this);
					}
					this._DataFileStates.Entity = value;
					if ((value != null))
					{
						value.DataFileState_History.Add(this);
						this._State_ID = value.State_ID;
					}
					else
					{
						this._State_ID = default(Nullable<int>);
					}
					this.SendPropertyChanged("DataFileStates");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.DataFileStates")]
	public partial class DataFileStates : NRC.Picker.Depricated.OCSHHCAHPS.ImportProcessor.DAL.EntityBase, INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _State_ID;
		
		private string _State_desc;
		
		private EntitySet<DataFileState_History> _DataFileState_History;
		
		private EntitySet<DataFileState> _DataFileState;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnState_IDChanging(int value);
    partial void OnState_IDChanged();
    partial void OnState_descChanging(string value);
    partial void OnState_descChanged();
    #endregion
		
		public DataFileStates()
		{
			this._DataFileState_History = new EntitySet<DataFileState_History>(new Action<DataFileState_History>(this.attach_DataFileState_History), new Action<DataFileState_History>(this.detach_DataFileState_History));
			this._DataFileState = new EntitySet<DataFileState>(new Action<DataFileState>(this.attach_DataFileState), new Action<DataFileState>(this.detach_DataFileState));
			OnCreated();
		}
		
		[Column(Storage="_State_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int State_ID
		{
			get
			{
				return this._State_ID;
			}
			set
			{
				if ((this._State_ID != value))
				{
					this.OnState_IDChanging(value);
					this.SendPropertyChanging();
					this._State_ID = value;
					this.SendPropertyChanged("State_ID");
					this.OnState_IDChanged();
				}
			}
		}
		
		[Column(Storage="_State_desc", DbType="VarChar(250)")]
		public string State_desc
		{
			get
			{
				return this._State_desc;
			}
			set
			{
				if ((this._State_desc != value))
				{
					this.OnState_descChanging(value);
					this.SendPropertyChanging();
					this._State_desc = value;
					this.SendPropertyChanged("State_desc");
					this.OnState_descChanged();
				}
			}
		}
		
		[Association(Name="FK__DataFileS__State__5070F446", Storage="_DataFileState_History", OtherKey="State_ID", DeleteRule="NO ACTION")]
		public EntitySet<DataFileState_History> DataFileState_History
		{
			get
			{
				return this._DataFileState_History;
			}
			set
			{
				this._DataFileState_History.Assign(value);
			}
		}
		
		[Association(Name="FK__DataFileS__State__6754599E", Storage="_DataFileState", OtherKey="State_ID", DeleteRule="NO ACTION")]
		public EntitySet<DataFileState> DataFileState
		{
			get
			{
				return this._DataFileState;
			}
			set
			{
				this._DataFileState.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_DataFileState_History(DataFileState_History entity)
		{
			this.SendPropertyChanging();
			entity.DataFileStates = this;
		}
		
		private void detach_DataFileState_History(DataFileState_History entity)
		{
			this.SendPropertyChanging();
			entity.DataFileStates = null;
		}
		
		private void attach_DataFileState(DataFileState entity)
		{
			this.SendPropertyChanging();
			entity.DataFileStates = this;
		}
		
		private void detach_DataFileState(DataFileState entity)
		{
			this.SendPropertyChanging();
			entity.DataFileStates = null;
		}
	}
	
	[Table(Name="dbo.HCAHPSIP")]
	public partial class HCAHPSIP : NRC.Picker.Depricated.OCSHHCAHPS.ImportProcessor.DAL.EntityBase
	{
		
		private string _DRG;
		
		private string _VisitType;
		
		private string _Service;
		
		public HCAHPSIP()
		{
		}
		
		[Column(Storage="_DRG", DbType="VarChar(10) NOT NULL", CanBeNull=false)]
		public string DRG
		{
			get
			{
				return this._DRG;
			}
			set
			{
				if ((this._DRG != value))
				{
					this._DRG = value;
				}
			}
		}
		
		[Column(Storage="_VisitType", DbType="VarChar(10) NOT NULL", CanBeNull=false)]
		public string VisitType
		{
			get
			{
				return this._VisitType;
			}
			set
			{
				if ((this._VisitType != value))
				{
					this._VisitType = value;
				}
			}
		}
		
		[Column(Storage="_Service", DbType="VarChar(10) NOT NULL", CanBeNull=false)]
		public string Service
		{
			get
			{
				return this._Service;
			}
			set
			{
				if ((this._Service != value))
				{
					this._Service = value;
				}
			}
		}
	}
	
	[Table(Name="dbo.Loading_PARAMS")]
	public partial class Loading_PARAMS : NRC.Picker.Depricated.OCSHHCAHPS.ImportProcessor.DAL.EntityBase
	{
		
		private int _PARAM_ID;
		
		private string _STRPARAM_NM;
		
		private string _STRPARAM_TYPE;
		
		private string _STRPARAM_GRP;
		
		private string _STRPARAM_VALUE;
		
		private System.Nullable<int> _NUMPARAM_VALUE;
		
		private System.Nullable<System.DateTime> _DATPARAM_VALUE;
		
		private string _COMMENTS;
		
		public Loading_PARAMS()
		{
		}
		
		[Column(Storage="_PARAM_ID", DbType="Int NOT NULL")]
		public int PARAM_ID
		{
			get
			{
				return this._PARAM_ID;
			}
			set
			{
				if ((this._PARAM_ID != value))
				{
					this._PARAM_ID = value;
				}
			}
		}
		
		[Column(Storage="_STRPARAM_NM", DbType="VarChar(20) NOT NULL", CanBeNull=false)]
		public string STRPARAM_NM
		{
			get
			{
				return this._STRPARAM_NM;
			}
			set
			{
				if ((this._STRPARAM_NM != value))
				{
					this._STRPARAM_NM = value;
				}
			}
		}
		
		[Column(Storage="_STRPARAM_TYPE", DbType="Char(1) NOT NULL", CanBeNull=false)]
		public string STRPARAM_TYPE
		{
			get
			{
				return this._STRPARAM_TYPE;
			}
			set
			{
				if ((this._STRPARAM_TYPE != value))
				{
					this._STRPARAM_TYPE = value;
				}
			}
		}
		
		[Column(Storage="_STRPARAM_GRP", DbType="VarChar(20) NOT NULL", CanBeNull=false)]
		public string STRPARAM_GRP
		{
			get
			{
				return this._STRPARAM_GRP;
			}
			set
			{
				if ((this._STRPARAM_GRP != value))
				{
					this._STRPARAM_GRP = value;
				}
			}
		}
		
		[Column(Storage="_STRPARAM_VALUE", DbType="VarChar(255)")]
		public string STRPARAM_VALUE
		{
			get
			{
				return this._STRPARAM_VALUE;
			}
			set
			{
				if ((this._STRPARAM_VALUE != value))
				{
					this._STRPARAM_VALUE = value;
				}
			}
		}
		
		[Column(Storage="_NUMPARAM_VALUE", DbType="Int")]
		public System.Nullable<int> NUMPARAM_VALUE
		{
			get
			{
				return this._NUMPARAM_VALUE;
			}
			set
			{
				if ((this._NUMPARAM_VALUE != value))
				{
					this._NUMPARAM_VALUE = value;
				}
			}
		}
		
		[Column(Storage="_DATPARAM_VALUE", DbType="DateTime")]
		public System.Nullable<System.DateTime> DATPARAM_VALUE
		{
			get
			{
				return this._DATPARAM_VALUE;
			}
			set
			{
				if ((this._DATPARAM_VALUE != value))
				{
					this._DATPARAM_VALUE = value;
				}
			}
		}
		
		[Column(Storage="_COMMENTS", DbType="VarChar(255)")]
		public string COMMENTS
		{
			get
			{
				return this._COMMENTS;
			}
			set
			{
				if ((this._COMMENTS != value))
				{
					this._COMMENTS = value;
				}
			}
		}
	}
	
	[Table(Name="dbo.MatchFieldValidation")]
	public partial class MatchFieldValidation : NRC.Picker.Depricated.OCSHHCAHPS.ImportProcessor.DAL.EntityBase, INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _MFV_ID;
		
		private System.Nullable<int> _DataFile_ID;
		
		private string _Table_nm;
		
		private string _Mtch;
		
		private string _Mtch_Val;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnMFV_IDChanging(int value);
    partial void OnMFV_IDChanged();
    partial void OnDataFile_IDChanging(System.Nullable<int> value);
    partial void OnDataFile_IDChanged();
    partial void OnTable_nmChanging(string value);
    partial void OnTable_nmChanged();
    partial void OnMtchChanging(string value);
    partial void OnMtchChanged();
    partial void OnMtch_ValChanging(string value);
    partial void OnMtch_ValChanged();
    #endregion
		
		public MatchFieldValidation()
		{
			OnCreated();
		}
		
		[Column(Storage="_MFV_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int MFV_ID
		{
			get
			{
				return this._MFV_ID;
			}
			set
			{
				if ((this._MFV_ID != value))
				{
					this.OnMFV_IDChanging(value);
					this.SendPropertyChanging();
					this._MFV_ID = value;
					this.SendPropertyChanged("MFV_ID");
					this.OnMFV_IDChanged();
				}
			}
		}
		
		[Column(Storage="_DataFile_ID", DbType="Int")]
		public System.Nullable<int> DataFile_ID
		{
			get
			{
				return this._DataFile_ID;
			}
			set
			{
				if ((this._DataFile_ID != value))
				{
					this.OnDataFile_IDChanging(value);
					this.SendPropertyChanging();
					this._DataFile_ID = value;
					this.SendPropertyChanged("DataFile_ID");
					this.OnDataFile_IDChanged();
				}
			}
		}
		
		[Column(Storage="_Table_nm", DbType="VarChar(50)")]
		public string Table_nm
		{
			get
			{
				return this._Table_nm;
			}
			set
			{
				if ((this._Table_nm != value))
				{
					this.OnTable_nmChanging(value);
					this.SendPropertyChanging();
					this._Table_nm = value;
					this.SendPropertyChanged("Table_nm");
					this.OnTable_nmChanged();
				}
			}
		}
		
		[Column(Storage="_Mtch", DbType="VarChar(100)")]
		public string Mtch
		{
			get
			{
				return this._Mtch;
			}
			set
			{
				if ((this._Mtch != value))
				{
					this.OnMtchChanging(value);
					this.SendPropertyChanging();
					this._Mtch = value;
					this.SendPropertyChanged("Mtch");
					this.OnMtchChanged();
				}
			}
		}
		
		[Column(Storage="_Mtch_Val", DbType="VarChar(100)")]
		public string Mtch_Val
		{
			get
			{
				return this._Mtch_Val;
			}
			set
			{
				if ((this._Mtch_Val != value))
				{
					this.OnMtch_ValChanging(value);
					this.SendPropertyChanging();
					this._Mtch_Val = value;
					this.SendPropertyChanged("Mtch_Val");
					this.OnMtch_ValChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.MSDRG")]
	public partial class MSDRG : NRC.Picker.Depricated.OCSHHCAHPS.ImportProcessor.DAL.EntityBase
	{
		
		private string _MSDRG1;
		
		private string _VisitType;
		
		private string _Service;
		
		public MSDRG()
		{
		}
		
		[Column(Name="MSDRG", Storage="_MSDRG1", DbType="VarChar(10) NOT NULL", CanBeNull=false)]
		public string MSDRG1
		{
			get
			{
				return this._MSDRG1;
			}
			set
			{
				if ((this._MSDRG1 != value))
				{
					this._MSDRG1 = value;
				}
			}
		}
		
		[Column(Storage="_VisitType", DbType="VarChar(10) NOT NULL", CanBeNull=false)]
		public string VisitType
		{
			get
			{
				return this._VisitType;
			}
			set
			{
				if ((this._VisitType != value))
				{
					this._VisitType = value;
				}
			}
		}
		
		[Column(Storage="_Service", DbType="VarChar(10) NOT NULL", CanBeNull=false)]
		public string Service
		{
			get
			{
				return this._Service;
			}
			set
			{
				if ((this._Service != value))
				{
					this._Service = value;
				}
			}
		}
	}
	
	[Table(Name="dbo.PervasiveProcessErrorLog")]
	public partial class PervasiveProcessErrorLog : NRC.Picker.Depricated.OCSHHCAHPS.ImportProcessor.DAL.EntityBase
	{
		
		private int _Err_id;
		
		private System.Nullable<System.DateTime> _DatLogged;
		
		private string _StrFileName;
		
		private string _ErrMsg;
		
		public PervasiveProcessErrorLog()
		{
		}
		
		[Column(Name="err_id", Storage="_Err_id", AutoSync=AutoSync.Always, DbType="Int NOT NULL IDENTITY", IsDbGenerated=true)]
		public int Err_id
		{
			get
			{
				return this._Err_id;
			}
			set
			{
				if ((this._Err_id != value))
				{
					this._Err_id = value;
				}
			}
		}
		
		[Column(Name="datLogged", Storage="_DatLogged", DbType="DateTime")]
		public System.Nullable<System.DateTime> DatLogged
		{
			get
			{
				return this._DatLogged;
			}
			set
			{
				if ((this._DatLogged != value))
				{
					this._DatLogged = value;
				}
			}
		}
		
		[Column(Name="strFileName", Storage="_StrFileName", DbType="VarChar(100)")]
		public string StrFileName
		{
			get
			{
				return this._StrFileName;
			}
			set
			{
				if ((this._StrFileName != value))
				{
					this._StrFileName = value;
				}
			}
		}
		
		[Column(Name="errMsg", Storage="_ErrMsg", DbType="VarChar(2000)")]
		public string ErrMsg
		{
			get
			{
				return this._ErrMsg;
			}
			set
			{
				if ((this._ErrMsg != value))
				{
					this._ErrMsg = value;
				}
			}
		}
	}
	
	[Table(Name="dbo.temp_dmp_val_counts")]
	public partial class Temp_dmp_val_counts : NRC.Picker.Depricated.OCSHHCAHPS.ImportProcessor.DAL.EntityBase
	{
		
		private System.Nullable<int> _Datafile_id;
		
		private string _Strfield_nm;
		
		private System.Nullable<int> _Occurrences;
		
		private System.Nullable<int> _PctOfTotalNull;
		
		private System.Nullable<int> _IntRecords;
		
		private System.Nullable<double> _Realpercent;
		
		public Temp_dmp_val_counts()
		{
		}
		
		[Column(Name="datafile_id", Storage="_Datafile_id", DbType="Int")]
		public System.Nullable<int> Datafile_id
		{
			get
			{
				return this._Datafile_id;
			}
			set
			{
				if ((this._Datafile_id != value))
				{
					this._Datafile_id = value;
				}
			}
		}
		
		[Column(Name="strfield_nm", Storage="_Strfield_nm", DbType="VarChar(100)")]
		public string Strfield_nm
		{
			get
			{
				return this._Strfield_nm;
			}
			set
			{
				if ((this._Strfield_nm != value))
				{
					this._Strfield_nm = value;
				}
			}
		}
		
		[Column(Name="occurrences", Storage="_Occurrences", DbType="Int")]
		public System.Nullable<int> Occurrences
		{
			get
			{
				return this._Occurrences;
			}
			set
			{
				if ((this._Occurrences != value))
				{
					this._Occurrences = value;
				}
			}
		}
		
		[Column(Storage="_PctOfTotalNull", DbType="Int")]
		public System.Nullable<int> PctOfTotalNull
		{
			get
			{
				return this._PctOfTotalNull;
			}
			set
			{
				if ((this._PctOfTotalNull != value))
				{
					this._PctOfTotalNull = value;
				}
			}
		}
		
		[Column(Name="intRecords", Storage="_IntRecords", DbType="Int")]
		public System.Nullable<int> IntRecords
		{
			get
			{
				return this._IntRecords;
			}
			set
			{
				if ((this._IntRecords != value))
				{
					this._IntRecords = value;
				}
			}
		}
		
		[Column(Name="realpercent", Storage="_Realpercent", DbType="Float")]
		public System.Nullable<double> Realpercent
		{
			get
			{
				return this._Realpercent;
			}
			set
			{
				if ((this._Realpercent != value))
				{
					this._Realpercent = value;
				}
			}
		}
	}
	
	[Table(Name="dbo.Transform")]
	public partial class Transform : NRC.Picker.Depricated.OCSHHCAHPS.ImportProcessor.DAL.EntityBase, INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _TransformId;
		
		private string _TransformName;
		
		private System.DateTime _CreateDate;
		
		private string _CreateUser;
		
		private System.Nullable<System.DateTime> _UpdateDate;
		
		private string _UpdateUser;
		
		private EntitySet<ClientTransform> _ClientTransform;
		
		private EntitySet<TransformDefinition> _TransformDefinition;
		
		private EntitySet<TransformImports> _TransformImports;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnTransformIdChanging(int value);
    partial void OnTransformIdChanged();
    partial void OnTransformNameChanging(string value);
    partial void OnTransformNameChanged();
    partial void OnCreateDateChanging(System.DateTime value);
    partial void OnCreateDateChanged();
    partial void OnCreateUserChanging(string value);
    partial void OnCreateUserChanged();
    partial void OnUpdateDateChanging(System.Nullable<System.DateTime> value);
    partial void OnUpdateDateChanged();
    partial void OnUpdateUserChanging(string value);
    partial void OnUpdateUserChanged();
    #endregion
		
		public Transform()
		{
			this._ClientTransform = new EntitySet<ClientTransform>(new Action<ClientTransform>(this.attach_ClientTransform), new Action<ClientTransform>(this.detach_ClientTransform));
			this._TransformDefinition = new EntitySet<TransformDefinition>(new Action<TransformDefinition>(this.attach_TransformDefinition), new Action<TransformDefinition>(this.detach_TransformDefinition));
			this._TransformImports = new EntitySet<TransformImports>(new Action<TransformImports>(this.attach_TransformImports), new Action<TransformImports>(this.detach_TransformImports));
			OnCreated();
		}
		
		[Column(Storage="_TransformId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int TransformId
		{
			get
			{
				return this._TransformId;
			}
			set
			{
				if ((this._TransformId != value))
				{
					this.OnTransformIdChanging(value);
					this.SendPropertyChanging();
					this._TransformId = value;
					this.SendPropertyChanged("TransformId");
					this.OnTransformIdChanged();
				}
			}
		}
		
		[Column(Storage="_TransformName", DbType="VarChar(100) NOT NULL", CanBeNull=false)]
		public string TransformName
		{
			get
			{
				return this._TransformName;
			}
			set
			{
				if ((this._TransformName != value))
				{
					this.OnTransformNameChanging(value);
					this.SendPropertyChanging();
					this._TransformName = value;
					this.SendPropertyChanged("TransformName");
					this.OnTransformNameChanged();
				}
			}
		}
		
		[Column(Storage="_CreateDate", DbType="DateTime NOT NULL")]
		public System.DateTime CreateDate
		{
			get
			{
				return this._CreateDate;
			}
			set
			{
				if ((this._CreateDate != value))
				{
					this.OnCreateDateChanging(value);
					this.SendPropertyChanging();
					this._CreateDate = value;
					this.SendPropertyChanged("CreateDate");
					this.OnCreateDateChanged();
				}
			}
		}
		
		[Column(Storage="_CreateUser", DbType="VarChar(64) NOT NULL", CanBeNull=false)]
		public string CreateUser
		{
			get
			{
				return this._CreateUser;
			}
			set
			{
				if ((this._CreateUser != value))
				{
					this.OnCreateUserChanging(value);
					this.SendPropertyChanging();
					this._CreateUser = value;
					this.SendPropertyChanged("CreateUser");
					this.OnCreateUserChanged();
				}
			}
		}
		
		[Column(Storage="_UpdateDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> UpdateDate
		{
			get
			{
				return this._UpdateDate;
			}
			set
			{
				if ((this._UpdateDate != value))
				{
					this.OnUpdateDateChanging(value);
					this.SendPropertyChanging();
					this._UpdateDate = value;
					this.SendPropertyChanged("UpdateDate");
					this.OnUpdateDateChanged();
				}
			}
		}
		
		[Column(Storage="_UpdateUser", DbType="VarChar(64)")]
		public string UpdateUser
		{
			get
			{
				return this._UpdateUser;
			}
			set
			{
				if ((this._UpdateUser != value))
				{
					this.OnUpdateUserChanging(value);
					this.SendPropertyChanging();
					this._UpdateUser = value;
					this.SendPropertyChanged("UpdateUser");
					this.OnUpdateUserChanged();
				}
			}
		}
		
		[Association(Name="FK_ClientTransform_Transform", Storage="_ClientTransform", OtherKey="TransformId", DeleteRule="NO ACTION")]
		public EntitySet<ClientTransform> ClientTransform
		{
			get
			{
				return this._ClientTransform;
			}
			set
			{
				this._ClientTransform.Assign(value);
			}
		}
		
		[Association(Name="FK_TransformDefinition_Transform", Storage="_TransformDefinition", OtherKey="TransformId", DeleteRule="NO ACTION")]
		public EntitySet<TransformDefinition> TransformDefinition
		{
			get
			{
				return this._TransformDefinition;
			}
			set
			{
				this._TransformDefinition.Assign(value);
			}
		}
		
		[Association(Name="FK_TransformImports_Transform", Storage="_TransformImports", OtherKey="TransformId", DeleteRule="NO ACTION")]
		public EntitySet<TransformImports> TransformImports
		{
			get
			{
				return this._TransformImports;
			}
			set
			{
				this._TransformImports.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_ClientTransform(ClientTransform entity)
		{
			this.SendPropertyChanging();
			entity.Transform = this;
		}
		
		private void detach_ClientTransform(ClientTransform entity)
		{
			this.SendPropertyChanging();
			entity.Transform = null;
		}
		
		private void attach_TransformDefinition(TransformDefinition entity)
		{
			this.SendPropertyChanging();
			entity.Transform = this;
		}
		
		private void detach_TransformDefinition(TransformDefinition entity)
		{
			this.SendPropertyChanging();
			entity.Transform = null;
		}
		
		private void attach_TransformImports(TransformImports entity)
		{
			this.SendPropertyChanging();
			entity.Transform = this;
		}
		
		private void detach_TransformImports(TransformImports entity)
		{
			this.SendPropertyChanging();
			entity.Transform = null;
		}
	}
	
	[Table(Name="dbo.TransformClientMapping")]
	public partial class TransformClientMapping : NRC.Picker.Depricated.OCSHHCAHPS.ImportProcessor.DAL.EntityBase, INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Client_id;
		
		private int _Study_id;
		
		private int _Survey_id;
		
		private int _TransformMappingId;
		
		private string _SourceFieldName;
		
		private string _Transform;
		
		private System.DateTime _CreateDate;
		
		private string _CreateUser;
		
		private System.Nullable<System.DateTime> _UpdateDate;
		
		private string _UpdateUser;
		
		private EntityRef<TransformMapping> _TransformMapping;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnClient_idChanging(int value);
    partial void OnClient_idChanged();
    partial void OnStudy_idChanging(int value);
    partial void OnStudy_idChanged();
    partial void OnSurvey_idChanging(int value);
    partial void OnSurvey_idChanged();
    partial void OnTransformMappingIdChanging(int value);
    partial void OnTransformMappingIdChanged();
    partial void OnSourceFieldNameChanging(string value);
    partial void OnSourceFieldNameChanged();
    partial void OnTransformChanging(string value);
    partial void OnTransformChanged();
    partial void OnCreateDateChanging(System.DateTime value);
    partial void OnCreateDateChanged();
    partial void OnCreateUserChanging(string value);
    partial void OnCreateUserChanged();
    partial void OnUpdateDateChanging(System.Nullable<System.DateTime> value);
    partial void OnUpdateDateChanged();
    partial void OnUpdateUserChanging(string value);
    partial void OnUpdateUserChanged();
    #endregion
		
		public TransformClientMapping()
		{
			this._TransformMapping = default(EntityRef<TransformMapping>);
			OnCreated();
		}
		
		[Column(Storage="_Client_id", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int Client_id
		{
			get
			{
				return this._Client_id;
			}
			set
			{
				if ((this._Client_id != value))
				{
					this.OnClient_idChanging(value);
					this.SendPropertyChanging();
					this._Client_id = value;
					this.SendPropertyChanged("Client_id");
					this.OnClient_idChanged();
				}
			}
		}
		
		[Column(Storage="_Study_id", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int Study_id
		{
			get
			{
				return this._Study_id;
			}
			set
			{
				if ((this._Study_id != value))
				{
					this.OnStudy_idChanging(value);
					this.SendPropertyChanging();
					this._Study_id = value;
					this.SendPropertyChanged("Study_id");
					this.OnStudy_idChanged();
				}
			}
		}
		
		[Column(Storage="_Survey_id", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int Survey_id
		{
			get
			{
				return this._Survey_id;
			}
			set
			{
				if ((this._Survey_id != value))
				{
					this.OnSurvey_idChanging(value);
					this.SendPropertyChanging();
					this._Survey_id = value;
					this.SendPropertyChanged("Survey_id");
					this.OnSurvey_idChanged();
				}
			}
		}
		
		[Column(Storage="_TransformMappingId", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int TransformMappingId
		{
			get
			{
				return this._TransformMappingId;
			}
			set
			{
				if ((this._TransformMappingId != value))
				{
					if (this._TransformMapping.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnTransformMappingIdChanging(value);
					this.SendPropertyChanging();
					this._TransformMappingId = value;
					this.SendPropertyChanged("TransformMappingId");
					this.OnTransformMappingIdChanged();
				}
			}
		}
		
		[Column(Storage="_SourceFieldName", DbType="VarChar(100)")]
		public string SourceFieldName
		{
			get
			{
				return this._SourceFieldName;
			}
			set
			{
				if ((this._SourceFieldName != value))
				{
					this.OnSourceFieldNameChanging(value);
					this.SendPropertyChanging();
					this._SourceFieldName = value;
					this.SendPropertyChanged("SourceFieldName");
					this.OnSourceFieldNameChanged();
				}
			}
		}
		
		[Column(Storage="_Transform", DbType="VarChar(7000)")]
		public string Transform
		{
			get
			{
				return this._Transform;
			}
			set
			{
				if ((this._Transform != value))
				{
					this.OnTransformChanging(value);
					this.SendPropertyChanging();
					this._Transform = value;
					this.SendPropertyChanged("Transform");
					this.OnTransformChanged();
				}
			}
		}
		
		[Column(Storage="_CreateDate", DbType="DateTime NOT NULL")]
		public System.DateTime CreateDate
		{
			get
			{
				return this._CreateDate;
			}
			set
			{
				if ((this._CreateDate != value))
				{
					this.OnCreateDateChanging(value);
					this.SendPropertyChanging();
					this._CreateDate = value;
					this.SendPropertyChanged("CreateDate");
					this.OnCreateDateChanged();
				}
			}
		}
		
		[Column(Storage="_CreateUser", DbType="VarChar(64) NOT NULL", CanBeNull=false)]
		public string CreateUser
		{
			get
			{
				return this._CreateUser;
			}
			set
			{
				if ((this._CreateUser != value))
				{
					this.OnCreateUserChanging(value);
					this.SendPropertyChanging();
					this._CreateUser = value;
					this.SendPropertyChanged("CreateUser");
					this.OnCreateUserChanged();
				}
			}
		}
		
		[Column(Storage="_UpdateDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> UpdateDate
		{
			get
			{
				return this._UpdateDate;
			}
			set
			{
				if ((this._UpdateDate != value))
				{
					this.OnUpdateDateChanging(value);
					this.SendPropertyChanging();
					this._UpdateDate = value;
					this.SendPropertyChanged("UpdateDate");
					this.OnUpdateDateChanged();
				}
			}
		}
		
		[Column(Storage="_UpdateUser", DbType="VarChar(64)")]
		public string UpdateUser
		{
			get
			{
				return this._UpdateUser;
			}
			set
			{
				if ((this._UpdateUser != value))
				{
					this.OnUpdateUserChanging(value);
					this.SendPropertyChanging();
					this._UpdateUser = value;
					this.SendPropertyChanged("UpdateUser");
					this.OnUpdateUserChanged();
				}
			}
		}
		
		[Association(Name="FK_TransformClientMapping_TransformMapping", Storage="_TransformMapping", ThisKey="TransformMappingId", IsForeignKey=true)]
		public TransformMapping TransformMapping
		{
			get
			{
				return this._TransformMapping.Entity;
			}
			set
			{
				TransformMapping previousValue = this._TransformMapping.Entity;
				if (((previousValue != value) 
							|| (this._TransformMapping.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._TransformMapping.Entity = null;
						previousValue.TransformClientMapping.Remove(this);
					}
					this._TransformMapping.Entity = value;
					if ((value != null))
					{
						value.TransformClientMapping.Add(this);
						this._TransformMappingId = value.TransformMappingId;
					}
					else
					{
						this._TransformMappingId = default(int);
					}
					this.SendPropertyChanged("TransformMapping");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.TransformDefinition")]
	public partial class TransformDefinition : NRC.Picker.Depricated.OCSHHCAHPS.ImportProcessor.DAL.EntityBase, INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _TransformId;
		
		private int _TransformTargetId;
		
		private System.DateTime _CreateDate;
		
		private string _CreateUser;
		
		private System.Nullable<System.DateTime> _UpdateDate;
		
		private string _UpdateUser;
		
		private EntityRef<Transform> _Transform;
		
		private EntityRef<TransformTarget> _TransformTarget;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnTransformIdChanging(int value);
    partial void OnTransformIdChanged();
    partial void OnTransformTargetIdChanging(int value);
    partial void OnTransformTargetIdChanged();
    partial void OnCreateDateChanging(System.DateTime value);
    partial void OnCreateDateChanged();
    partial void OnCreateUserChanging(string value);
    partial void OnCreateUserChanged();
    partial void OnUpdateDateChanging(System.Nullable<System.DateTime> value);
    partial void OnUpdateDateChanged();
    partial void OnUpdateUserChanging(string value);
    partial void OnUpdateUserChanged();
    #endregion
		
		public TransformDefinition()
		{
			this._Transform = default(EntityRef<Transform>);
			this._TransformTarget = default(EntityRef<TransformTarget>);
			OnCreated();
		}
		
		[Column(Storage="_TransformId", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int TransformId
		{
			get
			{
				return this._TransformId;
			}
			set
			{
				if ((this._TransformId != value))
				{
					if (this._Transform.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnTransformIdChanging(value);
					this.SendPropertyChanging();
					this._TransformId = value;
					this.SendPropertyChanged("TransformId");
					this.OnTransformIdChanged();
				}
			}
		}
		
		[Column(Storage="_TransformTargetId", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int TransformTargetId
		{
			get
			{
				return this._TransformTargetId;
			}
			set
			{
				if ((this._TransformTargetId != value))
				{
					if (this._TransformTarget.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnTransformTargetIdChanging(value);
					this.SendPropertyChanging();
					this._TransformTargetId = value;
					this.SendPropertyChanged("TransformTargetId");
					this.OnTransformTargetIdChanged();
				}
			}
		}
		
		[Column(Storage="_CreateDate", DbType="DateTime NOT NULL")]
		public System.DateTime CreateDate
		{
			get
			{
				return this._CreateDate;
			}
			set
			{
				if ((this._CreateDate != value))
				{
					this.OnCreateDateChanging(value);
					this.SendPropertyChanging();
					this._CreateDate = value;
					this.SendPropertyChanged("CreateDate");
					this.OnCreateDateChanged();
				}
			}
		}
		
		[Column(Storage="_CreateUser", DbType="VarChar(64) NOT NULL", CanBeNull=false)]
		public string CreateUser
		{
			get
			{
				return this._CreateUser;
			}
			set
			{
				if ((this._CreateUser != value))
				{
					this.OnCreateUserChanging(value);
					this.SendPropertyChanging();
					this._CreateUser = value;
					this.SendPropertyChanged("CreateUser");
					this.OnCreateUserChanged();
				}
			}
		}
		
		[Column(Storage="_UpdateDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> UpdateDate
		{
			get
			{
				return this._UpdateDate;
			}
			set
			{
				if ((this._UpdateDate != value))
				{
					this.OnUpdateDateChanging(value);
					this.SendPropertyChanging();
					this._UpdateDate = value;
					this.SendPropertyChanged("UpdateDate");
					this.OnUpdateDateChanged();
				}
			}
		}
		
		[Column(Storage="_UpdateUser", DbType="VarChar(64)")]
		public string UpdateUser
		{
			get
			{
				return this._UpdateUser;
			}
			set
			{
				if ((this._UpdateUser != value))
				{
					this.OnUpdateUserChanging(value);
					this.SendPropertyChanging();
					this._UpdateUser = value;
					this.SendPropertyChanged("UpdateUser");
					this.OnUpdateUserChanged();
				}
			}
		}
		
		[Association(Name="FK_TransformDefinition_Transform", Storage="_Transform", ThisKey="TransformId", IsForeignKey=true)]
		public Transform Transform
		{
			get
			{
				return this._Transform.Entity;
			}
			set
			{
				Transform previousValue = this._Transform.Entity;
				if (((previousValue != value) 
							|| (this._Transform.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Transform.Entity = null;
						previousValue.TransformDefinition.Remove(this);
					}
					this._Transform.Entity = value;
					if ((value != null))
					{
						value.TransformDefinition.Add(this);
						this._TransformId = value.TransformId;
					}
					else
					{
						this._TransformId = default(int);
					}
					this.SendPropertyChanged("Transform");
				}
			}
		}
		
		[Association(Name="FK_TransformDefinition_TransformTarget", Storage="_TransformTarget", ThisKey="TransformTargetId", IsForeignKey=true)]
		public TransformTarget TransformTarget
		{
			get
			{
				return this._TransformTarget.Entity;
			}
			set
			{
				TransformTarget previousValue = this._TransformTarget.Entity;
				if (((previousValue != value) 
							|| (this._TransformTarget.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._TransformTarget.Entity = null;
						previousValue.TransformDefinition.Remove(this);
					}
					this._TransformTarget.Entity = value;
					if ((value != null))
					{
						value.TransformDefinition.Add(this);
						this._TransformTargetId = value.TransformTargetId;
					}
					else
					{
						this._TransformTargetId = default(int);
					}
					this.SendPropertyChanged("TransformTarget");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.TransformImports")]
	public partial class TransformImports : NRC.Picker.Depricated.OCSHHCAHPS.ImportProcessor.DAL.EntityBase, INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _TransformId;
		
		private int _TransformLibraryId;
		
		private System.DateTime _CreateDate;
		
		private string _CreateUser;
		
		private System.Nullable<System.DateTime> _UpdateDate;
		
		private string _UpdateUser;
		
		private EntityRef<Transform> _Transform;
		
		private EntityRef<TransformLibrary> _TransformLibrary;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnTransformIdChanging(int value);
    partial void OnTransformIdChanged();
    partial void OnTransformLibraryIdChanging(int value);
    partial void OnTransformLibraryIdChanged();
    partial void OnCreateDateChanging(System.DateTime value);
    partial void OnCreateDateChanged();
    partial void OnCreateUserChanging(string value);
    partial void OnCreateUserChanged();
    partial void OnUpdateDateChanging(System.Nullable<System.DateTime> value);
    partial void OnUpdateDateChanged();
    partial void OnUpdateUserChanging(string value);
    partial void OnUpdateUserChanged();
    #endregion
		
		public TransformImports()
		{
			this._Transform = default(EntityRef<Transform>);
			this._TransformLibrary = default(EntityRef<TransformLibrary>);
			OnCreated();
		}
		
		[Column(Storage="_TransformId", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int TransformId
		{
			get
			{
				return this._TransformId;
			}
			set
			{
				if ((this._TransformId != value))
				{
					if (this._Transform.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnTransformIdChanging(value);
					this.SendPropertyChanging();
					this._TransformId = value;
					this.SendPropertyChanged("TransformId");
					this.OnTransformIdChanged();
				}
			}
		}
		
		[Column(Storage="_TransformLibraryId", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int TransformLibraryId
		{
			get
			{
				return this._TransformLibraryId;
			}
			set
			{
				if ((this._TransformLibraryId != value))
				{
					if (this._TransformLibrary.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnTransformLibraryIdChanging(value);
					this.SendPropertyChanging();
					this._TransformLibraryId = value;
					this.SendPropertyChanged("TransformLibraryId");
					this.OnTransformLibraryIdChanged();
				}
			}
		}
		
		[Column(Storage="_CreateDate", DbType="DateTime NOT NULL")]
		public System.DateTime CreateDate
		{
			get
			{
				return this._CreateDate;
			}
			set
			{
				if ((this._CreateDate != value))
				{
					this.OnCreateDateChanging(value);
					this.SendPropertyChanging();
					this._CreateDate = value;
					this.SendPropertyChanged("CreateDate");
					this.OnCreateDateChanged();
				}
			}
		}
		
		[Column(Storage="_CreateUser", DbType="VarChar(64) NOT NULL", CanBeNull=false)]
		public string CreateUser
		{
			get
			{
				return this._CreateUser;
			}
			set
			{
				if ((this._CreateUser != value))
				{
					this.OnCreateUserChanging(value);
					this.SendPropertyChanging();
					this._CreateUser = value;
					this.SendPropertyChanged("CreateUser");
					this.OnCreateUserChanged();
				}
			}
		}
		
		[Column(Storage="_UpdateDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> UpdateDate
		{
			get
			{
				return this._UpdateDate;
			}
			set
			{
				if ((this._UpdateDate != value))
				{
					this.OnUpdateDateChanging(value);
					this.SendPropertyChanging();
					this._UpdateDate = value;
					this.SendPropertyChanged("UpdateDate");
					this.OnUpdateDateChanged();
				}
			}
		}
		
		[Column(Storage="_UpdateUser", DbType="VarChar(64)")]
		public string UpdateUser
		{
			get
			{
				return this._UpdateUser;
			}
			set
			{
				if ((this._UpdateUser != value))
				{
					this.OnUpdateUserChanging(value);
					this.SendPropertyChanging();
					this._UpdateUser = value;
					this.SendPropertyChanged("UpdateUser");
					this.OnUpdateUserChanged();
				}
			}
		}
		
		[Association(Name="FK_TransformImports_Transform", Storage="_Transform", ThisKey="TransformId", IsForeignKey=true)]
		public Transform Transform
		{
			get
			{
				return this._Transform.Entity;
			}
			set
			{
				Transform previousValue = this._Transform.Entity;
				if (((previousValue != value) 
							|| (this._Transform.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Transform.Entity = null;
						previousValue.TransformImports.Remove(this);
					}
					this._Transform.Entity = value;
					if ((value != null))
					{
						value.TransformImports.Add(this);
						this._TransformId = value.TransformId;
					}
					else
					{
						this._TransformId = default(int);
					}
					this.SendPropertyChanged("Transform");
				}
			}
		}
		
		[Association(Name="FK_TransformImports_TransformLibrary", Storage="_TransformLibrary", ThisKey="TransformLibraryId", IsForeignKey=true)]
		public TransformLibrary TransformLibrary
		{
			get
			{
				return this._TransformLibrary.Entity;
			}
			set
			{
				TransformLibrary previousValue = this._TransformLibrary.Entity;
				if (((previousValue != value) 
							|| (this._TransformLibrary.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._TransformLibrary.Entity = null;
						previousValue.TransformImports.Remove(this);
					}
					this._TransformLibrary.Entity = value;
					if ((value != null))
					{
						value.TransformImports.Add(this);
						this._TransformLibraryId = value.TransformLibraryId;
					}
					else
					{
						this._TransformLibraryId = default(int);
					}
					this.SendPropertyChanged("TransformLibrary");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.TransformLibrary")]
	public partial class TransformLibrary : NRC.Picker.Depricated.OCSHHCAHPS.ImportProcessor.DAL.EntityBase, INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _TransformLibraryId;
		
		private string _TransformLibraryName;
		
		private string _Code;
		
		private System.DateTime _CreateDate;
		
		private string _CreateUser;
		
		private System.Nullable<System.DateTime> _UpdateDate;
		
		private string _UpdateUser;
		
		private EntitySet<TransformImports> _TransformImports;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnTransformLibraryIdChanging(int value);
    partial void OnTransformLibraryIdChanged();
    partial void OnTransformLibraryNameChanging(string value);
    partial void OnTransformLibraryNameChanged();
    partial void OnCodeChanging(string value);
    partial void OnCodeChanged();
    partial void OnCreateDateChanging(System.DateTime value);
    partial void OnCreateDateChanged();
    partial void OnCreateUserChanging(string value);
    partial void OnCreateUserChanged();
    partial void OnUpdateDateChanging(System.Nullable<System.DateTime> value);
    partial void OnUpdateDateChanged();
    partial void OnUpdateUserChanging(string value);
    partial void OnUpdateUserChanged();
    #endregion
		
		public TransformLibrary()
		{
			this._TransformImports = new EntitySet<TransformImports>(new Action<TransformImports>(this.attach_TransformImports), new Action<TransformImports>(this.detach_TransformImports));
			OnCreated();
		}
		
		[Column(Storage="_TransformLibraryId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int TransformLibraryId
		{
			get
			{
				return this._TransformLibraryId;
			}
			set
			{
				if ((this._TransformLibraryId != value))
				{
					this.OnTransformLibraryIdChanging(value);
					this.SendPropertyChanging();
					this._TransformLibraryId = value;
					this.SendPropertyChanged("TransformLibraryId");
					this.OnTransformLibraryIdChanged();
				}
			}
		}
		
		[Column(Storage="_TransformLibraryName", DbType="VarChar(32) NOT NULL", CanBeNull=false)]
		public string TransformLibraryName
		{
			get
			{
				return this._TransformLibraryName;
			}
			set
			{
				if ((this._TransformLibraryName != value))
				{
					this.OnTransformLibraryNameChanging(value);
					this.SendPropertyChanging();
					this._TransformLibraryName = value;
					this.SendPropertyChanged("TransformLibraryName");
					this.OnTransformLibraryNameChanged();
				}
			}
		}
		
		[Column(Storage="_Code", DbType="VarChar(7000) NOT NULL", CanBeNull=false)]
		public string Code
		{
			get
			{
				return this._Code;
			}
			set
			{
				if ((this._Code != value))
				{
					this.OnCodeChanging(value);
					this.SendPropertyChanging();
					this._Code = value;
					this.SendPropertyChanged("Code");
					this.OnCodeChanged();
				}
			}
		}
		
		[Column(Storage="_CreateDate", DbType="DateTime NOT NULL")]
		public System.DateTime CreateDate
		{
			get
			{
				return this._CreateDate;
			}
			set
			{
				if ((this._CreateDate != value))
				{
					this.OnCreateDateChanging(value);
					this.SendPropertyChanging();
					this._CreateDate = value;
					this.SendPropertyChanged("CreateDate");
					this.OnCreateDateChanged();
				}
			}
		}
		
		[Column(Storage="_CreateUser", DbType="VarChar(64) NOT NULL", CanBeNull=false)]
		public string CreateUser
		{
			get
			{
				return this._CreateUser;
			}
			set
			{
				if ((this._CreateUser != value))
				{
					this.OnCreateUserChanging(value);
					this.SendPropertyChanging();
					this._CreateUser = value;
					this.SendPropertyChanged("CreateUser");
					this.OnCreateUserChanged();
				}
			}
		}
		
		[Column(Storage="_UpdateDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> UpdateDate
		{
			get
			{
				return this._UpdateDate;
			}
			set
			{
				if ((this._UpdateDate != value))
				{
					this.OnUpdateDateChanging(value);
					this.SendPropertyChanging();
					this._UpdateDate = value;
					this.SendPropertyChanged("UpdateDate");
					this.OnUpdateDateChanged();
				}
			}
		}
		
		[Column(Storage="_UpdateUser", DbType="VarChar(64)")]
		public string UpdateUser
		{
			get
			{
				return this._UpdateUser;
			}
			set
			{
				if ((this._UpdateUser != value))
				{
					this.OnUpdateUserChanging(value);
					this.SendPropertyChanging();
					this._UpdateUser = value;
					this.SendPropertyChanged("UpdateUser");
					this.OnUpdateUserChanged();
				}
			}
		}
		
		[Association(Name="FK_TransformImports_TransformLibrary", Storage="_TransformImports", OtherKey="TransformLibraryId", DeleteRule="NO ACTION")]
		public EntitySet<TransformImports> TransformImports
		{
			get
			{
				return this._TransformImports;
			}
			set
			{
				this._TransformImports.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_TransformImports(TransformImports entity)
		{
			this.SendPropertyChanging();
			entity.TransformLibrary = this;
		}
		
		private void detach_TransformImports(TransformImports entity)
		{
			this.SendPropertyChanging();
			entity.TransformLibrary = null;
		}
	}
	
	[Table(Name="dbo.TransformMapping")]
	public partial class TransformMapping : NRC.Picker.Depricated.OCSHHCAHPS.ImportProcessor.DAL.EntityBase, INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _TransformMappingId;
		
		private int _TransformTargetId;
		
		private string _SourceFieldName;
		
		private string _TargetFieldname;
		
		private string _Transform;
		
		private System.DateTime _CreateDate;
		
		private string _CreateUser;
		
		private System.Nullable<System.DateTime> _UpdateDate;
		
		private string _UpdateUser;
		
		private EntitySet<TransformClientMapping> _TransformClientMapping;
		
		private EntityRef<TransformTarget> _TransformTarget;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnTransformMappingIdChanging(int value);
    partial void OnTransformMappingIdChanged();
    partial void OnTransformTargetIdChanging(int value);
    partial void OnTransformTargetIdChanged();
    partial void OnSourceFieldNameChanging(string value);
    partial void OnSourceFieldNameChanged();
    partial void OnTargetFieldnameChanging(string value);
    partial void OnTargetFieldnameChanged();
    partial void OnTransformChanging(string value);
    partial void OnTransformChanged();
    partial void OnCreateDateChanging(System.DateTime value);
    partial void OnCreateDateChanged();
    partial void OnCreateUserChanging(string value);
    partial void OnCreateUserChanged();
    partial void OnUpdateDateChanging(System.Nullable<System.DateTime> value);
    partial void OnUpdateDateChanged();
    partial void OnUpdateUserChanging(string value);
    partial void OnUpdateUserChanged();
    #endregion
		
		public TransformMapping()
		{
			this._TransformClientMapping = new EntitySet<TransformClientMapping>(new Action<TransformClientMapping>(this.attach_TransformClientMapping), new Action<TransformClientMapping>(this.detach_TransformClientMapping));
			this._TransformTarget = default(EntityRef<TransformTarget>);
			OnCreated();
		}
		
		[Column(Storage="_TransformMappingId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int TransformMappingId
		{
			get
			{
				return this._TransformMappingId;
			}
			set
			{
				if ((this._TransformMappingId != value))
				{
					this.OnTransformMappingIdChanging(value);
					this.SendPropertyChanging();
					this._TransformMappingId = value;
					this.SendPropertyChanged("TransformMappingId");
					this.OnTransformMappingIdChanged();
				}
			}
		}
		
		[Column(Storage="_TransformTargetId", DbType="Int NOT NULL")]
		public int TransformTargetId
		{
			get
			{
				return this._TransformTargetId;
			}
			set
			{
				if ((this._TransformTargetId != value))
				{
					if (this._TransformTarget.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnTransformTargetIdChanging(value);
					this.SendPropertyChanging();
					this._TransformTargetId = value;
					this.SendPropertyChanged("TransformTargetId");
					this.OnTransformTargetIdChanged();
				}
			}
		}
		
		[Column(Storage="_SourceFieldName", DbType="VarChar(100)")]
		public string SourceFieldName
		{
			get
			{
				return this._SourceFieldName;
			}
			set
			{
				if ((this._SourceFieldName != value))
				{
					this.OnSourceFieldNameChanging(value);
					this.SendPropertyChanging();
					this._SourceFieldName = value;
					this.SendPropertyChanged("SourceFieldName");
					this.OnSourceFieldNameChanged();
				}
			}
		}
		
		[Column(Storage="_TargetFieldname", DbType="VarChar(100) NOT NULL", CanBeNull=false)]
		public string TargetFieldname
		{
			get
			{
				return this._TargetFieldname;
			}
			set
			{
				if ((this._TargetFieldname != value))
				{
					this.OnTargetFieldnameChanging(value);
					this.SendPropertyChanging();
					this._TargetFieldname = value;
					this.SendPropertyChanged("TargetFieldname");
					this.OnTargetFieldnameChanged();
				}
			}
		}
		
		[Column(Storage="_Transform", DbType="VarChar(7000)")]
		public string Transform
		{
			get
			{
				return this._Transform;
			}
			set
			{
				if ((this._Transform != value))
				{
					this.OnTransformChanging(value);
					this.SendPropertyChanging();
					this._Transform = value;
					this.SendPropertyChanged("Transform");
					this.OnTransformChanged();
				}
			}
		}
		
		[Column(Storage="_CreateDate", DbType="DateTime NOT NULL")]
		public System.DateTime CreateDate
		{
			get
			{
				return this._CreateDate;
			}
			set
			{
				if ((this._CreateDate != value))
				{
					this.OnCreateDateChanging(value);
					this.SendPropertyChanging();
					this._CreateDate = value;
					this.SendPropertyChanged("CreateDate");
					this.OnCreateDateChanged();
				}
			}
		}
		
		[Column(Storage="_CreateUser", DbType="VarChar(64) NOT NULL", CanBeNull=false)]
		public string CreateUser
		{
			get
			{
				return this._CreateUser;
			}
			set
			{
				if ((this._CreateUser != value))
				{
					this.OnCreateUserChanging(value);
					this.SendPropertyChanging();
					this._CreateUser = value;
					this.SendPropertyChanged("CreateUser");
					this.OnCreateUserChanged();
				}
			}
		}
		
		[Column(Storage="_UpdateDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> UpdateDate
		{
			get
			{
				return this._UpdateDate;
			}
			set
			{
				if ((this._UpdateDate != value))
				{
					this.OnUpdateDateChanging(value);
					this.SendPropertyChanging();
					this._UpdateDate = value;
					this.SendPropertyChanged("UpdateDate");
					this.OnUpdateDateChanged();
				}
			}
		}
		
		[Column(Storage="_UpdateUser", DbType="VarChar(64)")]
		public string UpdateUser
		{
			get
			{
				return this._UpdateUser;
			}
			set
			{
				if ((this._UpdateUser != value))
				{
					this.OnUpdateUserChanging(value);
					this.SendPropertyChanging();
					this._UpdateUser = value;
					this.SendPropertyChanged("UpdateUser");
					this.OnUpdateUserChanged();
				}
			}
		}
		
		[Association(Name="FK_TransformClientMapping_TransformMapping", Storage="_TransformClientMapping", OtherKey="TransformMappingId", DeleteRule="NO ACTION")]
		public EntitySet<TransformClientMapping> TransformClientMapping
		{
			get
			{
				return this._TransformClientMapping;
			}
			set
			{
				this._TransformClientMapping.Assign(value);
			}
		}
		
		[Association(Name="FK_TransformMapping_TransformTarget", Storage="_TransformTarget", ThisKey="TransformTargetId", IsForeignKey=true)]
		public TransformTarget TransformTarget
		{
			get
			{
				return this._TransformTarget.Entity;
			}
			set
			{
				TransformTarget previousValue = this._TransformTarget.Entity;
				if (((previousValue != value) 
							|| (this._TransformTarget.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._TransformTarget.Entity = null;
						previousValue.TransformMapping.Remove(this);
					}
					this._TransformTarget.Entity = value;
					if ((value != null))
					{
						value.TransformMapping.Add(this);
						this._TransformTargetId = value.TransformTargetId;
					}
					else
					{
						this._TransformTargetId = default(int);
					}
					this.SendPropertyChanged("TransformTarget");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_TransformClientMapping(TransformClientMapping entity)
		{
			this.SendPropertyChanging();
			entity.TransformMapping = this;
		}
		
		private void detach_TransformClientMapping(TransformClientMapping entity)
		{
			this.SendPropertyChanging();
			entity.TransformMapping = null;
		}
	}
	
	[Table(Name="dbo.TransformTarget")]
	public partial class TransformTarget : NRC.Picker.Depricated.OCSHHCAHPS.ImportProcessor.DAL.EntityBase, INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _TransformTargetId;
		
		private string _TargetName;
		
		private string _TargetTable;
		
		private System.DateTime _CreateDate;
		
		private string _CreateUser;
		
		private System.Nullable<System.DateTime> _UpdateDate;
		
		private string _UpdateUser;
		
		private EntitySet<TransformDefinition> _TransformDefinition;
		
		private EntitySet<TransformMapping> _TransformMapping;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnTransformTargetIdChanging(int value);
    partial void OnTransformTargetIdChanged();
    partial void OnTargetNameChanging(string value);
    partial void OnTargetNameChanged();
    partial void OnTargetTableChanging(string value);
    partial void OnTargetTableChanged();
    partial void OnCreateDateChanging(System.DateTime value);
    partial void OnCreateDateChanged();
    partial void OnCreateUserChanging(string value);
    partial void OnCreateUserChanged();
    partial void OnUpdateDateChanging(System.Nullable<System.DateTime> value);
    partial void OnUpdateDateChanged();
    partial void OnUpdateUserChanging(string value);
    partial void OnUpdateUserChanged();
    #endregion
		
		public TransformTarget()
		{
			this._TransformDefinition = new EntitySet<TransformDefinition>(new Action<TransformDefinition>(this.attach_TransformDefinition), new Action<TransformDefinition>(this.detach_TransformDefinition));
			this._TransformMapping = new EntitySet<TransformMapping>(new Action<TransformMapping>(this.attach_TransformMapping), new Action<TransformMapping>(this.detach_TransformMapping));
			OnCreated();
		}
		
		[Column(Storage="_TransformTargetId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int TransformTargetId
		{
			get
			{
				return this._TransformTargetId;
			}
			set
			{
				if ((this._TransformTargetId != value))
				{
					this.OnTransformTargetIdChanging(value);
					this.SendPropertyChanging();
					this._TransformTargetId = value;
					this.SendPropertyChanged("TransformTargetId");
					this.OnTransformTargetIdChanged();
				}
			}
		}
		
		[Column(Storage="_TargetName", DbType="VarChar(100) NOT NULL", CanBeNull=false)]
		public string TargetName
		{
			get
			{
				return this._TargetName;
			}
			set
			{
				if ((this._TargetName != value))
				{
					this.OnTargetNameChanging(value);
					this.SendPropertyChanging();
					this._TargetName = value;
					this.SendPropertyChanged("TargetName");
					this.OnTargetNameChanged();
				}
			}
		}
		
		[Column(Storage="_TargetTable", DbType="VarChar(100) NOT NULL", CanBeNull=false)]
		public string TargetTable
		{
			get
			{
				return this._TargetTable;
			}
			set
			{
				if ((this._TargetTable != value))
				{
					this.OnTargetTableChanging(value);
					this.SendPropertyChanging();
					this._TargetTable = value;
					this.SendPropertyChanged("TargetTable");
					this.OnTargetTableChanged();
				}
			}
		}
		
		[Column(Storage="_CreateDate", DbType="DateTime NOT NULL")]
		public System.DateTime CreateDate
		{
			get
			{
				return this._CreateDate;
			}
			set
			{
				if ((this._CreateDate != value))
				{
					this.OnCreateDateChanging(value);
					this.SendPropertyChanging();
					this._CreateDate = value;
					this.SendPropertyChanged("CreateDate");
					this.OnCreateDateChanged();
				}
			}
		}
		
		[Column(Storage="_CreateUser", DbType="VarChar(64) NOT NULL", CanBeNull=false)]
		public string CreateUser
		{
			get
			{
				return this._CreateUser;
			}
			set
			{
				if ((this._CreateUser != value))
				{
					this.OnCreateUserChanging(value);
					this.SendPropertyChanging();
					this._CreateUser = value;
					this.SendPropertyChanged("CreateUser");
					this.OnCreateUserChanged();
				}
			}
		}
		
		[Column(Storage="_UpdateDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> UpdateDate
		{
			get
			{
				return this._UpdateDate;
			}
			set
			{
				if ((this._UpdateDate != value))
				{
					this.OnUpdateDateChanging(value);
					this.SendPropertyChanging();
					this._UpdateDate = value;
					this.SendPropertyChanged("UpdateDate");
					this.OnUpdateDateChanged();
				}
			}
		}
		
		[Column(Storage="_UpdateUser", DbType="VarChar(64)")]
		public string UpdateUser
		{
			get
			{
				return this._UpdateUser;
			}
			set
			{
				if ((this._UpdateUser != value))
				{
					this.OnUpdateUserChanging(value);
					this.SendPropertyChanging();
					this._UpdateUser = value;
					this.SendPropertyChanged("UpdateUser");
					this.OnUpdateUserChanged();
				}
			}
		}
		
		[Association(Name="FK_TransformDefinition_TransformTarget", Storage="_TransformDefinition", OtherKey="TransformTargetId", DeleteRule="NO ACTION")]
		public EntitySet<TransformDefinition> TransformDefinition
		{
			get
			{
				return this._TransformDefinition;
			}
			set
			{
				this._TransformDefinition.Assign(value);
			}
		}
		
		[Association(Name="FK_TransformMapping_TransformTarget", Storage="_TransformMapping", OtherKey="TransformTargetId", DeleteRule="NO ACTION")]
		public EntitySet<TransformMapping> TransformMapping
		{
			get
			{
				return this._TransformMapping;
			}
			set
			{
				this._TransformMapping.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_TransformDefinition(TransformDefinition entity)
		{
			this.SendPropertyChanging();
			entity.TransformTarget = this;
		}
		
		private void detach_TransformDefinition(TransformDefinition entity)
		{
			this.SendPropertyChanging();
			entity.TransformTarget = null;
		}
		
		private void attach_TransformMapping(TransformMapping entity)
		{
			this.SendPropertyChanging();
			entity.TransformTarget = this;
		}
		
		private void detach_TransformMapping(TransformMapping entity)
		{
			this.SendPropertyChanging();
			entity.TransformTarget = null;
		}
	}
	
	[Table(Name="dbo.UploadActions")]
	public partial class UploadActions : NRC.Picker.Depricated.OCSHHCAHPS.ImportProcessor.DAL.EntityBase, INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _UploadAction_id;
		
		private string _UploadAction_Nm;
		
		private EntitySet<UploadFile> _UploadFile;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnUploadAction_idChanging(int value);
    partial void OnUploadAction_idChanged();
    partial void OnUploadAction_NmChanging(string value);
    partial void OnUploadAction_NmChanged();
    #endregion
		
		public UploadActions()
		{
			this._UploadFile = new EntitySet<UploadFile>(new Action<UploadFile>(this.attach_UploadFile), new Action<UploadFile>(this.detach_UploadFile));
			OnCreated();
		}
		
		[Column(Storage="_UploadAction_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int UploadAction_id
		{
			get
			{
				return this._UploadAction_id;
			}
			set
			{
				if ((this._UploadAction_id != value))
				{
					this.OnUploadAction_idChanging(value);
					this.SendPropertyChanging();
					this._UploadAction_id = value;
					this.SendPropertyChanged("UploadAction_id");
					this.OnUploadAction_idChanged();
				}
			}
		}
		
		[Column(Storage="_UploadAction_Nm", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string UploadAction_Nm
		{
			get
			{
				return this._UploadAction_Nm;
			}
			set
			{
				if ((this._UploadAction_Nm != value))
				{
					this.OnUploadAction_NmChanging(value);
					this.SendPropertyChanging();
					this._UploadAction_Nm = value;
					this.SendPropertyChanged("UploadAction_Nm");
					this.OnUploadAction_NmChanged();
				}
			}
		}
		
		[Association(Name="FK__UploadFil__Uploa__33D4B598", Storage="_UploadFile", OtherKey="UploadAction_id", DeleteRule="NO ACTION")]
		public EntitySet<UploadFile> UploadFile
		{
			get
			{
				return this._UploadFile;
			}
			set
			{
				this._UploadFile.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_UploadFile(UploadFile entity)
		{
			this.SendPropertyChanging();
			entity.UploadActions = this;
		}
		
		private void detach_UploadFile(UploadFile entity)
		{
			this.SendPropertyChanging();
			entity.UploadActions = null;
		}
	}
	
	[Table(Name="dbo.UploadedFileLogView")]
	public partial class UploadedFileLogView : NRC.Picker.Depricated.OCSHHCAHPS.ImportProcessor.DAL.EntityBase
	{
		
		private int _UploadFile_id;
		
		private string _OrigFile_Nm;
		
		private string _File_Nm;
		
		private int _FileSize;
		
		private System.Nullable<int> _UploadAction_id;
		
		private System.Nullable<int> _UploadFileState_id;
		
		private string _UploadStateParam;
		
		private System.DateTime _DateUploadFileStateChange;
		
		private System.Nullable<int> _DataFile_id;
		
		private string _ClientName;
		
		private System.Nullable<int> _Client_ID;
		
		private System.Nullable<int> _Study_ID;
		
		private System.Nullable<int> _Survey_ID;
		
		private System.Nullable<int> _FileType_id;
		
		private string _PervasiveMapName;
		
		private string _DataFileLocation;
		
		private string _DataFileName;
		
		private System.Nullable<int> _DataFileSize;
		
		private System.Nullable<int> _DataFileRecords;
		
		private System.Nullable<int> _IntLoaded;
		
		private System.Nullable<System.DateTime> _DatReceived;
		
		private System.Nullable<System.DateTime> _DatBegin;
		
		private System.Nullable<System.DateTime> _DatEnd;
		
		private System.Nullable<System.DateTime> _DatApplied;
		
		private System.Nullable<System.DateTime> _DatMinDate;
		
		private System.Nullable<System.DateTime> _DatMaxDate;
		
		private System.Nullable<System.DateTime> _DatDeleted;
		
		private System.Nullable<int> _DataSet_id;
		
		private string _AssocDataFiles;
		
		private System.Nullable<int> _DataFileState_id;
		
		private string _DataFileStateParam;
		
		public UploadedFileLogView()
		{
		}
		
		[Column(Storage="_UploadFile_id", DbType="Int NOT NULL")]
		public int UploadFile_id
		{
			get
			{
				return this._UploadFile_id;
			}
			set
			{
				if ((this._UploadFile_id != value))
				{
					this._UploadFile_id = value;
				}
			}
		}
		
		[Column(Storage="_OrigFile_Nm", DbType="VarChar(255) NOT NULL", CanBeNull=false)]
		public string OrigFile_Nm
		{
			get
			{
				return this._OrigFile_Nm;
			}
			set
			{
				if ((this._OrigFile_Nm != value))
				{
					this._OrigFile_Nm = value;
				}
			}
		}
		
		[Column(Storage="_File_Nm", DbType="VarChar(255) NOT NULL", CanBeNull=false)]
		public string File_Nm
		{
			get
			{
				return this._File_Nm;
			}
			set
			{
				if ((this._File_Nm != value))
				{
					this._File_Nm = value;
				}
			}
		}
		
		[Column(Storage="_FileSize", DbType="Int NOT NULL")]
		public int FileSize
		{
			get
			{
				return this._FileSize;
			}
			set
			{
				if ((this._FileSize != value))
				{
					this._FileSize = value;
				}
			}
		}
		
		[Column(Storage="_UploadAction_id", DbType="Int")]
		public System.Nullable<int> UploadAction_id
		{
			get
			{
				return this._UploadAction_id;
			}
			set
			{
				if ((this._UploadAction_id != value))
				{
					this._UploadAction_id = value;
				}
			}
		}
		
		[Column(Storage="_UploadFileState_id", DbType="Int")]
		public System.Nullable<int> UploadFileState_id
		{
			get
			{
				return this._UploadFileState_id;
			}
			set
			{
				if ((this._UploadFileState_id != value))
				{
					this._UploadFileState_id = value;
				}
			}
		}
		
		[Column(Storage="_UploadStateParam", DbType="VarChar(8000)")]
		public string UploadStateParam
		{
			get
			{
				return this._UploadStateParam;
			}
			set
			{
				if ((this._UploadStateParam != value))
				{
					this._UploadStateParam = value;
				}
			}
		}
		
		[Column(Storage="_DateUploadFileStateChange", DbType="DateTime NOT NULL")]
		public System.DateTime DateUploadFileStateChange
		{
			get
			{
				return this._DateUploadFileStateChange;
			}
			set
			{
				if ((this._DateUploadFileStateChange != value))
				{
					this._DateUploadFileStateChange = value;
				}
			}
		}
		
		[Column(Storage="_DataFile_id", DbType="Int")]
		public System.Nullable<int> DataFile_id
		{
			get
			{
				return this._DataFile_id;
			}
			set
			{
				if ((this._DataFile_id != value))
				{
					this._DataFile_id = value;
				}
			}
		}
		
		[Column(Storage="_ClientName", DbType="VarChar(100)")]
		public string ClientName
		{
			get
			{
				return this._ClientName;
			}
			set
			{
				if ((this._ClientName != value))
				{
					this._ClientName = value;
				}
			}
		}
		
		[Column(Storage="_Client_ID", DbType="Int")]
		public System.Nullable<int> Client_ID
		{
			get
			{
				return this._Client_ID;
			}
			set
			{
				if ((this._Client_ID != value))
				{
					this._Client_ID = value;
				}
			}
		}
		
		[Column(Storage="_Study_ID", DbType="Int")]
		public System.Nullable<int> Study_ID
		{
			get
			{
				return this._Study_ID;
			}
			set
			{
				if ((this._Study_ID != value))
				{
					this._Study_ID = value;
				}
			}
		}
		
		[Column(Storage="_Survey_ID", DbType="Int")]
		public System.Nullable<int> Survey_ID
		{
			get
			{
				return this._Survey_ID;
			}
			set
			{
				if ((this._Survey_ID != value))
				{
					this._Survey_ID = value;
				}
			}
		}
		
		[Column(Storage="_FileType_id", DbType="Int")]
		public System.Nullable<int> FileType_id
		{
			get
			{
				return this._FileType_id;
			}
			set
			{
				if ((this._FileType_id != value))
				{
					this._FileType_id = value;
				}
			}
		}
		
		[Column(Storage="_PervasiveMapName", DbType="VarChar(255)")]
		public string PervasiveMapName
		{
			get
			{
				return this._PervasiveMapName;
			}
			set
			{
				if ((this._PervasiveMapName != value))
				{
					this._PervasiveMapName = value;
				}
			}
		}
		
		[Column(Storage="_DataFileLocation", DbType="VarChar(200)")]
		public string DataFileLocation
		{
			get
			{
				return this._DataFileLocation;
			}
			set
			{
				if ((this._DataFileLocation != value))
				{
					this._DataFileLocation = value;
				}
			}
		}
		
		[Column(Storage="_DataFileName", DbType="VarChar(42)")]
		public string DataFileName
		{
			get
			{
				return this._DataFileName;
			}
			set
			{
				if ((this._DataFileName != value))
				{
					this._DataFileName = value;
				}
			}
		}
		
		[Column(Storage="_DataFileSize", DbType="Int")]
		public System.Nullable<int> DataFileSize
		{
			get
			{
				return this._DataFileSize;
			}
			set
			{
				if ((this._DataFileSize != value))
				{
					this._DataFileSize = value;
				}
			}
		}
		
		[Column(Storage="_DataFileRecords", DbType="Int")]
		public System.Nullable<int> DataFileRecords
		{
			get
			{
				return this._DataFileRecords;
			}
			set
			{
				if ((this._DataFileRecords != value))
				{
					this._DataFileRecords = value;
				}
			}
		}
		
		[Column(Name="intLoaded", Storage="_IntLoaded", DbType="Int")]
		public System.Nullable<int> IntLoaded
		{
			get
			{
				return this._IntLoaded;
			}
			set
			{
				if ((this._IntLoaded != value))
				{
					this._IntLoaded = value;
				}
			}
		}
		
		[Column(Name="datReceived", Storage="_DatReceived", DbType="DateTime")]
		public System.Nullable<System.DateTime> DatReceived
		{
			get
			{
				return this._DatReceived;
			}
			set
			{
				if ((this._DatReceived != value))
				{
					this._DatReceived = value;
				}
			}
		}
		
		[Column(Name="datBegin", Storage="_DatBegin", DbType="DateTime")]
		public System.Nullable<System.DateTime> DatBegin
		{
			get
			{
				return this._DatBegin;
			}
			set
			{
				if ((this._DatBegin != value))
				{
					this._DatBegin = value;
				}
			}
		}
		
		[Column(Name="datEnd", Storage="_DatEnd", DbType="DateTime")]
		public System.Nullable<System.DateTime> DatEnd
		{
			get
			{
				return this._DatEnd;
			}
			set
			{
				if ((this._DatEnd != value))
				{
					this._DatEnd = value;
				}
			}
		}
		
		[Column(Storage="_DatApplied", DbType="DateTime")]
		public System.Nullable<System.DateTime> DatApplied
		{
			get
			{
				return this._DatApplied;
			}
			set
			{
				if ((this._DatApplied != value))
				{
					this._DatApplied = value;
				}
			}
		}
		
		[Column(Name="datMinDate", Storage="_DatMinDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> DatMinDate
		{
			get
			{
				return this._DatMinDate;
			}
			set
			{
				if ((this._DatMinDate != value))
				{
					this._DatMinDate = value;
				}
			}
		}
		
		[Column(Name="datMaxDate", Storage="_DatMaxDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> DatMaxDate
		{
			get
			{
				return this._DatMaxDate;
			}
			set
			{
				if ((this._DatMaxDate != value))
				{
					this._DatMaxDate = value;
				}
			}
		}
		
		[Column(Name="datDeleted", Storage="_DatDeleted", DbType="DateTime")]
		public System.Nullable<System.DateTime> DatDeleted
		{
			get
			{
				return this._DatDeleted;
			}
			set
			{
				if ((this._DatDeleted != value))
				{
					this._DatDeleted = value;
				}
			}
		}
		
		[Column(Storage="_DataSet_id", DbType="Int")]
		public System.Nullable<int> DataSet_id
		{
			get
			{
				return this._DataSet_id;
			}
			set
			{
				if ((this._DataSet_id != value))
				{
					this._DataSet_id = value;
				}
			}
		}
		
		[Column(Storage="_AssocDataFiles", DbType="VarChar(100)")]
		public string AssocDataFiles
		{
			get
			{
				return this._AssocDataFiles;
			}
			set
			{
				if ((this._AssocDataFiles != value))
				{
					this._AssocDataFiles = value;
				}
			}
		}
		
		[Column(Storage="_DataFileState_id", DbType="Int")]
		public System.Nullable<int> DataFileState_id
		{
			get
			{
				return this._DataFileState_id;
			}
			set
			{
				if ((this._DataFileState_id != value))
				{
					this._DataFileState_id = value;
				}
			}
		}
		
		[Column(Storage="_DataFileStateParam", DbType="VarChar(2000)")]
		public string DataFileStateParam
		{
			get
			{
				return this._DataFileStateParam;
			}
			set
			{
				if ((this._DataFileStateParam != value))
				{
					this._DataFileStateParam = value;
				}
			}
		}
	}
	
	[Table(Name="dbo.UploadFile")]
	public partial class UploadFile : NRC.Picker.Depricated.OCSHHCAHPS.ImportProcessor.DAL.EntityBase, INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _UploadFile_id;
		
		private string _OrigFile_Nm;
		
		private string _File_Nm;
		
		private int _FileSize;
		
		private System.Nullable<int> _UploadAction_id;
		
		private EntityRef<UploadActions> _UploadActions;
		
		private EntitySet<UploadFileState> _UploadFileState;
		
		private EntitySet<UploadFileNotes> _UploadFileNotes;
		
		private EntitySet<UploadFileState_History> _UploadFileState_History;
		
		private EntitySet<UploadFilesToDataFiles> _UploadFilesToDataFiles;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnUploadFile_idChanging(int value);
    partial void OnUploadFile_idChanged();
    partial void OnOrigFile_NmChanging(string value);
    partial void OnOrigFile_NmChanged();
    partial void OnFile_NmChanging(string value);
    partial void OnFile_NmChanged();
    partial void OnFileSizeChanging(int value);
    partial void OnFileSizeChanged();
    partial void OnUploadAction_idChanging(System.Nullable<int> value);
    partial void OnUploadAction_idChanged();
    #endregion
		
		public UploadFile()
		{
			this._UploadActions = default(EntityRef<UploadActions>);
			this._UploadFileState = new EntitySet<UploadFileState>(new Action<UploadFileState>(this.attach_UploadFileState), new Action<UploadFileState>(this.detach_UploadFileState));
			this._UploadFileNotes = new EntitySet<UploadFileNotes>(new Action<UploadFileNotes>(this.attach_UploadFileNotes), new Action<UploadFileNotes>(this.detach_UploadFileNotes));
			this._UploadFileState_History = new EntitySet<UploadFileState_History>(new Action<UploadFileState_History>(this.attach_UploadFileState_History), new Action<UploadFileState_History>(this.detach_UploadFileState_History));
			this._UploadFilesToDataFiles = new EntitySet<UploadFilesToDataFiles>(new Action<UploadFilesToDataFiles>(this.attach_UploadFilesToDataFiles), new Action<UploadFilesToDataFiles>(this.detach_UploadFilesToDataFiles));
			OnCreated();
		}
		
		[Column(Storage="_UploadFile_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int UploadFile_id
		{
			get
			{
				return this._UploadFile_id;
			}
			set
			{
				if ((this._UploadFile_id != value))
				{
					this.OnUploadFile_idChanging(value);
					this.SendPropertyChanging();
					this._UploadFile_id = value;
					this.SendPropertyChanged("UploadFile_id");
					this.OnUploadFile_idChanged();
				}
			}
		}
		
		[Column(Storage="_OrigFile_Nm", DbType="VarChar(255) NOT NULL", CanBeNull=false)]
		public string OrigFile_Nm
		{
			get
			{
				return this._OrigFile_Nm;
			}
			set
			{
				if ((this._OrigFile_Nm != value))
				{
					this.OnOrigFile_NmChanging(value);
					this.SendPropertyChanging();
					this._OrigFile_Nm = value;
					this.SendPropertyChanged("OrigFile_Nm");
					this.OnOrigFile_NmChanged();
				}
			}
		}
		
		[Column(Storage="_File_Nm", DbType="VarChar(255) NOT NULL", CanBeNull=false)]
		public string File_Nm
		{
			get
			{
				return this._File_Nm;
			}
			set
			{
				if ((this._File_Nm != value))
				{
					this.OnFile_NmChanging(value);
					this.SendPropertyChanging();
					this._File_Nm = value;
					this.SendPropertyChanged("File_Nm");
					this.OnFile_NmChanged();
				}
			}
		}
		
		[Column(Storage="_FileSize", DbType="Int NOT NULL")]
		public int FileSize
		{
			get
			{
				return this._FileSize;
			}
			set
			{
				if ((this._FileSize != value))
				{
					this.OnFileSizeChanging(value);
					this.SendPropertyChanging();
					this._FileSize = value;
					this.SendPropertyChanged("FileSize");
					this.OnFileSizeChanged();
				}
			}
		}
		
		[Column(Storage="_UploadAction_id", DbType="Int")]
		public System.Nullable<int> UploadAction_id
		{
			get
			{
				return this._UploadAction_id;
			}
			set
			{
				if ((this._UploadAction_id != value))
				{
					if (this._UploadActions.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUploadAction_idChanging(value);
					this.SendPropertyChanging();
					this._UploadAction_id = value;
					this.SendPropertyChanged("UploadAction_id");
					this.OnUploadAction_idChanged();
				}
			}
		}
		
		[Association(Name="FK__UploadFil__Uploa__33D4B598", Storage="_UploadActions", ThisKey="UploadAction_id", IsForeignKey=true)]
		public UploadActions UploadActions
		{
			get
			{
				return this._UploadActions.Entity;
			}
			set
			{
				UploadActions previousValue = this._UploadActions.Entity;
				if (((previousValue != value) 
							|| (this._UploadActions.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._UploadActions.Entity = null;
						previousValue.UploadFile.Remove(this);
					}
					this._UploadActions.Entity = value;
					if ((value != null))
					{
						value.UploadFile.Add(this);
						this._UploadAction_id = value.UploadAction_id;
					}
					else
					{
						this._UploadAction_id = default(Nullable<int>);
					}
					this.SendPropertyChanged("UploadActions");
				}
			}
		}
		
		[Association(Name="FK__UploadFil__Uploa__37A5467C", Storage="_UploadFileState", OtherKey="UploadFile_id", DeleteRule="NO ACTION")]
		public EntitySet<UploadFileState> UploadFileState
		{
			get
			{
				return this._UploadFileState;
			}
			set
			{
				this._UploadFileState.Assign(value);
			}
		}
		
		[Association(Name="FK__UploadFil__Uploa__5629CD9C", Storage="_UploadFileNotes", OtherKey="UploadFile_id", DeleteRule="NO ACTION")]
		public EntitySet<UploadFileNotes> UploadFileNotes
		{
			get
			{
				return this._UploadFileNotes;
			}
			set
			{
				this._UploadFileNotes.Assign(value);
			}
		}
		
		[Association(Name="FK__UploadFil__Uploa__6D0D32F4", Storage="_UploadFileState_History", OtherKey="UploadFile_id", DeleteRule="NO ACTION")]
		public EntitySet<UploadFileState_History> UploadFileState_History
		{
			get
			{
				return this._UploadFileState_History;
			}
			set
			{
				this._UploadFileState_History.Assign(value);
			}
		}
		
		[Association(Name="FK__UploadFil__Uploa__6EF57B66", Storage="_UploadFilesToDataFiles", OtherKey="UploadFile_id", DeleteRule="NO ACTION")]
		public EntitySet<UploadFilesToDataFiles> UploadFilesToDataFiles
		{
			get
			{
				return this._UploadFilesToDataFiles;
			}
			set
			{
				this._UploadFilesToDataFiles.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_UploadFileState(UploadFileState entity)
		{
			this.SendPropertyChanging();
			entity.UploadFile = this;
		}
		
		private void detach_UploadFileState(UploadFileState entity)
		{
			this.SendPropertyChanging();
			entity.UploadFile = null;
		}
		
		private void attach_UploadFileNotes(UploadFileNotes entity)
		{
			this.SendPropertyChanging();
			entity.UploadFile = this;
		}
		
		private void detach_UploadFileNotes(UploadFileNotes entity)
		{
			this.SendPropertyChanging();
			entity.UploadFile = null;
		}
		
		private void attach_UploadFileState_History(UploadFileState_History entity)
		{
			this.SendPropertyChanging();
			entity.UploadFile = this;
		}
		
		private void detach_UploadFileState_History(UploadFileState_History entity)
		{
			this.SendPropertyChanging();
			entity.UploadFile = null;
		}
		
		private void attach_UploadFilesToDataFiles(UploadFilesToDataFiles entity)
		{
			this.SendPropertyChanging();
			entity.UploadFile = this;
		}
		
		private void detach_UploadFilesToDataFiles(UploadFilesToDataFiles entity)
		{
			this.SendPropertyChanging();
			entity.UploadFile = null;
		}
	}
	
	[Table(Name="dbo.UploadFileNotes")]
	public partial class UploadFileNotes : NRC.Picker.Depricated.OCSHHCAHPS.ImportProcessor.DAL.EntityBase, INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Note_id;
		
		private System.Nullable<int> _UploadFile_id;
		
		private System.DateTime _DatCreated;
		
		private string _Username;
		
		private string _Note;
		
		private EntityRef<UploadFile> _UploadFile;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnNote_idChanging(int value);
    partial void OnNote_idChanged();
    partial void OnUploadFile_idChanging(System.Nullable<int> value);
    partial void OnUploadFile_idChanged();
    partial void OnDatCreatedChanging(System.DateTime value);
    partial void OnDatCreatedChanged();
    partial void OnUsernameChanging(string value);
    partial void OnUsernameChanged();
    partial void OnNoteChanging(string value);
    partial void OnNoteChanged();
    #endregion
		
		public UploadFileNotes()
		{
			this._UploadFile = default(EntityRef<UploadFile>);
			OnCreated();
		}
		
		[Column(Storage="_Note_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Note_id
		{
			get
			{
				return this._Note_id;
			}
			set
			{
				if ((this._Note_id != value))
				{
					this.OnNote_idChanging(value);
					this.SendPropertyChanging();
					this._Note_id = value;
					this.SendPropertyChanged("Note_id");
					this.OnNote_idChanged();
				}
			}
		}
		
		[Column(Storage="_UploadFile_id", DbType="Int")]
		public System.Nullable<int> UploadFile_id
		{
			get
			{
				return this._UploadFile_id;
			}
			set
			{
				if ((this._UploadFile_id != value))
				{
					if (this._UploadFile.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUploadFile_idChanging(value);
					this.SendPropertyChanging();
					this._UploadFile_id = value;
					this.SendPropertyChanged("UploadFile_id");
					this.OnUploadFile_idChanged();
				}
			}
		}
		
		[Column(Name="datCreated", Storage="_DatCreated", DbType="DateTime NOT NULL")]
		public System.DateTime DatCreated
		{
			get
			{
				return this._DatCreated;
			}
			set
			{
				if ((this._DatCreated != value))
				{
					this.OnDatCreatedChanging(value);
					this.SendPropertyChanging();
					this._DatCreated = value;
					this.SendPropertyChanged("DatCreated");
					this.OnDatCreatedChanged();
				}
			}
		}
		
		[Column(Storage="_Username", DbType="VarChar(100) NOT NULL", CanBeNull=false)]
		public string Username
		{
			get
			{
				return this._Username;
			}
			set
			{
				if ((this._Username != value))
				{
					this.OnUsernameChanging(value);
					this.SendPropertyChanging();
					this._Username = value;
					this.SendPropertyChanged("Username");
					this.OnUsernameChanged();
				}
			}
		}
		
		[Column(Storage="_Note", DbType="VarChar(7000) NOT NULL", CanBeNull=false)]
		public string Note
		{
			get
			{
				return this._Note;
			}
			set
			{
				if ((this._Note != value))
				{
					this.OnNoteChanging(value);
					this.SendPropertyChanging();
					this._Note = value;
					this.SendPropertyChanged("Note");
					this.OnNoteChanged();
				}
			}
		}
		
		[Association(Name="FK__UploadFil__Uploa__5629CD9C", Storage="_UploadFile", ThisKey="UploadFile_id", IsForeignKey=true)]
		public UploadFile UploadFile
		{
			get
			{
				return this._UploadFile.Entity;
			}
			set
			{
				UploadFile previousValue = this._UploadFile.Entity;
				if (((previousValue != value) 
							|| (this._UploadFile.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._UploadFile.Entity = null;
						previousValue.UploadFileNotes.Remove(this);
					}
					this._UploadFile.Entity = value;
					if ((value != null))
					{
						value.UploadFileNotes.Add(this);
						this._UploadFile_id = value.UploadFile_id;
					}
					else
					{
						this._UploadFile_id = default(Nullable<int>);
					}
					this.SendPropertyChanged("UploadFile");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.UploadFileState")]
	public partial class UploadFileState : NRC.Picker.Depricated.OCSHHCAHPS.ImportProcessor.DAL.EntityBase, INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _UploadFileState_id;
		
		private System.Nullable<int> _UploadFile_id;
		
		private System.Nullable<int> _UploadState_id;
		
		private System.DateTime _DatOccurred;
		
		private string _StateParameter;
		
		private EntityRef<UploadStates> _UploadStates;
		
		private EntityRef<UploadFile> _UploadFile;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnUploadFileState_idChanging(int value);
    partial void OnUploadFileState_idChanged();
    partial void OnUploadFile_idChanging(System.Nullable<int> value);
    partial void OnUploadFile_idChanged();
    partial void OnUploadState_idChanging(System.Nullable<int> value);
    partial void OnUploadState_idChanged();
    partial void OnDatOccurredChanging(System.DateTime value);
    partial void OnDatOccurredChanged();
    partial void OnStateParameterChanging(string value);
    partial void OnStateParameterChanged();
    #endregion
		
		public UploadFileState()
		{
			this._UploadStates = default(EntityRef<UploadStates>);
			this._UploadFile = default(EntityRef<UploadFile>);
			OnCreated();
		}
		
		[Column(Storage="_UploadFileState_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int UploadFileState_id
		{
			get
			{
				return this._UploadFileState_id;
			}
			set
			{
				if ((this._UploadFileState_id != value))
				{
					this.OnUploadFileState_idChanging(value);
					this.SendPropertyChanging();
					this._UploadFileState_id = value;
					this.SendPropertyChanged("UploadFileState_id");
					this.OnUploadFileState_idChanged();
				}
			}
		}
		
		[Column(Storage="_UploadFile_id", DbType="Int")]
		public System.Nullable<int> UploadFile_id
		{
			get
			{
				return this._UploadFile_id;
			}
			set
			{
				if ((this._UploadFile_id != value))
				{
					if (this._UploadFile.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUploadFile_idChanging(value);
					this.SendPropertyChanging();
					this._UploadFile_id = value;
					this.SendPropertyChanged("UploadFile_id");
					this.OnUploadFile_idChanged();
				}
			}
		}
		
		[Column(Storage="_UploadState_id", DbType="Int")]
		public System.Nullable<int> UploadState_id
		{
			get
			{
				return this._UploadState_id;
			}
			set
			{
				if ((this._UploadState_id != value))
				{
					if (this._UploadStates.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUploadState_idChanging(value);
					this.SendPropertyChanging();
					this._UploadState_id = value;
					this.SendPropertyChanged("UploadState_id");
					this.OnUploadState_idChanged();
				}
			}
		}
		
		[Column(Name="datOccurred", Storage="_DatOccurred", DbType="DateTime NOT NULL")]
		public System.DateTime DatOccurred
		{
			get
			{
				return this._DatOccurred;
			}
			set
			{
				if ((this._DatOccurred != value))
				{
					this.OnDatOccurredChanging(value);
					this.SendPropertyChanging();
					this._DatOccurred = value;
					this.SendPropertyChanged("DatOccurred");
					this.OnDatOccurredChanged();
				}
			}
		}
		
		[Column(Storage="_StateParameter", DbType="VarChar(8000)")]
		public string StateParameter
		{
			get
			{
				return this._StateParameter;
			}
			set
			{
				if ((this._StateParameter != value))
				{
					this.OnStateParameterChanging(value);
					this.SendPropertyChanging();
					this._StateParameter = value;
					this.SendPropertyChanged("StateParameter");
					this.OnStateParameterChanged();
				}
			}
		}
		
		[Association(Name="FK__UploadFil__Uploa__36B12243", Storage="_UploadStates", ThisKey="UploadState_id", IsForeignKey=true)]
		public UploadStates UploadStates
		{
			get
			{
				return this._UploadStates.Entity;
			}
			set
			{
				UploadStates previousValue = this._UploadStates.Entity;
				if (((previousValue != value) 
							|| (this._UploadStates.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._UploadStates.Entity = null;
						previousValue.UploadFileState.Remove(this);
					}
					this._UploadStates.Entity = value;
					if ((value != null))
					{
						value.UploadFileState.Add(this);
						this._UploadState_id = value.UploadState_id;
					}
					else
					{
						this._UploadState_id = default(Nullable<int>);
					}
					this.SendPropertyChanged("UploadStates");
				}
			}
		}
		
		[Association(Name="FK__UploadFil__Uploa__37A5467C", Storage="_UploadFile", ThisKey="UploadFile_id", IsForeignKey=true)]
		public UploadFile UploadFile
		{
			get
			{
				return this._UploadFile.Entity;
			}
			set
			{
				UploadFile previousValue = this._UploadFile.Entity;
				if (((previousValue != value) 
							|| (this._UploadFile.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._UploadFile.Entity = null;
						previousValue.UploadFileState.Remove(this);
					}
					this._UploadFile.Entity = value;
					if ((value != null))
					{
						value.UploadFileState.Add(this);
						this._UploadFile_id = value.UploadFile_id;
					}
					else
					{
						this._UploadFile_id = default(Nullable<int>);
					}
					this.SendPropertyChanged("UploadFile");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.UploadFileState_History")]
	public partial class UploadFileState_History : NRC.Picker.Depricated.OCSHHCAHPS.ImportProcessor.DAL.EntityBase, INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _UploadFileState_id;
		
		private System.Nullable<int> _UploadFile_id;
		
		private System.Nullable<int> _UploadState_id;
		
		private System.DateTime _DatOccurred;
		
		private string _StateParameter;
		
		private EntityRef<UploadStates> _UploadStates;
		
		private EntityRef<UploadFile> _UploadFile;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnUploadFileState_idChanging(int value);
    partial void OnUploadFileState_idChanged();
    partial void OnUploadFile_idChanging(System.Nullable<int> value);
    partial void OnUploadFile_idChanged();
    partial void OnUploadState_idChanging(System.Nullable<int> value);
    partial void OnUploadState_idChanged();
    partial void OnDatOccurredChanging(System.DateTime value);
    partial void OnDatOccurredChanged();
    partial void OnStateParameterChanging(string value);
    partial void OnStateParameterChanged();
    #endregion
		
		public UploadFileState_History()
		{
			this._UploadStates = default(EntityRef<UploadStates>);
			this._UploadFile = default(EntityRef<UploadFile>);
			OnCreated();
		}
		
		[Column(Storage="_UploadFileState_id", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int UploadFileState_id
		{
			get
			{
				return this._UploadFileState_id;
			}
			set
			{
				if ((this._UploadFileState_id != value))
				{
					this.OnUploadFileState_idChanging(value);
					this.SendPropertyChanging();
					this._UploadFileState_id = value;
					this.SendPropertyChanged("UploadFileState_id");
					this.OnUploadFileState_idChanged();
				}
			}
		}
		
		[Column(Storage="_UploadFile_id", DbType="Int")]
		public System.Nullable<int> UploadFile_id
		{
			get
			{
				return this._UploadFile_id;
			}
			set
			{
				if ((this._UploadFile_id != value))
				{
					if (this._UploadFile.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUploadFile_idChanging(value);
					this.SendPropertyChanging();
					this._UploadFile_id = value;
					this.SendPropertyChanged("UploadFile_id");
					this.OnUploadFile_idChanged();
				}
			}
		}
		
		[Column(Storage="_UploadState_id", DbType="Int")]
		public System.Nullable<int> UploadState_id
		{
			get
			{
				return this._UploadState_id;
			}
			set
			{
				if ((this._UploadState_id != value))
				{
					if (this._UploadStates.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUploadState_idChanging(value);
					this.SendPropertyChanging();
					this._UploadState_id = value;
					this.SendPropertyChanged("UploadState_id");
					this.OnUploadState_idChanged();
				}
			}
		}
		
		[Column(Name="datOccurred", Storage="_DatOccurred", DbType="DateTime NOT NULL", IsPrimaryKey=true)]
		public System.DateTime DatOccurred
		{
			get
			{
				return this._DatOccurred;
			}
			set
			{
				if ((this._DatOccurred != value))
				{
					this.OnDatOccurredChanging(value);
					this.SendPropertyChanging();
					this._DatOccurred = value;
					this.SendPropertyChanged("DatOccurred");
					this.OnDatOccurredChanged();
				}
			}
		}
		
		[Column(Storage="_StateParameter", DbType="VarChar(2000)")]
		public string StateParameter
		{
			get
			{
				return this._StateParameter;
			}
			set
			{
				if ((this._StateParameter != value))
				{
					this.OnStateParameterChanging(value);
					this.SendPropertyChanging();
					this._StateParameter = value;
					this.SendPropertyChanged("StateParameter");
					this.OnStateParameterChanged();
				}
			}
		}
		
		[Association(Name="FK__UploadFil__Uploa__6C190EBB", Storage="_UploadStates", ThisKey="UploadState_id", IsForeignKey=true)]
		public UploadStates UploadStates
		{
			get
			{
				return this._UploadStates.Entity;
			}
			set
			{
				UploadStates previousValue = this._UploadStates.Entity;
				if (((previousValue != value) 
							|| (this._UploadStates.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._UploadStates.Entity = null;
						previousValue.UploadFileState_History.Remove(this);
					}
					this._UploadStates.Entity = value;
					if ((value != null))
					{
						value.UploadFileState_History.Add(this);
						this._UploadState_id = value.UploadState_id;
					}
					else
					{
						this._UploadState_id = default(Nullable<int>);
					}
					this.SendPropertyChanged("UploadStates");
				}
			}
		}
		
		[Association(Name="FK__UploadFil__Uploa__6D0D32F4", Storage="_UploadFile", ThisKey="UploadFile_id", IsForeignKey=true)]
		public UploadFile UploadFile
		{
			get
			{
				return this._UploadFile.Entity;
			}
			set
			{
				UploadFile previousValue = this._UploadFile.Entity;
				if (((previousValue != value) 
							|| (this._UploadFile.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._UploadFile.Entity = null;
						previousValue.UploadFileState_History.Remove(this);
					}
					this._UploadFile.Entity = value;
					if ((value != null))
					{
						value.UploadFileState_History.Add(this);
						this._UploadFile_id = value.UploadFile_id;
					}
					else
					{
						this._UploadFile_id = default(Nullable<int>);
					}
					this.SendPropertyChanged("UploadFile");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.UploadFilesToDataFiles")]
	public partial class UploadFilesToDataFiles : NRC.Picker.Depricated.OCSHHCAHPS.ImportProcessor.DAL.EntityBase, INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _UploadFileDataFileID;
		
		private System.Nullable<int> _UploadFile_id;
		
		private System.Nullable<int> _DataFile_id;
		
		private EntityRef<DataFile> _DataFile;
		
		private EntityRef<UploadFile> _UploadFile;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnUploadFileDataFileIDChanging(int value);
    partial void OnUploadFileDataFileIDChanged();
    partial void OnUploadFile_idChanging(System.Nullable<int> value);
    partial void OnUploadFile_idChanged();
    partial void OnDataFile_idChanging(System.Nullable<int> value);
    partial void OnDataFile_idChanged();
    #endregion
		
		public UploadFilesToDataFiles()
		{
			this._DataFile = default(EntityRef<DataFile>);
			this._UploadFile = default(EntityRef<UploadFile>);
			OnCreated();
		}
		
		[Column(Storage="_UploadFileDataFileID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int UploadFileDataFileID
		{
			get
			{
				return this._UploadFileDataFileID;
			}
			set
			{
				if ((this._UploadFileDataFileID != value))
				{
					this.OnUploadFileDataFileIDChanging(value);
					this.SendPropertyChanging();
					this._UploadFileDataFileID = value;
					this.SendPropertyChanged("UploadFileDataFileID");
					this.OnUploadFileDataFileIDChanged();
				}
			}
		}
		
		[Column(Storage="_UploadFile_id", DbType="Int")]
		public System.Nullable<int> UploadFile_id
		{
			get
			{
				return this._UploadFile_id;
			}
			set
			{
				if ((this._UploadFile_id != value))
				{
					if (this._UploadFile.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUploadFile_idChanging(value);
					this.SendPropertyChanging();
					this._UploadFile_id = value;
					this.SendPropertyChanged("UploadFile_id");
					this.OnUploadFile_idChanged();
				}
			}
		}
		
		[Column(Storage="_DataFile_id", DbType="Int")]
		public System.Nullable<int> DataFile_id
		{
			get
			{
				return this._DataFile_id;
			}
			set
			{
				if ((this._DataFile_id != value))
				{
					if (this._DataFile.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnDataFile_idChanging(value);
					this.SendPropertyChanging();
					this._DataFile_id = value;
					this.SendPropertyChanged("DataFile_id");
					this.OnDataFile_idChanged();
				}
			}
		}
		
		[Association(Name="FK__UploadFil__DataF__4E88ABD4", Storage="_DataFile", ThisKey="DataFile_id", IsForeignKey=true)]
		public DataFile DataFile
		{
			get
			{
				return this._DataFile.Entity;
			}
			set
			{
				DataFile previousValue = this._DataFile.Entity;
				if (((previousValue != value) 
							|| (this._DataFile.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._DataFile.Entity = null;
						previousValue.UploadFilesToDataFiles.Remove(this);
					}
					this._DataFile.Entity = value;
					if ((value != null))
					{
						value.UploadFilesToDataFiles.Add(this);
						this._DataFile_id = value.DataFile_id;
					}
					else
					{
						this._DataFile_id = default(Nullable<int>);
					}
					this.SendPropertyChanged("DataFile");
				}
			}
		}
		
		[Association(Name="FK__UploadFil__Uploa__6EF57B66", Storage="_UploadFile", ThisKey="UploadFile_id", IsForeignKey=true)]
		public UploadFile UploadFile
		{
			get
			{
				return this._UploadFile.Entity;
			}
			set
			{
				UploadFile previousValue = this._UploadFile.Entity;
				if (((previousValue != value) 
							|| (this._UploadFile.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._UploadFile.Entity = null;
						previousValue.UploadFilesToDataFiles.Remove(this);
					}
					this._UploadFile.Entity = value;
					if ((value != null))
					{
						value.UploadFilesToDataFiles.Add(this);
						this._UploadFile_id = value.UploadFile_id;
					}
					else
					{
						this._UploadFile_id = default(Nullable<int>);
					}
					this.SendPropertyChanged("UploadFile");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.UploadStates")]
	public partial class UploadStates : NRC.Picker.Depricated.OCSHHCAHPS.ImportProcessor.DAL.EntityBase, INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _UploadState_id;
		
		private string _UploadState_Nm;
		
		private EntitySet<UploadFileState> _UploadFileState;
		
		private EntitySet<UploadFileState_History> _UploadFileState_History;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnUploadState_idChanging(int value);
    partial void OnUploadState_idChanged();
    partial void OnUploadState_NmChanging(string value);
    partial void OnUploadState_NmChanged();
    #endregion
		
		public UploadStates()
		{
			this._UploadFileState = new EntitySet<UploadFileState>(new Action<UploadFileState>(this.attach_UploadFileState), new Action<UploadFileState>(this.detach_UploadFileState));
			this._UploadFileState_History = new EntitySet<UploadFileState_History>(new Action<UploadFileState_History>(this.attach_UploadFileState_History), new Action<UploadFileState_History>(this.detach_UploadFileState_History));
			OnCreated();
		}
		
		[Column(Storage="_UploadState_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int UploadState_id
		{
			get
			{
				return this._UploadState_id;
			}
			set
			{
				if ((this._UploadState_id != value))
				{
					this.OnUploadState_idChanging(value);
					this.SendPropertyChanging();
					this._UploadState_id = value;
					this.SendPropertyChanged("UploadState_id");
					this.OnUploadState_idChanged();
				}
			}
		}
		
		[Column(Storage="_UploadState_Nm", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string UploadState_Nm
		{
			get
			{
				return this._UploadState_Nm;
			}
			set
			{
				if ((this._UploadState_Nm != value))
				{
					this.OnUploadState_NmChanging(value);
					this.SendPropertyChanging();
					this._UploadState_Nm = value;
					this.SendPropertyChanged("UploadState_Nm");
					this.OnUploadState_NmChanged();
				}
			}
		}
		
		[Association(Name="FK__UploadFil__Uploa__36B12243", Storage="_UploadFileState", OtherKey="UploadState_id", DeleteRule="NO ACTION")]
		public EntitySet<UploadFileState> UploadFileState
		{
			get
			{
				return this._UploadFileState;
			}
			set
			{
				this._UploadFileState.Assign(value);
			}
		}
		
		[Association(Name="FK__UploadFil__Uploa__6C190EBB", Storage="_UploadFileState_History", OtherKey="UploadState_id", DeleteRule="NO ACTION")]
		public EntitySet<UploadFileState_History> UploadFileState_History
		{
			get
			{
				return this._UploadFileState_History;
			}
			set
			{
				this._UploadFileState_History.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_UploadFileState(UploadFileState entity)
		{
			this.SendPropertyChanging();
			entity.UploadStates = this;
		}
		
		private void detach_UploadFileState(UploadFileState entity)
		{
			this.SendPropertyChanging();
			entity.UploadStates = null;
		}
		
		private void attach_UploadFileState_History(UploadFileState_History entity)
		{
			this.SendPropertyChanging();
			entity.UploadStates = this;
		}
		
		private void detach_UploadFileState_History(UploadFileState_History entity)
		{
			this.SendPropertyChanging();
			entity.UploadStates = null;
		}
	}
	
	[Table(Name="dbo.Validation_Counts")]
	public partial class Validation_Counts : NRC.Picker.Depricated.OCSHHCAHPS.ImportProcessor.DAL.EntityBase, INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _VR_NULLCounts_id;
		
		private int _DataFile_id;
		
		private System.Nullable<int> _Table_id;
		
		private string _StrTable_nm;
		
		private System.Nullable<int> _Field_id;
		
		private string _StrField_nm;
		
		private int _Occurrences;
		
		private System.Nullable<int> _Threshold;
		
		private string _CheckForValue;
		
		private System.Nullable<double> _PctOfTotalNull;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnVR_NULLCounts_idChanging(int value);
    partial void OnVR_NULLCounts_idChanged();
    partial void OnDataFile_idChanging(int value);
    partial void OnDataFile_idChanged();
    partial void OnTable_idChanging(System.Nullable<int> value);
    partial void OnTable_idChanged();
    partial void OnStrTable_nmChanging(string value);
    partial void OnStrTable_nmChanged();
    partial void OnField_idChanging(System.Nullable<int> value);
    partial void OnField_idChanged();
    partial void OnStrField_nmChanging(string value);
    partial void OnStrField_nmChanged();
    partial void OnOccurrencesChanging(int value);
    partial void OnOccurrencesChanged();
    partial void OnThresholdChanging(System.Nullable<int> value);
    partial void OnThresholdChanged();
    partial void OnCheckForValueChanging(string value);
    partial void OnCheckForValueChanged();
    partial void OnPctOfTotalNullChanging(System.Nullable<double> value);
    partial void OnPctOfTotalNullChanged();
    #endregion
		
		public Validation_Counts()
		{
			OnCreated();
		}
		
		[Column(Storage="_VR_NULLCounts_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int VR_NULLCounts_id
		{
			get
			{
				return this._VR_NULLCounts_id;
			}
			set
			{
				if ((this._VR_NULLCounts_id != value))
				{
					this.OnVR_NULLCounts_idChanging(value);
					this.SendPropertyChanging();
					this._VR_NULLCounts_id = value;
					this.SendPropertyChanged("VR_NULLCounts_id");
					this.OnVR_NULLCounts_idChanged();
				}
			}
		}
		
		[Column(Storage="_DataFile_id", DbType="Int NOT NULL")]
		public int DataFile_id
		{
			get
			{
				return this._DataFile_id;
			}
			set
			{
				if ((this._DataFile_id != value))
				{
					this.OnDataFile_idChanging(value);
					this.SendPropertyChanging();
					this._DataFile_id = value;
					this.SendPropertyChanged("DataFile_id");
					this.OnDataFile_idChanged();
				}
			}
		}
		
		[Column(Storage="_Table_id", DbType="Int")]
		public System.Nullable<int> Table_id
		{
			get
			{
				return this._Table_id;
			}
			set
			{
				if ((this._Table_id != value))
				{
					this.OnTable_idChanging(value);
					this.SendPropertyChanging();
					this._Table_id = value;
					this.SendPropertyChanged("Table_id");
					this.OnTable_idChanged();
				}
			}
		}
		
		[Column(Name="strTable_nm", Storage="_StrTable_nm", DbType="VarChar(42) NOT NULL", CanBeNull=false)]
		public string StrTable_nm
		{
			get
			{
				return this._StrTable_nm;
			}
			set
			{
				if ((this._StrTable_nm != value))
				{
					this.OnStrTable_nmChanging(value);
					this.SendPropertyChanging();
					this._StrTable_nm = value;
					this.SendPropertyChanged("StrTable_nm");
					this.OnStrTable_nmChanged();
				}
			}
		}
		
		[Column(Storage="_Field_id", DbType="Int")]
		public System.Nullable<int> Field_id
		{
			get
			{
				return this._Field_id;
			}
			set
			{
				if ((this._Field_id != value))
				{
					this.OnField_idChanging(value);
					this.SendPropertyChanging();
					this._Field_id = value;
					this.SendPropertyChanged("Field_id");
					this.OnField_idChanged();
				}
			}
		}
		
		[Column(Name="strField_nm", Storage="_StrField_nm", DbType="VarChar(42) NOT NULL", CanBeNull=false)]
		public string StrField_nm
		{
			get
			{
				return this._StrField_nm;
			}
			set
			{
				if ((this._StrField_nm != value))
				{
					this.OnStrField_nmChanging(value);
					this.SendPropertyChanging();
					this._StrField_nm = value;
					this.SendPropertyChanged("StrField_nm");
					this.OnStrField_nmChanged();
				}
			}
		}
		
		[Column(Storage="_Occurrences", DbType="Int NOT NULL")]
		public int Occurrences
		{
			get
			{
				return this._Occurrences;
			}
			set
			{
				if ((this._Occurrences != value))
				{
					this.OnOccurrencesChanging(value);
					this.SendPropertyChanging();
					this._Occurrences = value;
					this.SendPropertyChanged("Occurrences");
					this.OnOccurrencesChanged();
				}
			}
		}
		
		[Column(Storage="_Threshold", DbType="Int")]
		public System.Nullable<int> Threshold
		{
			get
			{
				return this._Threshold;
			}
			set
			{
				if ((this._Threshold != value))
				{
					this.OnThresholdChanging(value);
					this.SendPropertyChanging();
					this._Threshold = value;
					this.SendPropertyChanged("Threshold");
					this.OnThresholdChanged();
				}
			}
		}
		
		[Column(Storage="_CheckForValue", DbType="VarChar(100)")]
		public string CheckForValue
		{
			get
			{
				return this._CheckForValue;
			}
			set
			{
				if ((this._CheckForValue != value))
				{
					this.OnCheckForValueChanging(value);
					this.SendPropertyChanging();
					this._CheckForValue = value;
					this.SendPropertyChanged("CheckForValue");
					this.OnCheckForValueChanged();
				}
			}
		}
		
		[Column(Storage="_PctOfTotalNull", DbType="Float")]
		public System.Nullable<double> PctOfTotalNull
		{
			get
			{
				return this._PctOfTotalNull;
			}
			set
			{
				if ((this._PctOfTotalNull != value))
				{
					this.OnPctOfTotalNullChanging(value);
					this.SendPropertyChanging();
					this._PctOfTotalNull = value;
					this.SendPropertyChanged("PctOfTotalNull");
					this.OnPctOfTotalNullChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.Validation_Definitions")]
	public partial class Validation_Definitions : NRC.Picker.Depricated.OCSHHCAHPS.ImportProcessor.DAL.EntityBase, INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _NullValidationDefinitionID;
		
		private System.Nullable<int> _ClientGroup_ID;
		
		private System.Nullable<int> _Client_ID;
		
		private System.Nullable<int> _Study_ID;
		
		private System.Nullable<int> _Survey_ID;
		
		private System.Nullable<int> _SurveyType_ID;
		
		private string _Table_nm;
		
		private string _Field_nm;
		
		private System.Nullable<int> _FailureThresholdPct;
		
		private string _CheckForValue;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnNullValidationDefinitionIDChanging(int value);
    partial void OnNullValidationDefinitionIDChanged();
    partial void OnClientGroup_IDChanging(System.Nullable<int> value);
    partial void OnClientGroup_IDChanged();
    partial void OnClient_IDChanging(System.Nullable<int> value);
    partial void OnClient_IDChanged();
    partial void OnStudy_IDChanging(System.Nullable<int> value);
    partial void OnStudy_IDChanged();
    partial void OnSurvey_IDChanging(System.Nullable<int> value);
    partial void OnSurvey_IDChanged();
    partial void OnSurveyType_IDChanging(System.Nullable<int> value);
    partial void OnSurveyType_IDChanged();
    partial void OnTable_nmChanging(string value);
    partial void OnTable_nmChanged();
    partial void OnField_nmChanging(string value);
    partial void OnField_nmChanged();
    partial void OnFailureThresholdPctChanging(System.Nullable<int> value);
    partial void OnFailureThresholdPctChanged();
    partial void OnCheckForValueChanging(string value);
    partial void OnCheckForValueChanged();
    #endregion
		
		public Validation_Definitions()
		{
			OnCreated();
		}
		
		[Column(Storage="_NullValidationDefinitionID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int NullValidationDefinitionID
		{
			get
			{
				return this._NullValidationDefinitionID;
			}
			set
			{
				if ((this._NullValidationDefinitionID != value))
				{
					this.OnNullValidationDefinitionIDChanging(value);
					this.SendPropertyChanging();
					this._NullValidationDefinitionID = value;
					this.SendPropertyChanged("NullValidationDefinitionID");
					this.OnNullValidationDefinitionIDChanged();
				}
			}
		}
		
		[Column(Storage="_ClientGroup_ID", DbType="Int")]
		public System.Nullable<int> ClientGroup_ID
		{
			get
			{
				return this._ClientGroup_ID;
			}
			set
			{
				if ((this._ClientGroup_ID != value))
				{
					this.OnClientGroup_IDChanging(value);
					this.SendPropertyChanging();
					this._ClientGroup_ID = value;
					this.SendPropertyChanged("ClientGroup_ID");
					this.OnClientGroup_IDChanged();
				}
			}
		}
		
		[Column(Storage="_Client_ID", DbType="Int")]
		public System.Nullable<int> Client_ID
		{
			get
			{
				return this._Client_ID;
			}
			set
			{
				if ((this._Client_ID != value))
				{
					this.OnClient_IDChanging(value);
					this.SendPropertyChanging();
					this._Client_ID = value;
					this.SendPropertyChanged("Client_ID");
					this.OnClient_IDChanged();
				}
			}
		}
		
		[Column(Storage="_Study_ID", DbType="Int")]
		public System.Nullable<int> Study_ID
		{
			get
			{
				return this._Study_ID;
			}
			set
			{
				if ((this._Study_ID != value))
				{
					this.OnStudy_IDChanging(value);
					this.SendPropertyChanging();
					this._Study_ID = value;
					this.SendPropertyChanged("Study_ID");
					this.OnStudy_IDChanged();
				}
			}
		}
		
		[Column(Storage="_Survey_ID", DbType="Int")]
		public System.Nullable<int> Survey_ID
		{
			get
			{
				return this._Survey_ID;
			}
			set
			{
				if ((this._Survey_ID != value))
				{
					this.OnSurvey_IDChanging(value);
					this.SendPropertyChanging();
					this._Survey_ID = value;
					this.SendPropertyChanged("Survey_ID");
					this.OnSurvey_IDChanged();
				}
			}
		}
		
		[Column(Storage="_SurveyType_ID", DbType="Int")]
		public System.Nullable<int> SurveyType_ID
		{
			get
			{
				return this._SurveyType_ID;
			}
			set
			{
				if ((this._SurveyType_ID != value))
				{
					this.OnSurveyType_IDChanging(value);
					this.SendPropertyChanging();
					this._SurveyType_ID = value;
					this.SendPropertyChanged("SurveyType_ID");
					this.OnSurveyType_IDChanged();
				}
			}
		}
		
		[Column(Storage="_Table_nm", DbType="VarChar(100)")]
		public string Table_nm
		{
			get
			{
				return this._Table_nm;
			}
			set
			{
				if ((this._Table_nm != value))
				{
					this.OnTable_nmChanging(value);
					this.SendPropertyChanging();
					this._Table_nm = value;
					this.SendPropertyChanged("Table_nm");
					this.OnTable_nmChanged();
				}
			}
		}
		
		[Column(Storage="_Field_nm", DbType="VarChar(50)")]
		public string Field_nm
		{
			get
			{
				return this._Field_nm;
			}
			set
			{
				if ((this._Field_nm != value))
				{
					this.OnField_nmChanging(value);
					this.SendPropertyChanging();
					this._Field_nm = value;
					this.SendPropertyChanged("Field_nm");
					this.OnField_nmChanged();
				}
			}
		}
		
		[Column(Storage="_FailureThresholdPct", DbType="Int")]
		public System.Nullable<int> FailureThresholdPct
		{
			get
			{
				return this._FailureThresholdPct;
			}
			set
			{
				if ((this._FailureThresholdPct != value))
				{
					this.OnFailureThresholdPctChanging(value);
					this.SendPropertyChanging();
					this._FailureThresholdPct = value;
					this.SendPropertyChanged("FailureThresholdPct");
					this.OnFailureThresholdPctChanged();
				}
			}
		}
		
		[Column(Storage="_CheckForValue", DbType="VarChar(50)")]
		public string CheckForValue
		{
			get
			{
				return this._CheckForValue;
			}
			set
			{
				if ((this._CheckForValue != value))
				{
					this.OnCheckForValueChanging(value);
					this.SendPropertyChanging();
					this._CheckForValue = value;
					this.SendPropertyChanged("CheckForValue");
					this.OnCheckForValueChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.ValidationType")]
	public partial class ValidationType : NRC.Picker.Depricated.OCSHHCAHPS.ImportProcessor.DAL.EntityBase, INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ValidationType_id;
		
		private string _StrValidationType;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnValidationType_idChanging(int value);
    partial void OnValidationType_idChanged();
    partial void OnStrValidationTypeChanging(string value);
    partial void OnStrValidationTypeChanged();
    #endregion
		
		public ValidationType()
		{
			OnCreated();
		}
		
		[Column(Storage="_ValidationType_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ValidationType_id
		{
			get
			{
				return this._ValidationType_id;
			}
			set
			{
				if ((this._ValidationType_id != value))
				{
					this.OnValidationType_idChanging(value);
					this.SendPropertyChanging();
					this._ValidationType_id = value;
					this.SendPropertyChanged("ValidationType_id");
					this.OnValidationType_idChanged();
				}
			}
		}
		
		[Column(Name="strValidationType", Storage="_StrValidationType", DbType="VarChar(42)")]
		public string StrValidationType
		{
			get
			{
				return this._StrValidationType;
			}
			set
			{
				if ((this._StrValidationType != value))
				{
					this.OnStrValidationTypeChanging(value);
					this.SendPropertyChanging();
					this._StrValidationType = value;
					this.SendPropertyChanged("StrValidationType");
					this.OnStrValidationTypeChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.VR_Freqs")]
	public partial class VR_Freqs : NRC.Picker.Depricated.OCSHHCAHPS.ImportProcessor.DAL.EntityBase, INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _VR_Freqs_id;
		
		private int _DataFile_id;
		
		private int _Table_id;
		
		private string _StrTable_nm;
		
		private int _Field_id;
		
		private string _StrField_nm;
		
		private string _StrValue;
		
		private int _Occurrences;
		
		private short _LowLimit;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnVR_Freqs_idChanging(int value);
    partial void OnVR_Freqs_idChanged();
    partial void OnDataFile_idChanging(int value);
    partial void OnDataFile_idChanged();
    partial void OnTable_idChanging(int value);
    partial void OnTable_idChanged();
    partial void OnStrTable_nmChanging(string value);
    partial void OnStrTable_nmChanged();
    partial void OnField_idChanging(int value);
    partial void OnField_idChanged();
    partial void OnStrField_nmChanging(string value);
    partial void OnStrField_nmChanged();
    partial void OnStrValueChanging(string value);
    partial void OnStrValueChanged();
    partial void OnOccurrencesChanging(int value);
    partial void OnOccurrencesChanged();
    partial void OnLowLimitChanging(short value);
    partial void OnLowLimitChanged();
    #endregion
		
		public VR_Freqs()
		{
			OnCreated();
		}
		
		[Column(Storage="_VR_Freqs_id", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int VR_Freqs_id
		{
			get
			{
				return this._VR_Freqs_id;
			}
			set
			{
				if ((this._VR_Freqs_id != value))
				{
					this.OnVR_Freqs_idChanging(value);
					this.SendPropertyChanging();
					this._VR_Freqs_id = value;
					this.SendPropertyChanged("VR_Freqs_id");
					this.OnVR_Freqs_idChanged();
				}
			}
		}
		
		[Column(Storage="_DataFile_id", DbType="Int NOT NULL")]
		public int DataFile_id
		{
			get
			{
				return this._DataFile_id;
			}
			set
			{
				if ((this._DataFile_id != value))
				{
					this.OnDataFile_idChanging(value);
					this.SendPropertyChanging();
					this._DataFile_id = value;
					this.SendPropertyChanged("DataFile_id");
					this.OnDataFile_idChanged();
				}
			}
		}
		
		[Column(Storage="_Table_id", DbType="Int NOT NULL")]
		public int Table_id
		{
			get
			{
				return this._Table_id;
			}
			set
			{
				if ((this._Table_id != value))
				{
					this.OnTable_idChanging(value);
					this.SendPropertyChanging();
					this._Table_id = value;
					this.SendPropertyChanged("Table_id");
					this.OnTable_idChanged();
				}
			}
		}
		
		[Column(Name="strTable_nm", Storage="_StrTable_nm", DbType="VarChar(42) NOT NULL", CanBeNull=false)]
		public string StrTable_nm
		{
			get
			{
				return this._StrTable_nm;
			}
			set
			{
				if ((this._StrTable_nm != value))
				{
					this.OnStrTable_nmChanging(value);
					this.SendPropertyChanging();
					this._StrTable_nm = value;
					this.SendPropertyChanged("StrTable_nm");
					this.OnStrTable_nmChanged();
				}
			}
		}
		
		[Column(Storage="_Field_id", DbType="Int NOT NULL")]
		public int Field_id
		{
			get
			{
				return this._Field_id;
			}
			set
			{
				if ((this._Field_id != value))
				{
					this.OnField_idChanging(value);
					this.SendPropertyChanging();
					this._Field_id = value;
					this.SendPropertyChanged("Field_id");
					this.OnField_idChanged();
				}
			}
		}
		
		[Column(Name="strField_nm", Storage="_StrField_nm", DbType="VarChar(42) NOT NULL", CanBeNull=false)]
		public string StrField_nm
		{
			get
			{
				return this._StrField_nm;
			}
			set
			{
				if ((this._StrField_nm != value))
				{
					this.OnStrField_nmChanging(value);
					this.SendPropertyChanging();
					this._StrField_nm = value;
					this.SendPropertyChanged("StrField_nm");
					this.OnStrField_nmChanged();
				}
			}
		}
		
		[Column(Name="strValue", Storage="_StrValue", DbType="VarChar(1000)")]
		public string StrValue
		{
			get
			{
				return this._StrValue;
			}
			set
			{
				if ((this._StrValue != value))
				{
					this.OnStrValueChanging(value);
					this.SendPropertyChanging();
					this._StrValue = value;
					this.SendPropertyChanged("StrValue");
					this.OnStrValueChanged();
				}
			}
		}
		
		[Column(Storage="_Occurrences", DbType="Int NOT NULL")]
		public int Occurrences
		{
			get
			{
				return this._Occurrences;
			}
			set
			{
				if ((this._Occurrences != value))
				{
					this.OnOccurrencesChanging(value);
					this.SendPropertyChanging();
					this._Occurrences = value;
					this.SendPropertyChanged("Occurrences");
					this.OnOccurrencesChanged();
				}
			}
		}
		
		[Column(Storage="_LowLimit", DbType="SmallInt NOT NULL")]
		public short LowLimit
		{
			get
			{
				return this._LowLimit;
			}
			set
			{
				if ((this._LowLimit != value))
				{
					this.OnLowLimitChanging(value);
					this.SendPropertyChanging();
					this._LowLimit = value;
					this.SendPropertyChanged("LowLimit");
					this.OnLowLimitChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.VR_MatchFieldValidation")]
	public partial class VR_MatchFieldValidation : NRC.Picker.Depricated.OCSHHCAHPS.ImportProcessor.DAL.EntityBase, INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _VR_mfv_id;
		
		private System.Nullable<int> _DataFile_id;
		
		private string _StrTable_nm;
		
		private string _StrMatchValue;
		
		private string _StrCheckValue;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnVR_mfv_idChanging(int value);
    partial void OnVR_mfv_idChanged();
    partial void OnDataFile_idChanging(System.Nullable<int> value);
    partial void OnDataFile_idChanged();
    partial void OnStrTable_nmChanging(string value);
    partial void OnStrTable_nmChanged();
    partial void OnStrMatchValueChanging(string value);
    partial void OnStrMatchValueChanged();
    partial void OnStrCheckValueChanging(string value);
    partial void OnStrCheckValueChanged();
    #endregion
		
		public VR_MatchFieldValidation()
		{
			OnCreated();
		}
		
		[Column(Storage="_VR_mfv_id", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int VR_mfv_id
		{
			get
			{
				return this._VR_mfv_id;
			}
			set
			{
				if ((this._VR_mfv_id != value))
				{
					this.OnVR_mfv_idChanging(value);
					this.SendPropertyChanging();
					this._VR_mfv_id = value;
					this.SendPropertyChanged("VR_mfv_id");
					this.OnVR_mfv_idChanged();
				}
			}
		}
		
		[Column(Storage="_DataFile_id", DbType="Int")]
		public System.Nullable<int> DataFile_id
		{
			get
			{
				return this._DataFile_id;
			}
			set
			{
				if ((this._DataFile_id != value))
				{
					this.OnDataFile_idChanging(value);
					this.SendPropertyChanging();
					this._DataFile_id = value;
					this.SendPropertyChanged("DataFile_id");
					this.OnDataFile_idChanged();
				}
			}
		}
		
		[Column(Name="strTable_nm", Storage="_StrTable_nm", DbType="VarChar(42)")]
		public string StrTable_nm
		{
			get
			{
				return this._StrTable_nm;
			}
			set
			{
				if ((this._StrTable_nm != value))
				{
					this.OnStrTable_nmChanging(value);
					this.SendPropertyChanging();
					this._StrTable_nm = value;
					this.SendPropertyChanged("StrTable_nm");
					this.OnStrTable_nmChanged();
				}
			}
		}
		
		[Column(Name="strMatchValue", Storage="_StrMatchValue", DbType="VarChar(220)")]
		public string StrMatchValue
		{
			get
			{
				return this._StrMatchValue;
			}
			set
			{
				if ((this._StrMatchValue != value))
				{
					this.OnStrMatchValueChanging(value);
					this.SendPropertyChanging();
					this._StrMatchValue = value;
					this.SendPropertyChanged("StrMatchValue");
					this.OnStrMatchValueChanged();
				}
			}
		}
		
		[Column(Name="strCheckValue", Storage="_StrCheckValue", DbType="VarChar(2200)")]
		public string StrCheckValue
		{
			get
			{
				return this._StrCheckValue;
			}
			set
			{
				if ((this._StrCheckValue != value))
				{
					this.OnStrCheckValueChanging(value);
					this.SendPropertyChanging();
					this._StrCheckValue = value;
					this.SendPropertyChanged("StrCheckValue");
					this.OnStrCheckValueChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.VR_RecordCounts")]
	public partial class VR_RecordCounts : NRC.Picker.Depricated.OCSHHCAHPS.ImportProcessor.DAL.EntityBase, INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _VR_RecordCounts_id;
		
		private System.Nullable<int> _DataFile_id;
		
		private string _RecordType;
		
		private string _GroupName;
		
		private System.Nullable<int> _QtyUpd;
		
		private System.Nullable<int> _QtyErr;
		
		private System.Nullable<int> _QtyRem;
		
		private System.Nullable<int> _QtyTot;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnVR_RecordCounts_idChanging(int value);
    partial void OnVR_RecordCounts_idChanged();
    partial void OnDataFile_idChanging(System.Nullable<int> value);
    partial void OnDataFile_idChanged();
    partial void OnRecordTypeChanging(string value);
    partial void OnRecordTypeChanged();
    partial void OnGroupNameChanging(string value);
    partial void OnGroupNameChanged();
    partial void OnQtyUpdChanging(System.Nullable<int> value);
    partial void OnQtyUpdChanged();
    partial void OnQtyErrChanging(System.Nullable<int> value);
    partial void OnQtyErrChanged();
    partial void OnQtyRemChanging(System.Nullable<int> value);
    partial void OnQtyRemChanged();
    partial void OnQtyTotChanging(System.Nullable<int> value);
    partial void OnQtyTotChanged();
    #endregion
		
		public VR_RecordCounts()
		{
			OnCreated();
		}
		
		[Column(Storage="_VR_RecordCounts_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int VR_RecordCounts_id
		{
			get
			{
				return this._VR_RecordCounts_id;
			}
			set
			{
				if ((this._VR_RecordCounts_id != value))
				{
					this.OnVR_RecordCounts_idChanging(value);
					this.SendPropertyChanging();
					this._VR_RecordCounts_id = value;
					this.SendPropertyChanged("VR_RecordCounts_id");
					this.OnVR_RecordCounts_idChanged();
				}
			}
		}
		
		[Column(Storage="_DataFile_id", DbType="Int")]
		public System.Nullable<int> DataFile_id
		{
			get
			{
				return this._DataFile_id;
			}
			set
			{
				if ((this._DataFile_id != value))
				{
					this.OnDataFile_idChanging(value);
					this.SendPropertyChanging();
					this._DataFile_id = value;
					this.SendPropertyChanged("DataFile_id");
					this.OnDataFile_idChanged();
				}
			}
		}
		
		[Column(Storage="_RecordType", DbType="VarChar(20)")]
		public string RecordType
		{
			get
			{
				return this._RecordType;
			}
			set
			{
				if ((this._RecordType != value))
				{
					this.OnRecordTypeChanging(value);
					this.SendPropertyChanging();
					this._RecordType = value;
					this.SendPropertyChanged("RecordType");
					this.OnRecordTypeChanged();
				}
			}
		}
		
		[Column(Storage="_GroupName", DbType="VarChar(42)")]
		public string GroupName
		{
			get
			{
				return this._GroupName;
			}
			set
			{
				if ((this._GroupName != value))
				{
					this.OnGroupNameChanging(value);
					this.SendPropertyChanging();
					this._GroupName = value;
					this.SendPropertyChanged("GroupName");
					this.OnGroupNameChanged();
				}
			}
		}
		
		[Column(Storage="_QtyUpd", DbType="Int")]
		public System.Nullable<int> QtyUpd
		{
			get
			{
				return this._QtyUpd;
			}
			set
			{
				if ((this._QtyUpd != value))
				{
					this.OnQtyUpdChanging(value);
					this.SendPropertyChanging();
					this._QtyUpd = value;
					this.SendPropertyChanged("QtyUpd");
					this.OnQtyUpdChanged();
				}
			}
		}
		
		[Column(Storage="_QtyErr", DbType="Int")]
		public System.Nullable<int> QtyErr
		{
			get
			{
				return this._QtyErr;
			}
			set
			{
				if ((this._QtyErr != value))
				{
					this.OnQtyErrChanging(value);
					this.SendPropertyChanging();
					this._QtyErr = value;
					this.SendPropertyChanged("QtyErr");
					this.OnQtyErrChanged();
				}
			}
		}
		
		[Column(Storage="_QtyRem", DbType="Int")]
		public System.Nullable<int> QtyRem
		{
			get
			{
				return this._QtyRem;
			}
			set
			{
				if ((this._QtyRem != value))
				{
					this.OnQtyRemChanging(value);
					this.SendPropertyChanging();
					this._QtyRem = value;
					this.SendPropertyChanged("QtyRem");
					this.OnQtyRemChanged();
				}
			}
		}
		
		[Column(Storage="_QtyTot", DbType="Int")]
		public System.Nullable<int> QtyTot
		{
			get
			{
				return this._QtyTot;
			}
			set
			{
				if ((this._QtyTot != value))
				{
					this.OnQtyTotChanging(value);
					this.SendPropertyChanging();
					this._QtyTot = value;
					this.SendPropertyChanged("QtyTot");
					this.OnQtyTotChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	public partial class GetClientTransformsResult
	{
		
		private System.Nullable<int> _Client_id;
		
		private System.Nullable<int> _Study_id;
		
		private System.Nullable<int> _Survey_id;
		
		private string _Languages;
		
		private System.Nullable<int> _TransformId;
		
		private string _TransformName;
		
		private System.Nullable<int> _TransformTargetId;
		
		private string _TransformTargetName;
		
		private string _TransformTargetTable;
		
		private System.Nullable<int> _TransformMappingId;
		
		private string _SourceFieldName;
		
		private string _ClientSourceFieldName;
		
		private string _TargetFieldName;
		
		private string _TransformCode;
		
		private string _ClientTransformCode;
		
		private System.Nullable<System.DateTime> _CreateDate;
		
		private string _CreateUser;
		
		private System.Nullable<System.DateTime> _UpdateDate;
		
		private string _UpdateUser;
		
		public GetClientTransformsResult()
		{
		}
		
		[Column(Storage="_Client_id", DbType="Int")]
		public System.Nullable<int> Client_id
		{
			get
			{
				return this._Client_id;
			}
			set
			{
				if ((this._Client_id != value))
				{
					this._Client_id = value;
				}
			}
		}
		
		[Column(Storage="_Study_id", DbType="Int")]
		public System.Nullable<int> Study_id
		{
			get
			{
				return this._Study_id;
			}
			set
			{
				if ((this._Study_id != value))
				{
					this._Study_id = value;
				}
			}
		}
		
		[Column(Storage="_Survey_id", DbType="Int")]
		public System.Nullable<int> Survey_id
		{
			get
			{
				return this._Survey_id;
			}
			set
			{
				if ((this._Survey_id != value))
				{
					this._Survey_id = value;
				}
			}
		}
		
		[Column(Storage="_Languages", DbType="VarChar(32)")]
		public string Languages
		{
			get
			{
				return this._Languages;
			}
			set
			{
				if ((this._Languages != value))
				{
					this._Languages = value;
				}
			}
		}
		
		[Column(Storage="_TransformId", DbType="Int")]
		public System.Nullable<int> TransformId
		{
			get
			{
				return this._TransformId;
			}
			set
			{
				if ((this._TransformId != value))
				{
					this._TransformId = value;
				}
			}
		}
		
		[Column(Storage="_TransformName", DbType="VarChar(100)")]
		public string TransformName
		{
			get
			{
				return this._TransformName;
			}
			set
			{
				if ((this._TransformName != value))
				{
					this._TransformName = value;
				}
			}
		}
		
		[Column(Storage="_TransformTargetId", DbType="Int")]
		public System.Nullable<int> TransformTargetId
		{
			get
			{
				return this._TransformTargetId;
			}
			set
			{
				if ((this._TransformTargetId != value))
				{
					this._TransformTargetId = value;
				}
			}
		}
		
		[Column(Storage="_TransformTargetName", DbType="VarChar(100)")]
		public string TransformTargetName
		{
			get
			{
				return this._TransformTargetName;
			}
			set
			{
				if ((this._TransformTargetName != value))
				{
					this._TransformTargetName = value;
				}
			}
		}
		
		[Column(Storage="_TransformTargetTable", DbType="VarChar(100)")]
		public string TransformTargetTable
		{
			get
			{
				return this._TransformTargetTable;
			}
			set
			{
				if ((this._TransformTargetTable != value))
				{
					this._TransformTargetTable = value;
				}
			}
		}
		
		[Column(Storage="_TransformMappingId", DbType="Int")]
		public System.Nullable<int> TransformMappingId
		{
			get
			{
				return this._TransformMappingId;
			}
			set
			{
				if ((this._TransformMappingId != value))
				{
					this._TransformMappingId = value;
				}
			}
		}
		
		[Column(Storage="_SourceFieldName", DbType="VarChar(100)")]
		public string SourceFieldName
		{
			get
			{
				return this._SourceFieldName;
			}
			set
			{
				if ((this._SourceFieldName != value))
				{
					this._SourceFieldName = value;
				}
			}
		}
		
		[Column(Storage="_ClientSourceFieldName", DbType="VarChar(100)")]
		public string ClientSourceFieldName
		{
			get
			{
				return this._ClientSourceFieldName;
			}
			set
			{
				if ((this._ClientSourceFieldName != value))
				{
					this._ClientSourceFieldName = value;
				}
			}
		}
		
		[Column(Storage="_TargetFieldName", DbType="VarChar(100)")]
		public string TargetFieldName
		{
			get
			{
				return this._TargetFieldName;
			}
			set
			{
				if ((this._TargetFieldName != value))
				{
					this._TargetFieldName = value;
				}
			}
		}
		
		[Column(Storage="_TransformCode", DbType="VarChar(7000)")]
		public string TransformCode
		{
			get
			{
				return this._TransformCode;
			}
			set
			{
				if ((this._TransformCode != value))
				{
					this._TransformCode = value;
				}
			}
		}
		
		[Column(Storage="_ClientTransformCode", DbType="VarChar(7000)")]
		public string ClientTransformCode
		{
			get
			{
				return this._ClientTransformCode;
			}
			set
			{
				if ((this._ClientTransformCode != value))
				{
					this._ClientTransformCode = value;
				}
			}
		}
		
		[Column(Storage="_CreateDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> CreateDate
		{
			get
			{
				return this._CreateDate;
			}
			set
			{
				if ((this._CreateDate != value))
				{
					this._CreateDate = value;
				}
			}
		}
		
		[Column(Storage="_CreateUser", DbType="VarChar(64)")]
		public string CreateUser
		{
			get
			{
				return this._CreateUser;
			}
			set
			{
				if ((this._CreateUser != value))
				{
					this._CreateUser = value;
				}
			}
		}
		
		[Column(Storage="_UpdateDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> UpdateDate
		{
			get
			{
				return this._UpdateDate;
			}
			set
			{
				if ((this._UpdateDate != value))
				{
					this._UpdateDate = value;
				}
			}
		}
		
		[Column(Storage="_UpdateUser", DbType="VarChar(64)")]
		public string UpdateUser
		{
			get
			{
				return this._UpdateUser;
			}
			set
			{
				if ((this._UpdateUser != value))
				{
					this._UpdateUser = value;
				}
			}
		}
	}
	
	public partial class GetTransformImportsResult
	{
		
		private System.Nullable<int> _TransformLibraryId;
		
		private string _TransformLibraryName;
		
		private string _Code;
		
		public GetTransformImportsResult()
		{
		}
		
		[Column(Storage="_TransformLibraryId", DbType="Int")]
		public System.Nullable<int> TransformLibraryId
		{
			get
			{
				return this._TransformLibraryId;
			}
			set
			{
				if ((this._TransformLibraryId != value))
				{
					this._TransformLibraryId = value;
				}
			}
		}
		
		[Column(Storage="_TransformLibraryName", DbType="VarChar(32)")]
		public string TransformLibraryName
		{
			get
			{
				return this._TransformLibraryName;
			}
			set
			{
				if ((this._TransformLibraryName != value))
				{
					this._TransformLibraryName = value;
				}
			}
		}
		
		[Column(Storage="_Code", DbType="VarChar(7000)")]
		public string Code
		{
			get
			{
				return this._Code;
			}
			set
			{
				if ((this._Code != value))
				{
					this._Code = value;
				}
			}
		}
	}
	
	public partial class GetTransformsResult
	{
		
		private System.Nullable<int> _Client_id;
		
		private System.Nullable<int> _Study_id;
		
		private System.Nullable<int> _Survey_id;
		
		private string _Languages;
		
		private System.Nullable<int> _TransformId;
		
		private string _TransformName;
		
		private System.Nullable<int> _TransformTargetId;
		
		private string _TransformTargetName;
		
		private string _TransformTargetTable;
		
		private string _SourceFieldName;
		
		private string _TargetFieldName;
		
		private string _Transform;
		
		public GetTransformsResult()
		{
		}
		
		[Column(Storage="_Client_id", DbType="Int")]
		public System.Nullable<int> Client_id
		{
			get
			{
				return this._Client_id;
			}
			set
			{
				if ((this._Client_id != value))
				{
					this._Client_id = value;
				}
			}
		}
		
		[Column(Storage="_Study_id", DbType="Int")]
		public System.Nullable<int> Study_id
		{
			get
			{
				return this._Study_id;
			}
			set
			{
				if ((this._Study_id != value))
				{
					this._Study_id = value;
				}
			}
		}
		
		[Column(Storage="_Survey_id", DbType="Int")]
		public System.Nullable<int> Survey_id
		{
			get
			{
				return this._Survey_id;
			}
			set
			{
				if ((this._Survey_id != value))
				{
					this._Survey_id = value;
				}
			}
		}
		
		[Column(Storage="_Languages", DbType="VarChar(32)")]
		public string Languages
		{
			get
			{
				return this._Languages;
			}
			set
			{
				if ((this._Languages != value))
				{
					this._Languages = value;
				}
			}
		}
		
		[Column(Storage="_TransformId", DbType="Int")]
		public System.Nullable<int> TransformId
		{
			get
			{
				return this._TransformId;
			}
			set
			{
				if ((this._TransformId != value))
				{
					this._TransformId = value;
				}
			}
		}
		
		[Column(Storage="_TransformName", DbType="VarChar(100)")]
		public string TransformName
		{
			get
			{
				return this._TransformName;
			}
			set
			{
				if ((this._TransformName != value))
				{
					this._TransformName = value;
				}
			}
		}
		
		[Column(Storage="_TransformTargetId", DbType="Int")]
		public System.Nullable<int> TransformTargetId
		{
			get
			{
				return this._TransformTargetId;
			}
			set
			{
				if ((this._TransformTargetId != value))
				{
					this._TransformTargetId = value;
				}
			}
		}
		
		[Column(Storage="_TransformTargetName", DbType="VarChar(100)")]
		public string TransformTargetName
		{
			get
			{
				return this._TransformTargetName;
			}
			set
			{
				if ((this._TransformTargetName != value))
				{
					this._TransformTargetName = value;
				}
			}
		}
		
		[Column(Storage="_TransformTargetTable", DbType="VarChar(100)")]
		public string TransformTargetTable
		{
			get
			{
				return this._TransformTargetTable;
			}
			set
			{
				if ((this._TransformTargetTable != value))
				{
					this._TransformTargetTable = value;
				}
			}
		}
		
		[Column(Storage="_SourceFieldName", DbType="VarChar(100)")]
		public string SourceFieldName
		{
			get
			{
				return this._SourceFieldName;
			}
			set
			{
				if ((this._SourceFieldName != value))
				{
					this._SourceFieldName = value;
				}
			}
		}
		
		[Column(Storage="_TargetFieldName", DbType="VarChar(100)")]
		public string TargetFieldName
		{
			get
			{
				return this._TargetFieldName;
			}
			set
			{
				if ((this._TargetFieldName != value))
				{
					this._TargetFieldName = value;
				}
			}
		}
		
		[Column(Name="transform", Storage="_Transform", DbType="VarChar(7000)")]
		public string Transform
		{
			get
			{
				return this._Transform;
			}
			set
			{
				if ((this._Transform != value))
				{
					this._Transform = value;
				}
			}
		}
	}
	
	public partial class LD_InsertDataFileResult
	{
		
		private System.Nullable<decimal> _Column1;
		
		public LD_InsertDataFileResult()
		{
		}
		
		[Column(Name="", Storage="_Column1", DbType="Decimal(38,0)")]
		public System.Nullable<decimal> Column1
		{
			get
			{
				return this._Column1;
			}
			set
			{
				if ((this._Column1 != value))
				{
					this._Column1 = value;
				}
			}
		}
	}
	
	public partial class LD_InsertDataFileStateResult
	{
		
		private System.Nullable<decimal> _Column1;
		
		public LD_InsertDataFileStateResult()
		{
		}
		
		[Column(Name="", Storage="_Column1", DbType="Decimal(38,0)")]
		public System.Nullable<decimal> Column1
		{
			get
			{
				return this._Column1;
			}
			set
			{
				if ((this._Column1 != value))
				{
					this._Column1 = value;
				}
			}
		}
	}
	
	public partial class LD_PopulateEncounterPop_idResult
	{
		
		private System.Nullable<int> _Column1;
		
		public LD_PopulateEncounterPop_idResult()
		{
		}
		
		[Column(Name="", Storage="_Column1", DbType="Int")]
		public System.Nullable<int> Column1
		{
			get
			{
				return this._Column1;
			}
			set
			{
				if ((this._Column1 != value))
				{
					this._Column1 = value;
				}
			}
		}
	}
	
	public partial class LD_SelectAllDataFilesResult
	{
		
		private System.Nullable<int> _DataFile_id;
		
		private System.Nullable<int> _Client_ID;
		
		private System.Nullable<int> _Study_ID;
		
		private System.Nullable<int> _Survey_ID;
		
		private System.Nullable<int> _FileType_id;
		
		private string _PervasiveMapName;
		
		private string _StrFileLocation;
		
		private string _StrFile_nm;
		
		private System.Nullable<int> _IntFileSize;
		
		private System.Nullable<int> _IntRecords;
		
		private System.Nullable<System.DateTime> _DatReceived;
		
		private System.Nullable<System.DateTime> _DatBegin;
		
		private System.Nullable<System.DateTime> _DatEnd;
		
		private System.Nullable<int> _IntLoaded;
		
		private System.Nullable<System.DateTime> _DatMinDate;
		
		private System.Nullable<System.DateTime> _DatMaxDate;
		
		private System.Nullable<System.DateTime> _DatDeleted;
		
		private System.Nullable<int> _DataSet_id;
		
		private string _AssocDataFiles;
		
		public LD_SelectAllDataFilesResult()
		{
		}
		
		[Column(Storage="_DataFile_id", DbType="Int")]
		public System.Nullable<int> DataFile_id
		{
			get
			{
				return this._DataFile_id;
			}
			set
			{
				if ((this._DataFile_id != value))
				{
					this._DataFile_id = value;
				}
			}
		}
		
		[Column(Storage="_Client_ID", DbType="Int")]
		public System.Nullable<int> Client_ID
		{
			get
			{
				return this._Client_ID;
			}
			set
			{
				if ((this._Client_ID != value))
				{
					this._Client_ID = value;
				}
			}
		}
		
		[Column(Storage="_Study_ID", DbType="Int")]
		public System.Nullable<int> Study_ID
		{
			get
			{
				return this._Study_ID;
			}
			set
			{
				if ((this._Study_ID != value))
				{
					this._Study_ID = value;
				}
			}
		}
		
		[Column(Storage="_Survey_ID", DbType="Int")]
		public System.Nullable<int> Survey_ID
		{
			get
			{
				return this._Survey_ID;
			}
			set
			{
				if ((this._Survey_ID != value))
				{
					this._Survey_ID = value;
				}
			}
		}
		
		[Column(Storage="_FileType_id", DbType="Int")]
		public System.Nullable<int> FileType_id
		{
			get
			{
				return this._FileType_id;
			}
			set
			{
				if ((this._FileType_id != value))
				{
					this._FileType_id = value;
				}
			}
		}
		
		[Column(Storage="_PervasiveMapName", DbType="VarChar(255)")]
		public string PervasiveMapName
		{
			get
			{
				return this._PervasiveMapName;
			}
			set
			{
				if ((this._PervasiveMapName != value))
				{
					this._PervasiveMapName = value;
				}
			}
		}
		
		[Column(Name="strFileLocation", Storage="_StrFileLocation", DbType="VarChar(200)")]
		public string StrFileLocation
		{
			get
			{
				return this._StrFileLocation;
			}
			set
			{
				if ((this._StrFileLocation != value))
				{
					this._StrFileLocation = value;
				}
			}
		}
		
		[Column(Name="strFile_nm", Storage="_StrFile_nm", DbType="VarChar(42)")]
		public string StrFile_nm
		{
			get
			{
				return this._StrFile_nm;
			}
			set
			{
				if ((this._StrFile_nm != value))
				{
					this._StrFile_nm = value;
				}
			}
		}
		
		[Column(Name="intFileSize", Storage="_IntFileSize", DbType="Int")]
		public System.Nullable<int> IntFileSize
		{
			get
			{
				return this._IntFileSize;
			}
			set
			{
				if ((this._IntFileSize != value))
				{
					this._IntFileSize = value;
				}
			}
		}
		
		[Column(Name="intRecords", Storage="_IntRecords", DbType="Int")]
		public System.Nullable<int> IntRecords
		{
			get
			{
				return this._IntRecords;
			}
			set
			{
				if ((this._IntRecords != value))
				{
					this._IntRecords = value;
				}
			}
		}
		
		[Column(Name="datReceived", Storage="_DatReceived", DbType="DateTime")]
		public System.Nullable<System.DateTime> DatReceived
		{
			get
			{
				return this._DatReceived;
			}
			set
			{
				if ((this._DatReceived != value))
				{
					this._DatReceived = value;
				}
			}
		}
		
		[Column(Name="datBegin", Storage="_DatBegin", DbType="DateTime")]
		public System.Nullable<System.DateTime> DatBegin
		{
			get
			{
				return this._DatBegin;
			}
			set
			{
				if ((this._DatBegin != value))
				{
					this._DatBegin = value;
				}
			}
		}
		
		[Column(Name="datEnd", Storage="_DatEnd", DbType="DateTime")]
		public System.Nullable<System.DateTime> DatEnd
		{
			get
			{
				return this._DatEnd;
			}
			set
			{
				if ((this._DatEnd != value))
				{
					this._DatEnd = value;
				}
			}
		}
		
		[Column(Name="intLoaded", Storage="_IntLoaded", DbType="Int")]
		public System.Nullable<int> IntLoaded
		{
			get
			{
				return this._IntLoaded;
			}
			set
			{
				if ((this._IntLoaded != value))
				{
					this._IntLoaded = value;
				}
			}
		}
		
		[Column(Name="datMinDate", Storage="_DatMinDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> DatMinDate
		{
			get
			{
				return this._DatMinDate;
			}
			set
			{
				if ((this._DatMinDate != value))
				{
					this._DatMinDate = value;
				}
			}
		}
		
		[Column(Name="datMaxDate", Storage="_DatMaxDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> DatMaxDate
		{
			get
			{
				return this._DatMaxDate;
			}
			set
			{
				if ((this._DatMaxDate != value))
				{
					this._DatMaxDate = value;
				}
			}
		}
		
		[Column(Name="datDeleted", Storage="_DatDeleted", DbType="DateTime")]
		public System.Nullable<System.DateTime> DatDeleted
		{
			get
			{
				return this._DatDeleted;
			}
			set
			{
				if ((this._DatDeleted != value))
				{
					this._DatDeleted = value;
				}
			}
		}
		
		[Column(Storage="_DataSet_id", DbType="Int")]
		public System.Nullable<int> DataSet_id
		{
			get
			{
				return this._DataSet_id;
			}
			set
			{
				if ((this._DataSet_id != value))
				{
					this._DataSet_id = value;
				}
			}
		}
		
		[Column(Storage="_AssocDataFiles", DbType="VarChar(100)")]
		public string AssocDataFiles
		{
			get
			{
				return this._AssocDataFiles;
			}
			set
			{
				if ((this._AssocDataFiles != value))
				{
					this._AssocDataFiles = value;
				}
			}
		}
	}
	
	public partial class LD_SelectAllDataFileStatesResult
	{
		
		private System.Nullable<int> _DataFileState_id;
		
		private System.Nullable<int> _DataFile_id;
		
		private System.Nullable<int> _State_ID;
		
		private System.Nullable<System.DateTime> _DatOccurred;
		
		private string _StateParameter;
		
		public LD_SelectAllDataFileStatesResult()
		{
		}
		
		[Column(Storage="_DataFileState_id", DbType="Int")]
		public System.Nullable<int> DataFileState_id
		{
			get
			{
				return this._DataFileState_id;
			}
			set
			{
				if ((this._DataFileState_id != value))
				{
					this._DataFileState_id = value;
				}
			}
		}
		
		[Column(Storage="_DataFile_id", DbType="Int")]
		public System.Nullable<int> DataFile_id
		{
			get
			{
				return this._DataFile_id;
			}
			set
			{
				if ((this._DataFile_id != value))
				{
					this._DataFile_id = value;
				}
			}
		}
		
		[Column(Storage="_State_ID", DbType="Int")]
		public System.Nullable<int> State_ID
		{
			get
			{
				return this._State_ID;
			}
			set
			{
				if ((this._State_ID != value))
				{
					this._State_ID = value;
				}
			}
		}
		
		[Column(Name="datOccurred", Storage="_DatOccurred", DbType="DateTime")]
		public System.Nullable<System.DateTime> DatOccurred
		{
			get
			{
				return this._DatOccurred;
			}
			set
			{
				if ((this._DatOccurred != value))
				{
					this._DatOccurred = value;
				}
			}
		}
		
		[Column(Storage="_StateParameter", DbType="VarChar(2000)")]
		public string StateParameter
		{
			get
			{
				return this._StateParameter;
			}
			set
			{
				if ((this._StateParameter != value))
				{
					this._StateParameter = value;
				}
			}
		}
	}
	
	public partial class LD_SelectDataFileResult
	{
		
		private System.Nullable<int> _DataFile_id;
		
		private System.Nullable<int> _Client_ID;
		
		private System.Nullable<int> _Study_ID;
		
		private System.Nullable<int> _Survey_ID;
		
		private System.Nullable<int> _FileType_id;
		
		private string _PervasiveMapName;
		
		private string _StrFileLocation;
		
		private string _StrFile_nm;
		
		private System.Nullable<int> _IntFileSize;
		
		private System.Nullable<int> _IntRecords;
		
		private System.Nullable<System.DateTime> _DatReceived;
		
		private System.Nullable<System.DateTime> _DatBegin;
		
		private System.Nullable<System.DateTime> _DatEnd;
		
		private System.Nullable<int> _IntLoaded;
		
		private System.Nullable<System.DateTime> _DatMinDate;
		
		private System.Nullable<System.DateTime> _DatMaxDate;
		
		private System.Nullable<System.DateTime> _DatDeleted;
		
		private System.Nullable<int> _DataSet_id;
		
		private string _AssocDataFiles;
		
		public LD_SelectDataFileResult()
		{
		}
		
		[Column(Storage="_DataFile_id", DbType="Int")]
		public System.Nullable<int> DataFile_id
		{
			get
			{
				return this._DataFile_id;
			}
			set
			{
				if ((this._DataFile_id != value))
				{
					this._DataFile_id = value;
				}
			}
		}
		
		[Column(Storage="_Client_ID", DbType="Int")]
		public System.Nullable<int> Client_ID
		{
			get
			{
				return this._Client_ID;
			}
			set
			{
				if ((this._Client_ID != value))
				{
					this._Client_ID = value;
				}
			}
		}
		
		[Column(Storage="_Study_ID", DbType="Int")]
		public System.Nullable<int> Study_ID
		{
			get
			{
				return this._Study_ID;
			}
			set
			{
				if ((this._Study_ID != value))
				{
					this._Study_ID = value;
				}
			}
		}
		
		[Column(Storage="_Survey_ID", DbType="Int")]
		public System.Nullable<int> Survey_ID
		{
			get
			{
				return this._Survey_ID;
			}
			set
			{
				if ((this._Survey_ID != value))
				{
					this._Survey_ID = value;
				}
			}
		}
		
		[Column(Storage="_FileType_id", DbType="Int")]
		public System.Nullable<int> FileType_id
		{
			get
			{
				return this._FileType_id;
			}
			set
			{
				if ((this._FileType_id != value))
				{
					this._FileType_id = value;
				}
			}
		}
		
		[Column(Storage="_PervasiveMapName", DbType="VarChar(255)")]
		public string PervasiveMapName
		{
			get
			{
				return this._PervasiveMapName;
			}
			set
			{
				if ((this._PervasiveMapName != value))
				{
					this._PervasiveMapName = value;
				}
			}
		}
		
		[Column(Name="strFileLocation", Storage="_StrFileLocation", DbType="VarChar(200)")]
		public string StrFileLocation
		{
			get
			{
				return this._StrFileLocation;
			}
			set
			{
				if ((this._StrFileLocation != value))
				{
					this._StrFileLocation = value;
				}
			}
		}
		
		[Column(Name="strFile_nm", Storage="_StrFile_nm", DbType="VarChar(42)")]
		public string StrFile_nm
		{
			get
			{
				return this._StrFile_nm;
			}
			set
			{
				if ((this._StrFile_nm != value))
				{
					this._StrFile_nm = value;
				}
			}
		}
		
		[Column(Name="intFileSize", Storage="_IntFileSize", DbType="Int")]
		public System.Nullable<int> IntFileSize
		{
			get
			{
				return this._IntFileSize;
			}
			set
			{
				if ((this._IntFileSize != value))
				{
					this._IntFileSize = value;
				}
			}
		}
		
		[Column(Name="intRecords", Storage="_IntRecords", DbType="Int")]
		public System.Nullable<int> IntRecords
		{
			get
			{
				return this._IntRecords;
			}
			set
			{
				if ((this._IntRecords != value))
				{
					this._IntRecords = value;
				}
			}
		}
		
		[Column(Name="datReceived", Storage="_DatReceived", DbType="DateTime")]
		public System.Nullable<System.DateTime> DatReceived
		{
			get
			{
				return this._DatReceived;
			}
			set
			{
				if ((this._DatReceived != value))
				{
					this._DatReceived = value;
				}
			}
		}
		
		[Column(Name="datBegin", Storage="_DatBegin", DbType="DateTime")]
		public System.Nullable<System.DateTime> DatBegin
		{
			get
			{
				return this._DatBegin;
			}
			set
			{
				if ((this._DatBegin != value))
				{
					this._DatBegin = value;
				}
			}
		}
		
		[Column(Name="datEnd", Storage="_DatEnd", DbType="DateTime")]
		public System.Nullable<System.DateTime> DatEnd
		{
			get
			{
				return this._DatEnd;
			}
			set
			{
				if ((this._DatEnd != value))
				{
					this._DatEnd = value;
				}
			}
		}
		
		[Column(Name="intLoaded", Storage="_IntLoaded", DbType="Int")]
		public System.Nullable<int> IntLoaded
		{
			get
			{
				return this._IntLoaded;
			}
			set
			{
				if ((this._IntLoaded != value))
				{
					this._IntLoaded = value;
				}
			}
		}
		
		[Column(Name="datMinDate", Storage="_DatMinDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> DatMinDate
		{
			get
			{
				return this._DatMinDate;
			}
			set
			{
				if ((this._DatMinDate != value))
				{
					this._DatMinDate = value;
				}
			}
		}
		
		[Column(Name="datMaxDate", Storage="_DatMaxDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> DatMaxDate
		{
			get
			{
				return this._DatMaxDate;
			}
			set
			{
				if ((this._DatMaxDate != value))
				{
					this._DatMaxDate = value;
				}
			}
		}
		
		[Column(Name="datDeleted", Storage="_DatDeleted", DbType="DateTime")]
		public System.Nullable<System.DateTime> DatDeleted
		{
			get
			{
				return this._DatDeleted;
			}
			set
			{
				if ((this._DatDeleted != value))
				{
					this._DatDeleted = value;
				}
			}
		}
		
		[Column(Storage="_DataSet_id", DbType="Int")]
		public System.Nullable<int> DataSet_id
		{
			get
			{
				return this._DataSet_id;
			}
			set
			{
				if ((this._DataSet_id != value))
				{
					this._DataSet_id = value;
				}
			}
		}
		
		[Column(Storage="_AssocDataFiles", DbType="VarChar(100)")]
		public string AssocDataFiles
		{
			get
			{
				return this._AssocDataFiles;
			}
			set
			{
				if ((this._AssocDataFiles != value))
				{
					this._AssocDataFiles = value;
				}
			}
		}
	}
	
	public partial class LD_SelectDataFileStateResult
	{
		
		private System.Nullable<int> _DataFileState_id;
		
		private System.Nullable<int> _DataFile_id;
		
		private System.Nullable<int> _State_ID;
		
		private System.Nullable<System.DateTime> _DatOccurred;
		
		private string _StateParameter;
		
		public LD_SelectDataFileStateResult()
		{
		}
		
		[Column(Storage="_DataFileState_id", DbType="Int")]
		public System.Nullable<int> DataFileState_id
		{
			get
			{
				return this._DataFileState_id;
			}
			set
			{
				if ((this._DataFileState_id != value))
				{
					this._DataFileState_id = value;
				}
			}
		}
		
		[Column(Storage="_DataFile_id", DbType="Int")]
		public System.Nullable<int> DataFile_id
		{
			get
			{
				return this._DataFile_id;
			}
			set
			{
				if ((this._DataFile_id != value))
				{
					this._DataFile_id = value;
				}
			}
		}
		
		[Column(Storage="_State_ID", DbType="Int")]
		public System.Nullable<int> State_ID
		{
			get
			{
				return this._State_ID;
			}
			set
			{
				if ((this._State_ID != value))
				{
					this._State_ID = value;
				}
			}
		}
		
		[Column(Name="datOccurred", Storage="_DatOccurred", DbType="DateTime")]
		public System.Nullable<System.DateTime> DatOccurred
		{
			get
			{
				return this._DatOccurred;
			}
			set
			{
				if ((this._DatOccurred != value))
				{
					this._DatOccurred = value;
				}
			}
		}
		
		[Column(Storage="_StateParameter", DbType="VarChar(2000)")]
		public string StateParameter
		{
			get
			{
				return this._StateParameter;
			}
			set
			{
				if ((this._StateParameter != value))
				{
					this._StateParameter = value;
				}
			}
		}
	}
	
	public partial class LD_SelectDataFileStatesByDataFileIdResult
	{
		
		private System.Nullable<int> _DataFileState_id;
		
		private System.Nullable<int> _DataFile_id;
		
		private System.Nullable<int> _State_ID;
		
		private System.Nullable<System.DateTime> _DatOccurred;
		
		private string _StateParameter;
		
		public LD_SelectDataFileStatesByDataFileIdResult()
		{
		}
		
		[Column(Storage="_DataFileState_id", DbType="Int")]
		public System.Nullable<int> DataFileState_id
		{
			get
			{
				return this._DataFileState_id;
			}
			set
			{
				if ((this._DataFileState_id != value))
				{
					this._DataFileState_id = value;
				}
			}
		}
		
		[Column(Storage="_DataFile_id", DbType="Int")]
		public System.Nullable<int> DataFile_id
		{
			get
			{
				return this._DataFile_id;
			}
			set
			{
				if ((this._DataFile_id != value))
				{
					this._DataFile_id = value;
				}
			}
		}
		
		[Column(Storage="_State_ID", DbType="Int")]
		public System.Nullable<int> State_ID
		{
			get
			{
				return this._State_ID;
			}
			set
			{
				if ((this._State_ID != value))
				{
					this._State_ID = value;
				}
			}
		}
		
		[Column(Name="datOccurred", Storage="_DatOccurred", DbType="DateTime")]
		public System.Nullable<System.DateTime> DatOccurred
		{
			get
			{
				return this._DatOccurred;
			}
			set
			{
				if ((this._DatOccurred != value))
				{
					this._DatOccurred = value;
				}
			}
		}
		
		[Column(Storage="_StateParameter", DbType="VarChar(2000)")]
		public string StateParameter
		{
			get
			{
				return this._StateParameter;
			}
			set
			{
				if ((this._StateParameter != value))
				{
					this._StateParameter = value;
				}
			}
		}
	}
	
	public partial class LD_SelectDataFileStatesByStateIdResult
	{
		
		private System.Nullable<int> _DataFileState_id;
		
		private System.Nullable<int> _DataFile_id;
		
		private System.Nullable<int> _State_ID;
		
		private System.Nullable<System.DateTime> _DatOccurred;
		
		private string _StateParameter;
		
		public LD_SelectDataFileStatesByStateIdResult()
		{
		}
		
		[Column(Storage="_DataFileState_id", DbType="Int")]
		public System.Nullable<int> DataFileState_id
		{
			get
			{
				return this._DataFileState_id;
			}
			set
			{
				if ((this._DataFileState_id != value))
				{
					this._DataFileState_id = value;
				}
			}
		}
		
		[Column(Storage="_DataFile_id", DbType="Int")]
		public System.Nullable<int> DataFile_id
		{
			get
			{
				return this._DataFile_id;
			}
			set
			{
				if ((this._DataFile_id != value))
				{
					this._DataFile_id = value;
				}
			}
		}
		
		[Column(Storage="_State_ID", DbType="Int")]
		public System.Nullable<int> State_ID
		{
			get
			{
				return this._State_ID;
			}
			set
			{
				if ((this._State_ID != value))
				{
					this._State_ID = value;
				}
			}
		}
		
		[Column(Name="datOccurred", Storage="_DatOccurred", DbType="DateTime")]
		public System.Nullable<System.DateTime> DatOccurred
		{
			get
			{
				return this._DatOccurred;
			}
			set
			{
				if ((this._DatOccurred != value))
				{
					this._DatOccurred = value;
				}
			}
		}
		
		[Column(Storage="_StateParameter", DbType="VarChar(2000)")]
		public string StateParameter
		{
			get
			{
				return this._StateParameter;
			}
			set
			{
				if ((this._StateParameter != value))
				{
					this._StateParameter = value;
				}
			}
		}
	}
	
	public partial class LD_UpdateDataFileStateChangeResult
	{
		
		private System.Nullable<decimal> _Column1;
		
		public LD_UpdateDataFileStateChangeResult()
		{
		}
		
		[Column(Name="", Storage="_Column1", DbType="Decimal(38,0)")]
		public System.Nullable<decimal> Column1
		{
			get
			{
				return this._Column1;
			}
			set
			{
				if ((this._Column1 != value))
				{
					this._Column1 = value;
				}
			}
		}
	}
	
	public partial class LD_UpdateUploadFileStateResult
	{
		
		private System.Nullable<decimal> _Column1;
		
		public LD_UpdateUploadFileStateResult()
		{
		}
		
		[Column(Name="", Storage="_Column1", DbType="Decimal(38,0)")]
		public System.Nullable<decimal> Column1
		{
			get
			{
				return this._Column1;
			}
			set
			{
				if ((this._Column1 != value))
				{
					this._Column1 = value;
				}
			}
		}
	}
	
	public partial class LD_UpdateUploadFileStateChangeResult
	{
		
		private System.Nullable<decimal> _Column1;
		
		public LD_UpdateUploadFileStateChangeResult()
		{
		}
		
		[Column(Name="", Storage="_Column1", DbType="Decimal(38,0)")]
		public System.Nullable<decimal> Column1
		{
			get
			{
				return this._Column1;
			}
			set
			{
				if ((this._Column1 != value))
				{
					this._Column1 = value;
				}
			}
		}
	}
	
	public partial class LD_ViewWarningResult
	{
		
		private string _WarningMsg;
		
		public LD_ViewWarningResult()
		{
		}
		
		[Column(Storage="_WarningMsg", DbType="NChar(500)")]
		public string WarningMsg
		{
			get
			{
				return this._WarningMsg;
			}
			set
			{
				if ((this._WarningMsg != value))
				{
					this._WarningMsg = value;
				}
			}
		}
	}
	
	public partial class Sp_helpdiagramdefinitionResult
	{
		
		private System.Nullable<int> _Version;
		
		private System.Data.Linq.Binary _Definition;
		
		public Sp_helpdiagramdefinitionResult()
		{
		}
		
		[Column(Name="version", Storage="_Version", DbType="Int")]
		public System.Nullable<int> Version
		{
			get
			{
				return this._Version;
			}
			set
			{
				if ((this._Version != value))
				{
					this._Version = value;
				}
			}
		}
		
		[Column(Name="definition", Storage="_Definition", DbType="VarBinary(MAX)", CanBeNull=true)]
		public System.Data.Linq.Binary Definition
		{
			get
			{
				return this._Definition;
			}
			set
			{
				if ((this._Definition != value))
				{
					this._Definition = value;
				}
			}
		}
	}
	
	public partial class Sp_helpdiagramsResult
	{
		
		private string _Database;
		
		private string _Name;
		
		private System.Nullable<int> _ID;
		
		private string _Owner;
		
		private System.Nullable<int> _OwnerID;
		
		public Sp_helpdiagramsResult()
		{
		}
		
		[Column(Storage="_Database", DbType="NVarChar(128)")]
		public string Database
		{
			get
			{
				return this._Database;
			}
			set
			{
				if ((this._Database != value))
				{
					this._Database = value;
				}
			}
		}
		
		[Column(Storage="_Name", DbType="NVarChar(128)")]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this._Name = value;
				}
			}
		}
		
		[Column(Storage="_ID", DbType="Int")]
		public System.Nullable<int> ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this._ID = value;
				}
			}
		}
		
		[Column(Storage="_Owner", DbType="NVarChar(128)")]
		public string Owner
		{
			get
			{
				return this._Owner;
			}
			set
			{
				if ((this._Owner != value))
				{
					this._Owner = value;
				}
			}
		}
		
		[Column(Storage="_OwnerID", DbType="Int")]
		public System.Nullable<int> OwnerID
		{
			get
			{
				return this._OwnerID;
			}
			set
			{
				if ((this._OwnerID != value))
				{
					this._OwnerID = value;
				}
			}
		}
	}
}
#pragma warning restore 1591

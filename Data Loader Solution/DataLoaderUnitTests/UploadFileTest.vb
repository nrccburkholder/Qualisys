'The following code was generated by Microsoft Visual Studio 2005.
'The test owner should check each test for validity.
Imports Microsoft.VisualStudio.TestTools.UnitTesting
Imports System
Imports System.Text
Imports System.Collections.Generic
Imports Nrc.DataLoader.Library
Imports Nrc.Qualisys.QLoader.Library
Imports TypeMock
'Imports System.EnterpriseServices
Imports UploaderUnitTests


'''<summary>
'''This is a test class for Nrc.DataLoader.Library.UploadFile and is intended
'''to contain all Nrc.DataLoader.Library.UploadFile Unit Tests
'''</summary>
<TestClass()> _
Public Class UploadFileTest

    Private Shared scope As System.Transactions.TransactionScope
    Private testContextInstance As TestContext

    '''<summary>
    '''Gets or sets the test context which provides
    '''information about and functionality for the current test run.
    '''</summary>
    Public Property TestContext() As TestContext
        Get
            Return testContextInstance
        End Get
        Set(ByVal value As TestContext)
            testContextInstance = value
        End Set
    End Property
#Region "Additional test attributes"
    '
    'You can use the following additional attributes as you write your tests:
    '
    'Use ClassInitialize to run code before running the first test in the class
    '
    <ClassInitialize()> _
    Public Shared Sub MyClassInitialize(ByVal testContext As TestContext)
        NRC.NRCAuthLib.StaticConfig.NRCAuthConnection = Config.NrcAuthConnection
        NRC.NRCAuthLib.StaticConfig.EnvironmentType = NRC.NRCAuthLib.StaticConfig.Environment.Development
    End Sub
    '
    'Use ClassCleanup to run code after all tests in a class have run
    '
    '<ClassCleanup()>  _
    'Public Shared Sub MyClassCleanup()
    'End Sub
    '
    'Use TestInitialize to run code before running each test
    '
    <TestInitialize()> _
    Public Sub MyTestInitialize()
        'Run every test in a new transaction scope to avoid data dependency
        'Note: in your connection string enlist attribute should be set to true to be 
        'included in the Transaction. Transactions can have only one connection so if you need to 
        'leave NrcAuth connection out then set enlist to false in NrcAuthConnectionString in App.Config
        '***************************************************************************************
        scope = New System.Transactions.TransactionScope(System.Transactions.TransactionScopeOption.RequiresNew, System.TimeSpan.FromMinutes(2))
        MockManager.ClearAll() 'Clear expectations before each test
    End Sub
    '
    'Use TestCleanup to run code after each test has run
    '
    <TestCleanup()> _
    Public Sub MyTestCleanup()
        scope.Dispose()
    End Sub
    '
#End Region

#Region "Tests"
    '''<summary>
    '''A test for GetAll()
    '''</summary>
    <TestMethod()> _
    Public Sub GetAllTest()
        Dim OldReccount As Integer = UploadFile.GetAll().Count
        Dim dummy1 As UploadFile = UploadFileHelper.CreateDummyUploadFile()
        Dim dummy2 As UploadFile = UploadFileHelper.CreateDummyUploadFile()

        Dim newcount As Integer = UploadFile.GetAll().Count
        Assert.AreEqual(OldReccount + 2, newcount)
    End Sub

    '''<summary>
    '''A test for NewUploadFile()
    '''</summary>
    <TestMethod()> _
    Public Sub NewUploadFileTest()
        Dim expected As UploadFile = Nothing
        Dim actual As UploadFile
        actual = UploadFileHelper.CreateDummyUploadFile()
        Dim newID As Integer = actual.Id

        expected = UploadFile.Get(newID)
        Assert.AreEqual(expected, actual, "Nrc.DataLoader.Library.UploadFile.NewUploadFile did not return the expected value.")

        actual.UploadFileState.StateOfUpload = UploadState.GetByName(UploadState.AvailableStates.Uploading) 'UploadState.Get(2)
        actual.Save()

        expected = UploadFile.Get(newID)
        Dim expectedState As UploadState = UploadState.GetByName(UploadState.AvailableStates.Uploading)
        Dim ActualState As UploadState = actual.UploadFileState.StateOfUpload
        Assert.AreEqual(expectedState.UploadStateId, ActualState.UploadStateId)
        MockManager.Verify()
        'End Using
    End Sub
    '''<summary>
    '''A test for Get(ByVal Integer)
    '''</summary>
    <TestMethod()> _
    Public Sub GetTest()
        Dim id As Integer = UploadFileHelper.CreateDummyUploadFile.Id  'TODO: Initialize to an appropriate value

        'Dim expected As UploadFile = Nothing
        Dim actual As UploadFile

        actual = NRC.DataLoader.Library.UploadFile.[Get](id)
        Assert.IsNotNull(actual)
        Assert.IsTrue(actual.UploadAction.FolderName <> String.Empty)

        'Assert.AreEqual(expected, actual, "NRC.DataLoader.Library.UploadFile.Get did not return the expected value.")
        'Assert.Inconclusive("Verify the correctness of this test method.")
    End Sub

    '''<summary>
    '''A test for GetFileTypeActionDisplayString(ByVal String)
    ''' When the upload action is "packages" the function should return comma separated package friendly names
    ''' When the upload action is "ProjectManagers" the function should return the project manager's full name.
    '''</summary>
    ''' <CreateBy>Arman Mnatsakanyan</CreateBy>
    ''' <RevisionList><list type="table"><listheader><term>Date Modified - Modified By</term><description>Description</description></listheader><item><term></term><description></description></item><item><term></term><description></description></item></list></RevisionList>
    <TestMethod()> _
    Public Sub GetFileTypeActionDisplayStringTest()
        MockManager.ClearAll()
        Dim target As UploadFile = UploadFileHelper.CreateDummyUploadFile()
        'verify that the PM last name is still the constant value that we assigned in CreateDummyUploadFile().
        Assert.AreEqual(target.ProjectManager.LastName, UploadFileHelper.FakeProjectManagerLastname)

        'verify that UploadFiletypeAction.name is still "Packages"
        Assert.IsTrue(target.UploadAction.UploadFileTypeAction.Name = UploadFileTypeAction.AvailableActions.Packages)

        'Build the expected comma separated list of package friendly names
        Dim seperator As String = ";" 'TODO: Initialize to an appropriate value
        Dim sb As New StringBuilder
        sb.AppendLine(UploadFileHelper.TestPackageFriendlyName & seperator)
        sb.AppendLine(UploadFileHelper.TestPackageFriendlyName & seperator)
        Dim expected As String = sb.ToString

        'Run the GetFileTypeActionDisplayStringTest() to get the actual value back
        Dim actual As String
        actual = target.GetFileTypeActionDisplayString(seperator)

        'verify that the expected and actual values are the same
        Assert.AreEqual(expected, actual, "NRC.DataLoader.Library.UploadFile.GetFileTypeActionDisplayString did not return t" & _
                "he expected value.")

        target.UploadAction.UploadFileTypeAction.Name = UploadFileTypeAction.AvailableActions.ProjectManagers

        Dim sb2 As New StringBuilder
        sb2.AppendLine(target.ProjectManager.FullName & ";")
        expected = sb2.ToString

        actual = target.GetFileTypeActionDisplayString(seperator)

        Assert.AreEqual(expected, actual)
    End Sub
#End Region
End Class
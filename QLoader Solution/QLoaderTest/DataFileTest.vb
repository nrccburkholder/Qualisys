'The following code was generated by Microsoft Visual Studio 2005.
'The test owner should check each test for validity.
Imports Microsoft.VisualStudio.TestTools.UnitTesting
Imports System
Imports System.Text
Imports System.Collections.Generic
Imports Nrc.Qualisys.QLoader.Library
Imports System.Data.SqlClient
Imports System.Data
Imports System.Transactions
Imports typemock

'''<summary>
'''This is a test class for Nrc.Qualisys.QLoader.Library.DataFile and is intended
'''to contain all Nrc.Qualisys.QLoader.Library.DataFile Unit Tests
'''</summary>
<TestClass()> _
Public Class DataFileTest
    'Private Const FakeUserMemberID As Integer = -1
    'Private Const FakeUserEmail As String = "fakeuser@nationalresearch.com"
    'Private Const FakeUserLoginName As String = "fakeUser"

    Private Const FakeCurrentUserMemberID As Integer = -2
    Private Const FakeCurrentUserLoginName As String = "amnatsakanyan"
    Private Const FakeCurrentUserEmail As String = "amnatsakanyan@nationalresearch.com"

    Private Const FakeOwnerLoginName As String = "FakeOwnerUsername""
    Private Const FakeOwnerEmail As String = "FakeOwner@nationalresearch.com"
    Private Const FakeGroupEmail As String = "LoadingTeamTest@nationalresearch.com"

    Private Const FakeOwnerMemberID As Integer = -3
    Private Const DummyPackageID As Integer = -1


    Private testContextInstance As TestContext

    Public Property NoOwner() As Boolean
        Get
            Return mNoOwner
        End Get
        Set(ByVal value As Boolean)
            mNoOwner = value
        End Set
    End Property
    '''<summary>
    '''Gets or sets the test context which provides
    '''information about and functionality for the current test run.
    '''</summary>
    Public Property TestContext() As TestContext
        Get
            Return testContextInstance
        End Get
        Set(ByVal value As TestContext)
            testContextInstance = value
        End Set
    End Property
    Private Shared scope As TransactionScope
#Region "Additional test attributes"
    '
    ' You can use the following additional attributes as you write your tests:
    '
    ' Use ClassInitialize to run code before running the first test in the class
    <ClassInitialize()> Public Shared Sub MyClassInitialize(ByVal testContext As TestContext)
        Nrc.NRCAuthLib.StaticConfig.NRCAuthConnection = Config.NrcAuthConnection
        Nrc.NRCAuthLib.StaticConfig.EnvironmentType = Nrc.NRCAuthLib.StaticConfig.Environment.Development
    End Sub
    '
    ' Use ClassCleanup to run code after all tests in a class have run
    ' <ClassCleanup()> Public Shared Sub MyClassCleanup()
    ' End Sub
    '
    ' Use TestInitialize to run code before running each test
    <TestInitialize()> Public Sub MyTestInitialize()
        'scope = New System.Transactions.TransactionScope(System.Transactions.TransactionScopeOption.RequiresNew, System.TimeSpan.FromMinutes(3))
    End Sub
    '
    ' Use TestCleanup to run code after each test has run
    <TestCleanup()> Public Sub MyTestCleanup()
        'scope.Dispose()
        CleanUp()
    End Sub
    '
    Private Sub CleanUp()
        MockManager.ClearAll()
    End Sub
#End Region
    '''<summary>
    '''A test for Approve(ByVal Nrc.Qualisys.QLoader.Library.User)
    ''' The approver is the package owner so Qloader shouldn't send an email
    '''</summary>
    <TestMethod()> _
    Public Sub ApproverIsOwner()
        NoOwner = False
        SetupExpectations()
        Dim lPackage As DTSPackage = GetDummyPackage()
        Dim target As DataFile = GetTestDataFile()
        Using r As New RecordExpectations
            'we can't really execute Apply() 
            'because of cross-database calls. So we'll mock the return value
            r.ExpectAndReturn(target.GetLastUserMemberID(), FakeOwnerMemberID).RepeatAlways().IgnoreArguments()
            r.ExpectAndReturn(target.FileState, DataFile.State.AwaitingFirstApproval)
            r.ExpectAndReturn(target.GetPackageByID(0), lPackage).RepeatAlways()
            target.ChangeState(DataFile.State.AwaitingFinalApproval, "", -1)
        End Using
        target.Approve(GetCurrentUser(FakeOwnerMemberID))
        Assert.IsTrue(target.LastMail Is Nothing OrElse target.LastMail.To.Count = 1)
        Assert.IsTrue(target.LastMail.To.Contains(New System.Net.Mail.MailAddress(FakeOwnerEmail)))
    End Sub
    ''' <summary>In this case the person approving the file is not the package owner.
    ''' Therefore after approval the library should send an email to the current user.</summary>
    <TestMethod()> _
    Public Sub ApproverIsNotPackageOwnerTest()
        NoOwner = False
        SetupExpectations()
        Dim lPackage As DTSPackage = GetDummyPackage()
        Dim target As DataFile = GetTestDataFile()
        Using r As New RecordExpectations
            'we can't really execute Apply() 
            'because of cross-database calls. So we'll mock the return value
            r.ExpectAndReturn(target.FileState, DataFile.State.AwaitingFirstApproval)
            r.ExpectAndReturn(target.GetPackageByID(0), lPackage).RepeatAlways()
            target.ChangeState(DataFile.State.AwaitingFinalApproval, "", -1)
        End Using
        'Tell DataFile that the approver is the current user, not the owner
        target.Approve(GetCurrentUser(FakeCurrentUserMemberID))
        Assert.IsTrue(target.LastMail Is Nothing OrElse target.LastMail.To.Count = 2)
        Assert.IsTrue(target.LastMail.To.Contains(New System.Net.Mail.MailAddress(FakeOwnerEmail)))
        Assert.IsTrue(target.LastMail.To.Contains(New System.Net.Mail.MailAddress(FakeCurrentUserEmail)))
    End Sub
    ''' <summary>If the file package has no owner assigned then 
    ''' it should notify the current user (who is doing the "apply").</summary>
    <TestMethod()> _
    Public Sub ApproveNoOwner()
        Me.NoOwner = True
        SetupExpectations()
        Dim lPackage As DTSPackage = DummyPackageNoOwner()
        Dim target As DataFile = GetTestDataFile()
        Using r As New RecordExpectations
            'we can't really execute Apply() 
            'because of cross-database calls. So we'll mock the return value
            r.ExpectAndReturn(target.FileState, DataFile.State.AwaitingFirstApproval)
            r.ExpectAndReturn(target.GetPackageByID(0), lPackage).RepeatAlways()
            target.ChangeState(DataFile.State.AwaitingFinalApproval, "", -1)
        End Using
        'Tell DataFile that the approver is the current user, not the owner
        target.Approve(GetCurrentUser(FakeCurrentUserMemberID))
        Assert.IsTrue(target.LastMail Is Nothing OrElse target.LastMail.To.Count = 2)
        Assert.IsTrue(target.LastMail.To.Contains(New System.Net.Mail.MailAddress(FakeCurrentUserEmail)))
        Assert.IsTrue(target.LastMail.To.Contains(New System.Net.Mail.MailAddress(Config.PackageOwnersEmailGroup)))
    End Sub
    ''' <summary></summary>
    <TestMethod()> _
    Public Sub ApplierIsOwner()
        NoOwner = False
        SetupExpectations()
        Dim lPackage As DTSPackage = GetDummyPackage()
        Dim target As DataFile = GetTestDataFile()
        Using r As New RecordExpectations
            'we can't really execute Apply() 
            'because of cross-database calls. So we'll mock the return value
            r.ExpectAndReturn(target.GetLastUserMemberID(), FakeOwnerMemberID).RepeatAlways().IgnoreArguments()
            r.ExpectAndReturn(target.FileState, DataFile.State.AwaitingApply)
            r.ExpectAndReturn(target.GetPackageByID(0), lPackage).RepeatAlways()

        End Using
        target.Apply()
        Assert.IsTrue(target.LastMail Is Nothing OrElse target.LastMail.To.Count = 1)
        Assert.IsTrue(target.LastMail.To.Contains(New System.Net.Mail.MailAddress(FakeOwnerEmail)))
    End Sub

    ''' <summary>DataFile.Apply() initiates a cross database transaction which is impossible to test.</summary>
    <TestMethod()> _
    Public Sub ApplierIsNotOwner()
        NoOwner = False
        SetupExpectations()
        Dim lPackage As DTSPackage = GetDummyPackage()
        Dim target As DataFile = GetTestDataFile()
        Using r As New RecordExpectations
            'we can't really execute Apply() 
            'because of cross-database calls. So we'll mock the return value
            r.ExpectAndReturn(target.GetLastUserMemberID(), FakeCurrentUserMemberID)
            r.ExpectAndReturn(target.FileState, DataFile.State.AwaitingApply)
            r.ExpectAndReturn(target.GetPackageByID(0), lPackage).RepeatAlways().IgnoreArguments()
        End Using

        target.Apply()
        Assert.IsTrue(target.LastMail Is Nothing OrElse target.LastMail.To.Count = 2)
        Assert.IsTrue(target.LastMail.To.Contains(New System.Net.Mail.MailAddress(FakeOwnerEmail)))
        Assert.IsTrue(target.LastMail.To.Contains(New System.Net.Mail.MailAddress(FakeCurrentUserEmail)))
    End Sub
    ''' <summary>Package doesn't have an owner so we should send it to the approver.</summary>
    <TestMethod()> _
    Public Sub ApplierNoOwner()
        NoOwner = True
        SetupExpectations()
        Dim target As DataFile = GetTestDataFile(True)
        Dim lPackage As DTSPackage = DummyPackageNoOwner
        Using r As New RecordExpectations
            'we can't really execute Apply() 
            'because of cross-database calls. So we'll mock the return value
            r.ExpectAndReturn(target.GetLastUserMemberID(), FakeCurrentUserMemberID)
            r.ExpectAndReturn(target.FileState, DataFile.State.AwaitingApply)
            r.ExpectAndReturn(target.GetPackageByID(0), lPackage).RepeatAlways().IgnoreArguments()
        End Using

        target.Apply()
        Assert.IsTrue(target.LastMail Is Nothing OrElse target.LastMail.To.Count = 2)
        Assert.IsTrue(target.LastMail.To.Contains(New System.Net.Mail.MailAddress(FakeCurrentUserEmail)))
        Assert.IsTrue(target.LastMail.To.Contains(New System.Net.Mail.MailAddress(Config.PackageOwnersEmailGroup)))

    End Sub
    ''' <summary>DataFile.Apply() initiates a cross database transaction which is impossible to test.</summary>
    <TestMethod()> _
    Public Sub DRGUpdaterIsNotOwner()
        NoOwner = False
        SetupExpectations()
        Dim lPackage As DTSPackage = GetDummyPackage()
        Dim target As DataFile = GetTestDataFile()
        Dim resulttable As DataTable = GetUpdateDRGResults()
        Using r As New RecordExpectations
            'we can't really execute Apply() 
            'because of cross-database calls. So we'll mock the return value
            r.ExpectAndReturn(target.GetLastUserMemberID(), FakeCurrentUserMemberID)
            r.ExpectAndReturn(target.FileState, DataFile.State.AwaitingApply)
            r.ExpectAndReturn(target.GetPackageByID(0), lPackage).RepeatAlways().IgnoreArguments()
            r.ExpectAndReturn(NRC.Qualisys.QLoader.Library.SqlProvider.PackageDB.UpdateDRG(0, 0), resulttable).RepeatAlways()
        End Using

        target.UpdateDRG()
        Assert.IsTrue(target.LastMail Is Nothing OrElse target.LastMail.To.Count = 2)
        Assert.IsTrue(target.LastMail.To.Contains(New System.Net.Mail.MailAddress(FakeOwnerEmail)))
        Assert.IsTrue(target.LastMail.To.Contains(New System.Net.Mail.MailAddress(FakeCurrentUserEmail)))
    End Sub
#Region "Helper methods"
    Private Function GetUpdateDRGResults() As DataTable
        Dim t As New DataTable("UpdateDrgResults")
        t.Columns.Add("RecordType", GetType(String))
        t.Columns.Add("RecordsValue", GetType(String))
        't.Rows.Add("Test record type", "Test DrgUpdate result Record Value")
        Return t
    End Function
    Private ReadOnly Property DummyPackageNoOwner() As DTSPackage
        Get
            Using r As New RecordExpectations
                'Dim OwnerStudy As Study = TestStudy
                Dim mDummyPackageNoOwner As DTSPackage = RecorderManager.CreateMockedObject(Of DTSPackage)()
                r.ExpectAndReturn(mDummyPackageNoOwner.PackageID, 1).RepeatAlways()
                r.ExpectAndReturn(mDummyPackageNoOwner.PackageName, "Test Package Name").RepeatAlways()
                r.ExpectAndReturn(mDummyPackageNoOwner.PackageFriendlyName, "Test Package Friendly Name").RepeatAlways()
                r.ExpectAndReturn(mDummyPackageNoOwner.OwnerName, "").RepeatAlways()
                r.ExpectAndReturn(mDummyPackageNoOwner.OwnerMemberID, Nothing).RepeatAlways()
                r.ExpectAndReturn(mDummyPackageNoOwner.Study.StudyName, "TestStudy").RepeatAlways()
                r.ExpectAndReturn(mDummyPackageNoOwner.Study.ClientID, 1).RepeatAlways()
                r.ExpectAndReturn(mDummyPackageNoOwner.Study.StudyID, 1).RepeatAlways()
                r.ExpectAndReturn(mDummyPackageNoOwner.Study.ClientName, "TestClient Name").RepeatAlways()
                r.ExpectAndReturn(mDummyPackageNoOwner.Source, Nothing).RepeatAlways()
                r.ExpectAndReturn(mDummyPackageNoOwner.LockStatus, DTSPackage.LockState.Unlocked).RepeatAlways()
                Return mDummyPackageNoOwner
            End Using
        End Get
    End Property
    Private Function GetDummyPackage() As DTSPackage
        Using r As New RecordExpectations()
            Dim mDummyPackage As DTSPackage = RecorderManager.CreateMockedObject(Of DTSPackage)()
            r.MockAllInstances = True
            r.ExpectAndReturn(mDummyPackage.PackageID, 1).RepeatAlways()
            r.ExpectAndReturn(mDummyPackage.PackageName, "Test Package Name").RepeatAlways()
            r.ExpectAndReturn(mDummyPackage.PackageFriendlyName, "Test Package Friendly Name").RepeatAlways()
            r.ExpectAndReturn(mDummyPackage.OwnerName, "Test Owner").RepeatAlways()
            r.ExpectAndReturn(mDummyPackage.OwnerMemberID, FakeOwnerMemberID).RepeatAlways()
            r.ExpectAndReturn(mDummyPackage.Study.StudyName, "TestStudy").RepeatAlways()
            r.ExpectAndReturn(mDummyPackage.Study.ClientID, 1).RepeatAlways()
            r.ExpectAndReturn(mDummyPackage.Study.StudyID, 1).RepeatAlways()
            r.ExpectAndReturn(mDummyPackage.Study.ClientName, "TestClient Name").RepeatAlways()
            r.ExpectAndReturn(mDummyPackage.Source, Nothing).RepeatAlways()
            r.ExpectAndReturn(mDummyPackage.LockStatus, DTSPackage.LockState.Unlocked).RepeatAlways()
            Return mDummyPackage
        End Using
    End Function
    Private Function GetCurrentUser(ByVal memberid As Integer) As User
        Dim CurUser As User
        Using r As New RecordExpectations
            CurUser = RecorderManager.CreateMockedObject(Of User)()
            r.ExpectAndReturn(CurUser.MemberId, memberid).RepeatAlways()
        End Using
        Return CurUser
    End Function

    Private Function GetTestDataFile(Optional ByVal noowner As Boolean = False) As DataFile
        ' TODO: Add test logic here

        Return Nothing
    End Function
    Dim mNoOwner As Boolean = False

    Private Sub SetupExpectations()
        Dim MockedClass As Mock = MockManager.Mock(Of DataFile)()
        MockedClass.AssignField("mGroupList", "100")
        Dim file As New DataFile
        'trans, mPackageID, mVersion, mDataSetType, mFolder, mOriginalFileName, mFileName, mFileSize, mRecordCount, mIsDRGUpdate
        file.DataSetType = DataSetType.Text
        file.Folder = "..\"
        file.OriginalFileName = "testData.txt"
        file.FileName = "testData.txt"
        file.FileSize = 5222
        file.RecordCount = 50
        file.IsDRGUpdate = False
        Dim PackageID As Integer = DummyPackageID
        Dim state As DataFile.State = DataFile.State.AwaitingFirstApproval
        Dim pkg As DTSPackage
        If NoOwner Then
            pkg = DummyPackageNoOwner
        Else
            pkg = GetDummyPackage()
        End If
        Using r As New RecordExpectations
            r.ExpectAndReturn(file.PackageID, PackageID).RepeatAlways()
            r.ExpectAndReturn(file.GetPackageByID(0), pkg).RepeatAlways().IgnoreArguments()
            r.ExpectAndReturn(GetTestDataFile(), file).RepeatAlways()

            Dim fakeOwner As Nrc.NRCAuthLib.Member = RecorderManager.CreateMockedObject(Of Nrc.NRCAuthLib.Member)()
            Dim fakeCurrentUser As Nrc.NRCAuthLib.Member = RecorderManager.CreateMockedObject(Of Nrc.NRCAuthLib.Member)()

            r.ExpectAndReturn(fakeCurrentUser.UserName, FakeCurrentUserLoginName).RepeatAlways()
            r.ExpectAndReturn(fakeCurrentUser.MemberId, FakeCurrentUserMemberID).RepeatAlways()
            r.ExpectAndReturn(fakeCurrentUser.EmailAddress, FakeCurrentUserEmail).RepeatAlways()

            r.ExpectAndReturn(fakeOwner.EmailAddress, FakeOwnerEmail).RepeatAlways()
            r.ExpectAndReturn(fakeOwner.MemberId, FakeOwnerMemberID).RepeatAlways()
            r.ExpectAndReturn(fakeOwner.UserName, FakeOwnerLoginName).RepeatAlways()

            r.ExpectAndReturn(Nrc.NRCAuthLib.Member.GetMember(""), fakeOwner).RepeatAlways().WhenArgumentsMatch(FakeOwnerMemberID)
            r.ExpectAndReturn(Nrc.NRCAuthLib.Member.GetMember(""), fakeOwner).RepeatAlways().WhenArgumentsMatch(FakeOwnerLoginName)

            r.ExpectAndReturn(Nrc.NRCAuthLib.Member.GetMember(""), fakeCurrentUser).RepeatAlways().WhenArgumentsMatch(FakeCurrentUserMemberID)
            r.ExpectAndReturn(Nrc.NRCAuthLib.Member.GetMember(""), fakeCurrentUser).RepeatAlways().WhenArgumentsMatch(FakeCurrentUserLoginName)
            r.ExpectAndReturn(AppConfig.EnvironmentType, Nrc.Framework.Configuration.EnvironmentType.Production)
            Nrc.Qualisys.QLoader.Library.SqlProvider.PackageDB.ApplyFile(0)
            r.MockAllInstances = True
            Dim package As New DTSPackage(DummyPackageID)
            r.Return(pkg).RepeatAlways()
        End Using
    End Sub

#End Region
End Class

'The following code was generated by Microsoft Visual Studio 2005.
'Edited By Arman Mnatsakanyan
'This File contains tests for ExportFileLogTest BO data access functionality
'The tests assume that the test database contains some valid test records
'There should be a valid ExportGroup record with ExportGroupID = 1
'I am actually testing the data access so no need for mockups

Imports Microsoft.VisualStudio.TestTools.UnitTesting
Imports System
Imports System.Text
Imports System.Collections.Generic
Imports TestExportGroup
Imports Nrc.SurveyPoint.Library



'''<summary>
'''This is a test class for Nrc.SurveyPoint.Library.ExportFileLog and is intended
'''to contain all Nrc.SurveyPoint.Library.ExportFileLog Unit Tests
'''</summary>
<TestClass()> _
Public Class ExportFileLogTest


    Private testContextInstance As TestContext
    Private Const mStartDate As Date = #1/1/2008#
    Private Const mEndDate As Date = #1/20/2008#
    Public Shared ReadOnly Property StartDate() As Date
        Get
            Return mStartDate
        End Get
    End Property
    Public Shared ReadOnly Property EndDate() As Date
        Get
            Return mEndDate
        End Get
    End Property
    Public Shared ReadOnly Property TestExportGroupID() As Integer
        Get
            Return 1
        End Get
    End Property
    '''<summary>
    '''Gets or sets the test context which provides
    '''information about and functionality for the current test run.
    '''</summary>
    Public Property TestContext() As TestContext
        Get
            Return testContextInstance
        End Get
        Set(ByVal value As TestContext)
            testContextInstance = value
        End Set
    End Property
#Region "Additional test attributes"
    '
    'You can use the following additional attributes as you write your tests:
    '
    'Use ClassInitialize to run code before running the first test in the class
    '
    '<ClassInitialize()>  _
    'Public Shared Sub MyClassInitialize(ByVal testContext As TestContext)
    'End Sub
    '
    'Use ClassCleanup to run code after all tests in a class have run
    '
    '<ClassCleanup()>  _
    'Public Shared Sub MyClassCleanup()
    'End Sub
    '
    'Use TestInitialize to run code before running each test
    '
    '<TestInitialize()>  _
    'Public Sub MyTestInitialize()
    'End Sub
    '
    'Use TestCleanup to run code after each test has run
    '
    '<TestCleanup()>  _
    'Public Sub MyTestCleanup()
    'End Sub
    '
#End Region
    '''<summary>
    '''A test for CreateNew()
    '''</summary>
    <DeploymentItem("Nrc.SurveyPoint.Library.dll"), _
     TestMethod()> _
    Public Sub ExportFileLogCreateNewTest()
        Dim target As ExportFileLog = ExportFileLog.NewExportFileLog()
        Assert.IsNotNull(target, "Failed to create a new ExportFileLog object")
    End Sub

    ''' <summary>A test for CreateNew()</summary>
    ''' <CreateBy>Arman Mnatsakanyan</CreateBy>
    ''' <RevisionList><list type="table">
    ''' <listheader>
    ''' <term>Date Modified - Modified By</term>
    ''' <description>Description</description></listheader>
    ''' <item>
    ''' <term>	</term>
    ''' <description>
    ''' <para></para></description></item>
    ''' <item>
    ''' <term>	</term>
    ''' <description>
    ''' <para></para></description></item></list></RevisionList>
    <DeploymentItem("Nrc.SurveyPoint.Library.dll"), _
     TestMethod()> _
    Public Sub ExportFileLogInsertTest()
        Dim LogObject As ExportFileLog = CreateDummyExportFileLog()
        Try
            LogObject.Save()
            Assert.IsNotNull(ExportFileLog.Get(LogObject.ExportLogFileID), "Failed to save the dummy record")

            Dim SavedID As Integer = LogObject.ExportLogFileID
            Dim ExpectedLog As ExportFileLog = ExportFileLog.Get(SavedID)
            Assert.IsNotNull(ExpectedLog)
            Assert.AreEqual(SavedID, ExportFileLog.Get(SavedID).ExportLogFileID)
        Catch
            If Not LogObject.IsDirty Then
                ExportFileLog.DeleteFileLog(LogObject)
                LogObject.Save()
            End If
        End Try
    End Sub

    ''' <summary>The ExportFileLog.Save() must fail if the ExportGroupID is invalid
    ''' because of the foreign key constraint in the corresponding table.</summary>
    ''' <CreateBy>Arman Mnatsakanyan</CreateBy>
    ''' <RevisionList><list type="table">
    ''' <listheader>
    ''' <term>Date Modified - Modified By</term>
    ''' <description>Description</description></listheader>
    ''' <item>
    ''' <term>	</term>
    ''' <description>
    ''' <para></para></description></item>
    ''' <item>
    ''' <term>	</term>
    ''' <description>
    ''' <para></para></description></item></list></RevisionList>
    <TestMethod()> _
    <ExpectedException(GetType(Nrc.Framework.Data.SqlCommandException))> _
    Public Sub SaveInvalidExportFileLogTest()
        Dim target As ExportFileLog = CreateDummyExportFileLog()
        target.ExportGroupID = 0
        target.Save()
    End Sub

    ''' <summary>   A test for DeleteExportFileLog()</summary>
    ''' <CreateBy>Arman Mnatsakanyan</CreateBy>
    ''' <RevisionList><list type="table">
    ''' <listheader>
    ''' <term>Date Modified - Modified By</term>
    ''' <description>Description</description></listheader>
    ''' <item>
    ''' <term>	</term>
    ''' <description>
    ''' <para></para></description></item>
    ''' <item>
    ''' <term>	</term>
    ''' <description>
    ''' <para></para></description></item></list></RevisionList>
    <DeploymentItem("Nrc.SurveyPoint.Library.dll"), _
     TestMethod()> _
    Public Sub DeleteExportFileLog()
        Dim target As ExportFileLog = CreateDummyExportFileLog()
        target.Save()
        Dim SavedID As Integer = target.ExportLogFileID
        'Make sure we actually saved the dummy record
        Assert.IsNotNull(ExportFileLog.Get(SavedID))

        'Now Delete the saved dummy record and make sure it is deleted successfully
        ExportFileLog.DeleteFileLog(target)
        Assert.IsNull(ExportFileLog.Get(SavedID))
    End Sub

    ''' <summary>A test for Get(ByVal ExportLogID as Integer)</summary>
    ''' <CreateBy>Arman Mnatsakanyan</CreateBy>
    ''' <RevisionList><list type="table">
    ''' <listheader>
    ''' <term>Date Modified - Modified By</term>
    ''' <description>Description</description></listheader>
    ''' <item>
    ''' <term>	</term>
    ''' <description>
    ''' <para></para></description></item>
    ''' <item>
    ''' <term>	</term>
    ''' <description>
    ''' <para></para></description></item></list></RevisionList>
    <TestMethod()> _
    Public Sub GetExportFileLogTest()
        Dim target As ExportFileLog = CreateDummyExportFileLog()
        target.Save()

        Dim SavedID As Integer = target.ExportLogFileID

        Dim expected As ExportFileLog = target
        Dim actual As ExportFileLog = ExportFileLog.Get(SavedID)
        Assert.IsNotNull(expected)
        Assert.IsNotNull(actual)
        Assert.AreEqual(expected.ExportLogFileID, actual.ExportLogFileID, "Nrc.SurveyPoint.Library.ExportFileLog.Get did not return the expected value.")
    End Sub
    '''<summary>
    '''A test for GetByExportLogFileID(ByVal Integer)
    '''</summary>
    <TestMethod()> _
    Public Sub GetByExportLogFileIDTest()
        Dim EGC As ExportGroupCollection = ExportGroupTest.AddExportGroupRecord(1)
        Assert.AreEqual(1, EGC.Count)


        Dim ExportGroupID As Integer = EGC(0).ExportGroupID

        Dim expected As ExportFileLogCollection = CreateDummyLogAndSave(10, ExportGroupID)
        Dim actual As ExportFileLogCollection
        actual = Nrc.SurveyPoint.Library.ExportFileLog.GetByExportGroupID(ExportGroupID, mStartDate, mEndDate)
        CollectionAssert.AreEqual(expected, actual, "Nrc.SurveyPoint.Library.ExportFileLog.GetByExportLogFileID did not return the exp" & _
                "ected value.")

        'Clean up
        ExportGroupTest.deletenewrecords(EGC)
        DeleteLogs(expected)

        Assert.IsTrue(ExportFileLog.GetByExportGroupID(ExportGroupID, mStartDate, mEndDate).Count = 0)
    End Sub

    '''<summary>
    '''A test for GetAll()
    '''</summary>
    <TestMethod()> _
    Public Sub GetAllExportFileLogsTest()
        Dim expected As ExportFileLogCollection = Nothing
        Dim allLogs As ExportFileLogCollection = ExportFileLog.GetAll(mStartDate, mEndDate)
        Dim initialCount As Integer = allLogs.Count

        Dim NewLogs As ExportFileLogCollection = CreateDummyLogAndSave(5)

        Dim actualCount As Integer = ExportFileLog.GetAll(mStartDate, mEndDate).Count
        Dim ExpectedCount As Integer = initialCount + 5

        Assert.AreEqual(ExpectedCount, actualCount, "Nrc.SurveyPoint.Library.ExportFileLog.GetAll did not return the expected value.")
        'Clean up
        DeleteLogs(NewLogs)

        'Make sure that we actually cleaned it up
        actualCount = ExportFileLog.GetAll(mStartDate, mEndDate).Count
        Assert.AreEqual(initialCount, actualCount)

    End Sub

    Public Shared Sub DeleteLogs(ByVal logCollection As ExportFileLogCollection)
        While logCollection.Count > 0
            logCollection.RemoveAt(0)
        End While
        logCollection.Save()
    End Sub

    Public Shared Function CreateDummyExportFileLog(Optional ByVal StartDate As Date = mStartDate, Optional ByVal EndDate As Date = mEndDate) As ExportFileLog
        Dim target As ExportFileLog = ExportFileLog.NewExportFileLog()
        Assert.IsNotNull(target, "Failed to create a new ExportFileLog object")
        target.AnswerFileRecordsExported = 10
        target.EndDate = EndDate
        target.StartDate = StartDate
        target.QuestionFileRecordsExported = 5
        target.MarkSubmitted = 1
        target.StackTrace = "Test Stack trace"
        target.UserID = 1
        target.ExportGroupID = TestExportGroupID
        Return target
    End Function
    Public Shared Function CreateDummyLogAndSave(ByVal count As Integer, Optional ByVal ExportGroupID As Integer = Integer.MinValue, Optional ByVal StartDate As Date = mStartDate, Optional ByVal EndDate As Date = mEndDate) As ExportFileLogCollection
        Dim log As ExportFileLog
        Dim logCollection As New ExportFileLogCollection

        For I As Integer = 1 To count
            log = CreateDummyExportFileLog(StartDate, EndDate)
            If ExportGroupID <> Integer.MinValue Then log.ExportGroupID = ExportGroupID
            log.Save()
            logCollection.Add(log)
        Next
        Return logCollection
    End Function

End Class

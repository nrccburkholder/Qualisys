'The following code was generated by Microsoft Visual Studio 2005.
'The test owner should check each test for validity.
Imports Microsoft.VisualStudio.TestTools.UnitTesting
Imports System
Imports System.Text
Imports System.Collections.Generic
Imports Nrc.SurveyPoint.Library
Imports Nrc.SurveyPointUtilities
Imports TestExportGroup



''' <summary> This is a test class for
''' Nrc.SurveyPointUtilities.ExportConfigurationSectionController and is intended to
''' contain all Nrc.SurveyPointUtilities.ExportConfigurationSectionController Unit
''' Tests</summary>
''' <CreateBy>Arman Mnatsakanyan</CreateBy>
''' <RevisionList><list type="table">
''' <listheader>
''' <term>Date Modified - Modified By</term>
''' <description>Description</description></listheader>
''' <item>
''' <term>	</term>
''' <description>
''' <para></para></description></item>
''' <item>
''' <term>	</term>
''' <description>
''' <para></para></description></item></list></RevisionList>
<TestClass()> _
Public Class ExportConfigurationSectionControllerTest
    Private testContextInstance As TestContext
    Const SampleExportGroupID As Integer = 1
    Private c As ExportConfigurationSectionController = New ExportConfigurationSectionController()
    Private mExportGroupIsLoaded As Boolean = False
    '''<summary>
    '''Gets or sets the test context which provides
    '''information about and functionality for the current test run.
    '''</summary>
    Public Property TestContext() As TestContext
        Get
            Return testContextInstance
        End Get
        Set(ByVal value As TestContext)
            testContextInstance = value
        End Set
    End Property
#Region "Additional test attributes"
    '
    'You can use the following additional attributes as you write your tests:
    '
    'Use ClassInitialize to run code before running the first test in the class
    '
    <ClassInitialize()> _
    Public Shared Sub MyClassInitialize(ByVal testContext As TestContext)
    End Sub
    '
    'Use ClassCleanup to run code after all tests in a class have run
    '
    '<ClassCleanup()>  _
    'Public Shared Sub MyClassCleanup()
    'End Sub
    '
    'Use TestInitialize to run code before running each test
    '
    '<TestInitialize()>  _
    'Public Sub MyTestInitialize()
    'End Sub
    '
    'Use TestCleanup to run code after each test has run
    '
    '<TestCleanup()>  _
    'Public Sub MyTestCleanup()
    'End Sub
    '
#End Region


    '''<summary>
    '''A test for LoadExportGroup(ByVal Integer)
    '''</summary>
    <TestMethod()> _
    Public Sub LoadExportGroupTest()
        c.LoadExportGroup(SampleExportGroupID)
        Assert.IsNotNull(c.ExportGroup, "Failed to Load ExportGroup object with ID " & SampleExportGroupID.ToString)
        Assert.IsFalse(c.ExportGroup.IsNew)
        Me.mExportGroupIsLoaded = True
    End Sub

    '''<summary>
    '''A test for MoveFromExcludedEvents(ByVal Nrc.SurveyPoint.Library.ExportEventSelectedCollection)
    '''</summary>
    <TestMethod()> _
    Public Sub MoveFromExcludedEventsTest()
        c.LoadExportGroup(SampleExportGroupID)
        Assert.IsTrue(c.AvailableEvents.Count > 0)

        Dim SelectedEvents As ExportEventSelectedCollection = New ExportEventSelectedCollection

        'select an event to the excluded list
        Dim tempAvailableEventCollection As New ExportEventAvailableCollection
        tempAvailableEventCollection.Add(c.AvailableEvents(0))
        c.MoveToExcludedEvents(tempAvailableEventCollection)
        Assert.IsTrue(c.ExcludedEvents.Count > 0)

        Dim FirstExcludedEvent As ExportEventSelected = c.ExcludedEvents(0)

        Assert.IsFalse(FindInAvailableEvents(FirstExcludedEvent.EventID))

        SelectedEvents.Add(FirstExcludedEvent)
        c.MoveFromExcludedEvents(SelectedEvents)
        Assert.IsTrue(FindInAvailableEvents(FirstExcludedEvent.EventID))
    End Sub
    ''' <summary> Finds an event by its ID in AvailableEvents</summary>
    ''' <remarks>Helper function</remarks>
    ''' <param name="EventID">The EventID to find</param>
    ''' <returns>True if found</returns>
    Private Function FindInAvailableEvents(ByVal EventID As Integer) As Boolean
        For Each AvailableEvent As ExportEventAvailable In c.AvailableEvents
            If EventID = AvailableEvent.EventID Then
                Return True
            End If
        Next
        Return False
    End Function

    ''' <summary>A helper function that checks if the given id matches to one of the
    ''' ExcludedEvents in the controller class</summary>
    ''' <param name="EventID"></param>
    ''' <returns>True if the ID found</returns>
    ''' <CreateBy>Arman Mnatsakanyan</CreateBy>
    ''' <RevisionList><list type="table">
    ''' <listheader>
    ''' <term>Date Modified - Modified By</term>
    ''' <description>Description</description></listheader>
    ''' <item>
    ''' <term>	</term>
    ''' <description>
    ''' <para></para></description></item>
    ''' <item>
    ''' <term>	</term>
    ''' <description>
    ''' <para></para></description></item></list></RevisionList>
    Private Function FindInExcludedEvents(ByVal EventID As Integer) As Boolean
        For Each ExcludedEvent As ExportEventSelected In c.ExcludedEvents
            If EventID = ExcludedEvent.EventID Then
                Return True
            End If
        Next
        Return False
    End Function
    ''' <summary> A helper function to find an in included events saved in the
    ''' controller.</summary>
    ''' <param name="EventID"></param>
    ''' <returns>True if the ID found</returns>
    ''' <CreateBy>Arman Mnatsakanyan</CreateBy>
    ''' <RevisionList><list type="table">
    ''' <listheader>
    ''' <term>Date Modified - Modified By</term>
    ''' <description>Description</description></listheader>
    ''' <item>
    ''' <term>	</term>
    ''' <description>
    ''' <para></para></description></item>
    ''' <item>
    ''' <term>	</term>
    ''' <description>
    ''' <para></para></description></item></list></RevisionList>
    Private Function FindInIncludedEvents(ByVal EventID As Integer) As Boolean
        For Each IncludedEvent As ExportEventSelected In c.IncludedEvents
            If EventID = IncludedEvent.EventID Then
                Return True
            End If
        Next
        Return False
    End Function
    '''<summary>
    '''A test for MoveFromIncludedEvents(ByVal Nrc.SurveyPoint.Library.ExportEventSelectedCollection)
    '''</summary>
    <TestMethod()> _
    Public Sub MoveFromIncludedEventsTest()
        c.LoadExportGroup(SampleExportGroupID)

        Dim SelectedEvents As ExportEventSelectedCollection = New ExportEventSelectedCollection
        Dim FirstIncludedEvent As ExportEventSelected = c.IncludedEvents(0)
        Assert.IsFalse(FindInAvailableEvents(FirstIncludedEvent.EventID))

        SelectedEvents.Add(FirstIncludedEvent)
        c.MoveFromIncludedEvents(SelectedEvents)
        Assert.IsTrue(FindInAvailableEvents(FirstIncludedEvent.EventID))
    End Sub

    ''' <summary> A test for MoveToAvailableClients(ByVal
    ''' System.Collections.Generic.List(Of Integer))</summary>
    <TestMethod()> _
    Public Sub MoveToAvailableClientsTest()
        c.LoadExportGroup(SampleExportGroupID)
        Dim Before_SelectedClientCount As Integer = c.SelectedClients.Count
        Dim Before_AvailableClientsCount As Integer = c.AvailableClients.Count
        Assert.IsTrue(Before_SelectedClientCount > 0)


        Dim clientIDs As List(Of Integer) = GetSelectedClientIDs(c)
        c.MoveToAvailableClients(clientIDs)
        Assert.IsTrue(c.SelectedClients.Count = 0)
        Assert.IsTrue(c.AvailableClients.Count = Before_SelectedClientCount + Before_AvailableClientsCount)

    End Sub
    Private Function GetSelectedClientIDs(ByVal c As ExportConfigurationSectionController) As List(Of Integer)
        Dim IDList As New List(Of Integer)
        For Each client As ExportClientSelected In c.SelectedClients
            IDList.Add(client.ClientID)
        Next
        Return IDList
    End Function
    Private Function GetAvailableClientIDs(ByVal c As ExportConfigurationSectionController) As List(Of Integer)
        Dim IDList As New List(Of Integer)
        For Each client As ExportClientAvailable In c.AvailableClients
            IDList.Add(client.ClientID)
        Next
        Return IDList
    End Function
    Private Function GetSelectedScriptIDs(ByVal c As ExportConfigurationSectionController) As List(Of Integer)
        Dim IDList As New List(Of Integer)
        For Each Script As ExportScriptSelected In c.SelectedScripts
            IDList.Add(Script.ScriptID)
        Next
        Return IDList
    End Function
    Private Function GetAvailableScriptIDs(ByVal c As ExportConfigurationSectionController) As List(Of Integer)
        Dim IDList As New List(Of Integer)
        For Each Script As ExportScriptAvailable In c.AvailableScripts
            IDList.Add(Script.ScriptID)
        Next
        Return IDList
    End Function

    '''<summary>
    '''A test for MoveToAvailableScripts(ByVal System.Collections.Generic.List(Of Integer))
    '''</summary>
    <TestMethod()> _
    Public Sub MoveToAvailableScriptsTest()
        c.LoadExportGroup(SampleExportGroupID)

        'Now select a bunch of clients to get some available scripts
        Dim AvailableClientCount As Integer = c.AvailableClients.Count
        Dim IDs As New List(Of Integer)
        For I As Integer = 0 To AvailableClientCount - 1
            IDs.Add(c.AvailableClients(I).ClientID)
        Next
        c.MoveToSelectedClients(IDs)

        'Select some scripts
        Assert.IsTrue(GetAvailableScriptIDs(c).Count > 1)
        c.MoveToSelectedScripts(GetAvailableScriptIDs(c))


        Dim scriptIDs As List(Of Integer) = GetSelectedScriptIDs(c)
        Dim BeforeMove_ScriptCount As Integer = scriptIDs.Count
        Dim BeforeMove_AvailableScriptCount As Integer = c.AvailableScripts.Count
        Assert.IsTrue(BeforeMove_ScriptCount > 0)

        'now move the Selected scripts back to AvailableScripts 
        'and check if the count of Available Scripts changed appropriately
        c.MoveToAvailableScripts(scriptIDs)

        Assert.IsTrue(GetSelectedScriptIDs(c).Count = 0)
        Assert.IsTrue(c.AvailableScripts.Count = BeforeMove_ScriptCount + BeforeMove_AvailableScriptCount, "Failed to move selected scripts to the available script list")
    End Sub

    '''<summary>
    '''A test for MoveToExcludedEvents(ByVal Nrc.SurveyPoint.Library.ExportEventAvailableCollection)
    '''</summary>
    <TestMethod()> _
    Public Sub MoveToExcludedEventsTest()
        c.LoadExportGroup(SampleExportGroupID)

        Dim SelectedEvents As ExportEventAvailableCollection = New ExportEventAvailableCollection
        Assert.IsTrue(c.AvailableEvents.Count > 0, "There should be at least one available event in the test data. Found none")
        Dim EventToExclude As ExportEventAvailable = c.AvailableEvents(0)
        Assert.IsNotNull(EventToExclude)
        SelectedEvents.Add(EventToExclude)

        c.MoveToExcludedEvents(SelectedEvents)
        Assert.IsTrue(FindInExcludedEvents(EventToExclude.EventID))
        Assert.IsFalse(FindInIncludedEvents(EventToExclude.EventID))
        Assert.IsFalse(FindInAvailableEvents(EventToExclude.EventID))
    End Sub

    '''<summary>
    '''A test for MoveToIncludedEvents(ByVal Nrc.SurveyPoint.Library.ExportEventAvailableCollection)
    '''</summary>
    <TestMethod()> _
    Public Sub MoveToIncludedEventsTest()
        c.LoadExportGroup(SampleExportGroupID)

        Dim SelectedEvents As ExportEventAvailableCollection = New ExportEventAvailableCollection
        Assert.IsTrue(c.AvailableEvents.Count > 0, "There should be at least one available event in the test data. Found none")
        Dim EventToInclude As ExportEventAvailable = c.AvailableEvents(0)
        Assert.IsNotNull(EventToInclude)
        SelectedEvents.Add(EventToInclude)

        c.MoveToIncludedEvents(SelectedEvents)

        'check to see if it is in the right list and doesn't have a duplicate in the other lists
        Assert.IsTrue(FindInIncludedEvents(EventToInclude.EventID))
        Assert.IsFalse(FindInExcludedEvents(EventToInclude.EventID))
        Assert.IsFalse(FindInAvailableEvents(EventToInclude.EventID))
    End Sub

    '''<summary>
    '''A test for MoveToSelectedClients(ByVal System.Collections.Generic.List(Of Integer))
    '''</summary>
    <TestMethod()> _
    Public Sub MoveToSelectedClientsTest()
        c.LoadExportGroup(SampleExportGroupID)
        Dim Before_SelectedClientCount As Integer = c.SelectedClients.Count
        Dim Before_AvailableClientsCount As Integer = c.AvailableClients.Count
        Assert.IsTrue(Before_AvailableClientsCount > 0)

        Dim clientIDs As List(Of Integer) = GetAvailableClientIDs(c)
        c.MoveToSelectedClients(clientIDs)
        Assert.IsTrue(c.AvailableClients.Count = 0)
        Assert.IsTrue(c.SelectedClients.Count = Before_SelectedClientCount + Before_AvailableClientsCount)
    End Sub

    '''<summary>
    '''A test for MoveToSelectedScripts(ByVal System.Collections.Generic.List(Of Integer))
    '''</summary>
    <TestMethod()> _
    Public Sub MoveToSelectedScriptsTest()
        c.LoadExportGroup(SampleExportGroupID)

        'Now select a bunch of clients to get some available scripts
        Dim AvailableClientCount As Integer = c.AvailableClients.Count
        Dim IDs As New List(Of Integer)
        For I As Integer = 0 To AvailableClientCount - 1
            IDs.Add(c.AvailableClients(I).ClientID)
        Next
        c.MoveToSelectedClients(IDs)

        'Select some scripts
        Dim AvailableScriptIDs As List(Of Integer) = GetAvailableScriptIDs(c)
        Dim BeforeMove_AvailableScriptCount As Integer = AvailableScriptIDs.Count
        Dim BeforeMove_SelectedScriptCount As Integer = c.SelectedScripts.Count
        Assert.IsTrue(BeforeMove_AvailableScriptCount > 0)


        'now move the Selected scripts back to AvailableScripts 
        'and check if the count of Available Scripts changed appropriately
        c.MoveToSelectedScripts(AvailableScriptIDs)

        Assert.IsTrue(c.AvailableScripts.Count = 0)
        Assert.IsTrue(c.SelectedScripts.Count = BeforeMove_SelectedScriptCount + BeforeMove_AvailableScriptCount, "Failed to move available scripts to the selected script list")
    End Sub


    '''<summary>
    '''A test for NewExportGroup()
    '''</summary>
    <TestMethod()> _
    Public Sub NewExportGroupTest()
        Dim target As ExportConfigurationSectionController = New ExportConfigurationSectionController
        target.NewExportGroup()
        Assert.IsNotNull(target, "Failed to create a new ExportGroup object")
        Assert.IsTrue(target.ExportGroup.IsNew, "ExportGroup.IsNew is false on a new object")
    End Sub

End Class

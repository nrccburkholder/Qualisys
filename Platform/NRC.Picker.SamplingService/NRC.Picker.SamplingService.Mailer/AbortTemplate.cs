// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version: 11.0.0.0
//  
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------
namespace NRC.Picker.SamplingService.Mailer
{
    using System.Linq;
    using System.IO;
    using NRC.Picker.SamplingService.Store.Models;
    using Nrc.QualiSys.Library;
    using System;
    
    /// <summary>
    /// Class to produce the template output
    /// </summary>
    
    #line 1 "C:\TFS13GIT\Qualisys\Platform\NRC.Picker.SamplingService\NRC.Picker.SamplingService.Mailer\AbortTemplate.tt"
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "11.0.0.0")]
    public partial class AbortTemplate : AbortTemplateBase
    {
#line hidden
        /// <summary>
        /// Create the template output
        /// </summary>
        public virtual string TransformText()
        {
            this.Write("\r\n");
            this.Write("\r\n");
            this.Write("\r\n");
            this.Write("\r\n");
            this.Write("\r\n");
            this.Write("\r\n\r\n<html>\r\n<head>\r\n<style type=\"text/css\">\r\n");
            this.Write(@"body
{
    font-family: sans-serif;
}
h1
{
    font-size: 20px;
}
h2
{
    font-size: 17px;
}
h3
{
    font-size: 15px;
}
table
{
    width: 1000px;
    border: solid 1px black;
    font-size: 13px;
}
th, td
{
    border: solid 1px black;
    padding: 3px;
    text-align: center;
}
.field
{
    width: 120px;
}

.alert
{
    font-weight: bold;
    color: red;
}
");
            this.Write("\r\n</style>\r\n</head>\r\n<body>\r\n<center>\r\n<h1 class=\"alert\">ERROR: Sampling Service " +
                    "encountered a fatal error during sampling.</h1>\r\n<h2>Please contact the Autosamp" +
                    "ling administrator for resolution.</h2>\r\n<p>");
            
            #line 31 "C:\TFS13GIT\Qualisys\Platform\NRC.Picker.SamplingService\NRC.Picker.SamplingService.Mailer\AbortTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(exception.Message.ToString()));
            
            #line default
            #line hidden
            this.Write("</p>\r\n");
            
            #line 32 "C:\TFS13GIT\Qualisys\Platform\NRC.Picker.SamplingService\NRC.Picker.SamplingService.Mailer\AbortTemplate.tt"

    if (exception.InnerException != null)
    {

            
            #line default
            #line hidden
            this.Write("<p>");
            
            #line 36 "C:\TFS13GIT\Qualisys\Platform\NRC.Picker.SamplingService\NRC.Picker.SamplingService.Mailer\AbortTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(exception.InnerException.Message.ToString()));
            
            #line default
            #line hidden
            this.Write("</p>\r\n");
            
            #line 37 "C:\TFS13GIT\Qualisys\Platform\NRC.Picker.SamplingService\NRC.Picker.SamplingService.Mailer\AbortTemplate.tt"

    }

            
            #line default
            #line hidden
            
            #line 40 "C:\TFS13GIT\Qualisys\Platform\NRC.Picker.SamplingService\NRC.Picker.SamplingService.Mailer\AbortTemplate.tt"

    if (exception.StackTrace != null)
    {

            
            #line default
            #line hidden
            this.Write("<p>");
            
            #line 44 "C:\TFS13GIT\Qualisys\Platform\NRC.Picker.SamplingService\NRC.Picker.SamplingService.Mailer\AbortTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(exception.StackTrace.ToString()));
            
            #line default
            #line hidden
            this.Write("</p>\r\n");
            
            #line 45 "C:\TFS13GIT\Qualisys\Platform\NRC.Picker.SamplingService\NRC.Picker.SamplingService.Mailer\AbortTemplate.tt"

    }

            
            #line default
            #line hidden
            this.Write("</center>\r\n</body>\r\n</html>");
            return this.GenerationEnvironment.ToString();
        }
        private global::Microsoft.VisualStudio.TextTemplating.ITextTemplatingEngineHost hostValue;
        /// <summary>
        /// The current host for the text templating engine
        /// </summary>
        public virtual global::Microsoft.VisualStudio.TextTemplating.ITextTemplatingEngineHost Host
        {
            get
            {
                return this.hostValue;
            }
            set
            {
                this.hostValue = value;
            }
        }
        
        #line 1 "C:\TFS13GIT\Qualisys\Platform\NRC.Picker.SamplingService\NRC.Picker.SamplingService.Mailer\AbortTemplate.tt"

private global::NRC.Picker.SamplingService.Store.Models.DatasetResult _resultField;

/// <summary>
/// Access the result parameter of the template.
/// </summary>
private global::NRC.Picker.SamplingService.Store.Models.DatasetResult result
{
    get
    {
        return this._resultField;
    }
}

private global::System.Exception _exceptionField;

/// <summary>
/// Access the exception parameter of the template.
/// </summary>
private global::System.Exception exception
{
    get
    {
        return this._exceptionField;
    }
}


/// <summary>
/// Initialize the template
/// </summary>
public virtual void Initialize()
{
    if ((this.Errors.HasErrors == false))
    {
bool resultValueAcquired = false;
if (this.Session.ContainsKey("result"))
{
    if ((typeof(global::NRC.Picker.SamplingService.Store.Models.DatasetResult).IsAssignableFrom(this.Session["result"].GetType()) == false))
    {
        this.Error("The type \'NRC.Picker.SamplingService.Store.Models.DatasetResult\' of the parameter" +
                " \'result\' did not match the type of the data passed to the template.");
    }
    else
    {
        this._resultField = ((global::NRC.Picker.SamplingService.Store.Models.DatasetResult)(this.Session["result"]));
        resultValueAcquired = true;
    }
}
if ((resultValueAcquired == false))
{
    string parameterValue = this.Host.ResolveParameterValue("Property", "PropertyDirectiveProcessor", "result");
    if ((string.IsNullOrEmpty(parameterValue) == false))
    {
        global::System.ComponentModel.TypeConverter tc = global::System.ComponentModel.TypeDescriptor.GetConverter(typeof(global::NRC.Picker.SamplingService.Store.Models.DatasetResult));
        if (((tc != null) 
                    && tc.CanConvertFrom(typeof(string))))
        {
            this._resultField = ((global::NRC.Picker.SamplingService.Store.Models.DatasetResult)(tc.ConvertFrom(parameterValue)));
            resultValueAcquired = true;
        }
        else
        {
            this.Error("The type \'NRC.Picker.SamplingService.Store.Models.DatasetResult\' of the parameter" +
                    " \'result\' did not match the type of the data passed to the template.");
        }
    }
}
if ((resultValueAcquired == false))
{
    object data = global::System.Runtime.Remoting.Messaging.CallContext.LogicalGetData("result");
    if ((data != null))
    {
        if ((typeof(global::NRC.Picker.SamplingService.Store.Models.DatasetResult).IsAssignableFrom(data.GetType()) == false))
        {
            this.Error("The type \'NRC.Picker.SamplingService.Store.Models.DatasetResult\' of the parameter" +
                    " \'result\' did not match the type of the data passed to the template.");
        }
        else
        {
            this._resultField = ((global::NRC.Picker.SamplingService.Store.Models.DatasetResult)(data));
        }
    }
}
bool exceptionValueAcquired = false;
if (this.Session.ContainsKey("exception"))
{
    if ((typeof(global::System.Exception).IsAssignableFrom(this.Session["exception"].GetType()) == false))
    {
        this.Error("The type \'System.Exception\' of the parameter \'exception\' did not match the type o" +
                "f the data passed to the template.");
    }
    else
    {
        this._exceptionField = ((global::System.Exception)(this.Session["exception"]));
        exceptionValueAcquired = true;
    }
}
if ((exceptionValueAcquired == false))
{
    string parameterValue = this.Host.ResolveParameterValue("Property", "PropertyDirectiveProcessor", "exception");
    if ((string.IsNullOrEmpty(parameterValue) == false))
    {
        global::System.ComponentModel.TypeConverter tc = global::System.ComponentModel.TypeDescriptor.GetConverter(typeof(global::System.Exception));
        if (((tc != null) 
                    && tc.CanConvertFrom(typeof(string))))
        {
            this._exceptionField = ((global::System.Exception)(tc.ConvertFrom(parameterValue)));
            exceptionValueAcquired = true;
        }
        else
        {
            this.Error("The type \'System.Exception\' of the parameter \'exception\' did not match the type o" +
                    "f the data passed to the template.");
        }
    }
}
if ((exceptionValueAcquired == false))
{
    object data = global::System.Runtime.Remoting.Messaging.CallContext.LogicalGetData("exception");
    if ((data != null))
    {
        if ((typeof(global::System.Exception).IsAssignableFrom(data.GetType()) == false))
        {
            this.Error("The type \'System.Exception\' of the parameter \'exception\' did not match the type o" +
                    "f the data passed to the template.");
        }
        else
        {
            this._exceptionField = ((global::System.Exception)(data));
        }
    }
}


    }
}


        
        #line default
        #line hidden
    }
    
    #line default
    #line hidden
    #region Base class
    /// <summary>
    /// Base class for this transformation
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "11.0.0.0")]
    public class AbortTemplateBase
    {
        #region Fields
        private global::System.Text.StringBuilder generationEnvironmentField;
        private global::System.CodeDom.Compiler.CompilerErrorCollection errorsField;
        private global::System.Collections.Generic.List<int> indentLengthsField;
        private string currentIndentField = "";
        private bool endsWithNewline;
        private global::System.Collections.Generic.IDictionary<string, object> sessionField;
        #endregion
        #region Properties
        /// <summary>
        /// The string builder that generation-time code is using to assemble generated output
        /// </summary>
        protected System.Text.StringBuilder GenerationEnvironment
        {
            get
            {
                if ((this.generationEnvironmentField == null))
                {
                    this.generationEnvironmentField = new global::System.Text.StringBuilder();
                }
                return this.generationEnvironmentField;
            }
            set
            {
                this.generationEnvironmentField = value;
            }
        }
        /// <summary>
        /// The error collection for the generation process
        /// </summary>
        public System.CodeDom.Compiler.CompilerErrorCollection Errors
        {
            get
            {
                if ((this.errorsField == null))
                {
                    this.errorsField = new global::System.CodeDom.Compiler.CompilerErrorCollection();
                }
                return this.errorsField;
            }
        }
        /// <summary>
        /// A list of the lengths of each indent that was added with PushIndent
        /// </summary>
        private System.Collections.Generic.List<int> indentLengths
        {
            get
            {
                if ((this.indentLengthsField == null))
                {
                    this.indentLengthsField = new global::System.Collections.Generic.List<int>();
                }
                return this.indentLengthsField;
            }
        }
        /// <summary>
        /// Gets the current indent we use when adding lines to the output
        /// </summary>
        public string CurrentIndent
        {
            get
            {
                return this.currentIndentField;
            }
        }
        /// <summary>
        /// Current transformation session
        /// </summary>
        public virtual global::System.Collections.Generic.IDictionary<string, object> Session
        {
            get
            {
                return this.sessionField;
            }
            set
            {
                this.sessionField = value;
            }
        }
        #endregion
        #region Transform-time helpers
        /// <summary>
        /// Write text directly into the generated output
        /// </summary>
        public void Write(string textToAppend)
        {
            if (string.IsNullOrEmpty(textToAppend))
            {
                return;
            }
            // If we're starting off, or if the previous text ended with a newline,
            // we have to append the current indent first.
            if (((this.GenerationEnvironment.Length == 0) 
                        || this.endsWithNewline))
            {
                this.GenerationEnvironment.Append(this.currentIndentField);
                this.endsWithNewline = false;
            }
            // Check if the current text ends with a newline
            if (textToAppend.EndsWith(global::System.Environment.NewLine, global::System.StringComparison.CurrentCulture))
            {
                this.endsWithNewline = true;
            }
            // This is an optimization. If the current indent is "", then we don't have to do any
            // of the more complex stuff further down.
            if ((this.currentIndentField.Length == 0))
            {
                this.GenerationEnvironment.Append(textToAppend);
                return;
            }
            // Everywhere there is a newline in the text, add an indent after it
            textToAppend = textToAppend.Replace(global::System.Environment.NewLine, (global::System.Environment.NewLine + this.currentIndentField));
            // If the text ends with a newline, then we should strip off the indent added at the very end
            // because the appropriate indent will be added when the next time Write() is called
            if (this.endsWithNewline)
            {
                this.GenerationEnvironment.Append(textToAppend, 0, (textToAppend.Length - this.currentIndentField.Length));
            }
            else
            {
                this.GenerationEnvironment.Append(textToAppend);
            }
        }
        /// <summary>
        /// Write text directly into the generated output
        /// </summary>
        public void WriteLine(string textToAppend)
        {
            this.Write(textToAppend);
            this.GenerationEnvironment.AppendLine();
            this.endsWithNewline = true;
        }
        /// <summary>
        /// Write formatted text directly into the generated output
        /// </summary>
        public void Write(string format, params object[] args)
        {
            this.Write(string.Format(global::System.Globalization.CultureInfo.CurrentCulture, format, args));
        }
        /// <summary>
        /// Write formatted text directly into the generated output
        /// </summary>
        public void WriteLine(string format, params object[] args)
        {
            this.WriteLine(string.Format(global::System.Globalization.CultureInfo.CurrentCulture, format, args));
        }
        /// <summary>
        /// Raise an error
        /// </summary>
        public void Error(string message)
        {
            System.CodeDom.Compiler.CompilerError error = new global::System.CodeDom.Compiler.CompilerError();
            error.ErrorText = message;
            this.Errors.Add(error);
        }
        /// <summary>
        /// Raise a warning
        /// </summary>
        public void Warning(string message)
        {
            System.CodeDom.Compiler.CompilerError error = new global::System.CodeDom.Compiler.CompilerError();
            error.ErrorText = message;
            error.IsWarning = true;
            this.Errors.Add(error);
        }
        /// <summary>
        /// Increase the indent
        /// </summary>
        public void PushIndent(string indent)
        {
            if ((indent == null))
            {
                throw new global::System.ArgumentNullException("indent");
            }
            this.currentIndentField = (this.currentIndentField + indent);
            this.indentLengths.Add(indent.Length);
        }
        /// <summary>
        /// Remove the last indent that was added with PushIndent
        /// </summary>
        public string PopIndent()
        {
            string returnValue = "";
            if ((this.indentLengths.Count > 0))
            {
                int indentLength = this.indentLengths[(this.indentLengths.Count - 1)];
                this.indentLengths.RemoveAt((this.indentLengths.Count - 1));
                if ((indentLength > 0))
                {
                    returnValue = this.currentIndentField.Substring((this.currentIndentField.Length - indentLength));
                    this.currentIndentField = this.currentIndentField.Remove((this.currentIndentField.Length - indentLength));
                }
            }
            return returnValue;
        }
        /// <summary>
        /// Remove any indentation
        /// </summary>
        public void ClearIndent()
        {
            this.indentLengths.Clear();
            this.currentIndentField = "";
        }
        #endregion
        #region ToString Helpers
        /// <summary>
        /// Utility class to produce culture-oriented representation of an object as a string.
        /// </summary>
        public class ToStringInstanceHelper
        {
            private System.IFormatProvider formatProviderField  = global::System.Globalization.CultureInfo.InvariantCulture;
            /// <summary>
            /// Gets or sets format provider to be used by ToStringWithCulture method.
            /// </summary>
            public System.IFormatProvider FormatProvider
            {
                get
                {
                    return this.formatProviderField ;
                }
                set
                {
                    if ((value != null))
                    {
                        this.formatProviderField  = value;
                    }
                }
            }
            /// <summary>
            /// This is called from the compile/run appdomain to convert objects within an expression block to a string
            /// </summary>
            public string ToStringWithCulture(object objectToConvert)
            {
                if ((objectToConvert == null))
                {
                    throw new global::System.ArgumentNullException("objectToConvert");
                }
                System.Type t = objectToConvert.GetType();
                System.Reflection.MethodInfo method = t.GetMethod("ToString", new System.Type[] {
                            typeof(System.IFormatProvider)});
                if ((method == null))
                {
                    return objectToConvert.ToString();
                }
                else
                {
                    return ((string)(method.Invoke(objectToConvert, new object[] {
                                this.formatProviderField })));
                }
            }
        }
        private ToStringInstanceHelper toStringHelperField = new ToStringInstanceHelper();
        /// <summary>
        /// Helper to produce culture-oriented representation of an object as a string
        /// </summary>
        public ToStringInstanceHelper ToStringHelper
        {
            get
            {
                return this.toStringHelperField;
            }
        }
        #endregion
    }
    #endregion
}

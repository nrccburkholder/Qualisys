'------------------------------------------------------------------------------
' <auto-generated>
'     This code was generated by a tool.
'     Runtime Version:2.0.50727.1433
'
'     Changes to this file may cause incorrect behavior and will be lost if
'     the code is regenerated.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On



'''<summary>
'''Represents a strongly typed in-memory cache of data.
'''</summary>
<Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
 Global.System.Serializable(),  _
 Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
 Global.System.ComponentModel.ToolboxItem(true),  _
 Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema"),  _
 Global.System.Xml.Serialization.XmlRootAttribute("dsScriptScreens"),  _
 Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")>  _
Partial Public Class dsScriptScreens
    Inherits Global.System.Data.DataSet
    
    Private tableScriptScreens As ScriptScreensDataTable
    
    Private tableScriptScreenCategories As ScriptScreenCategoriesDataTable
    
    Private tableSearch As SearchDataTable
    
    Private tableCalculationType As CalculationTypeDataTable
    
    Private tableAnswerCategories As AnswerCategoriesDataTable
    
    Private tableAnswerCategoryTypes As AnswerCategoryTypesDataTable
    
    Private relationCalculationTypeScriptScreens As Global.System.Data.DataRelation
    
    Private relationScriptScreensScriptScreenCategories As Global.System.Data.DataRelation
    
    Private relationAnswerCategoriesScriptScreenCategories As Global.System.Data.DataRelation
    
    Private relationAnswerCategoryTypesAnswerCategories As Global.System.Data.DataRelation
    
    Private _schemaSerializationMode As Global.System.Data.SchemaSerializationMode = Global.System.Data.SchemaSerializationMode.IncludeSchema
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Sub New()
        MyBase.New
        Me.BeginInit
        Me.InitClass
        Dim schemaChangedHandler As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler MyBase.Relations.CollectionChanged, schemaChangedHandler
        Me.EndInit
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
        MyBase.New(info, context, false)
        If (Me.IsBinarySerialized(info, context) = true) Then
            Me.InitVars(false)
            Dim schemaChangedHandler1 As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
            AddHandler Me.Tables.CollectionChanged, schemaChangedHandler1
            AddHandler Me.Relations.CollectionChanged, schemaChangedHandler1
            Return
        End If
        Dim strSchema As String = CType(info.GetValue("XmlSchema", GetType(String)),String)
        If (Me.DetermineSchemaSerializationMode(info, context) = Global.System.Data.SchemaSerializationMode.IncludeSchema) Then
            Dim ds As Global.System.Data.DataSet = New Global.System.Data.DataSet
            ds.ReadXmlSchema(New Global.System.Xml.XmlTextReader(New Global.System.IO.StringReader(strSchema)))
            If (Not (ds.Tables("ScriptScreens")) Is Nothing) Then
                MyBase.Tables.Add(New ScriptScreensDataTable(ds.Tables("ScriptScreens")))
            End If
            If (Not (ds.Tables("ScriptScreenCategories")) Is Nothing) Then
                MyBase.Tables.Add(New ScriptScreenCategoriesDataTable(ds.Tables("ScriptScreenCategories")))
            End If
            If (Not (ds.Tables("Search")) Is Nothing) Then
                MyBase.Tables.Add(New SearchDataTable(ds.Tables("Search")))
            End If
            If (Not (ds.Tables("CalculationType")) Is Nothing) Then
                MyBase.Tables.Add(New CalculationTypeDataTable(ds.Tables("CalculationType")))
            End If
            If (Not (ds.Tables("AnswerCategories")) Is Nothing) Then
                MyBase.Tables.Add(New AnswerCategoriesDataTable(ds.Tables("AnswerCategories")))
            End If
            If (Not (ds.Tables("AnswerCategoryTypes")) Is Nothing) Then
                MyBase.Tables.Add(New AnswerCategoryTypesDataTable(ds.Tables("AnswerCategoryTypes")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, Global.System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.ReadXmlSchema(New Global.System.Xml.XmlTextReader(New Global.System.IO.StringReader(strSchema)))
        End If
        Me.GetSerializationData(info, context)
        Dim schemaChangedHandler As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property ScriptScreens() As ScriptScreensDataTable
        Get
            Return Me.tableScriptScreens
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property ScriptScreenCategories() As ScriptScreenCategoriesDataTable
        Get
            Return Me.tableScriptScreenCategories
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property Search() As SearchDataTable
        Get
            Return Me.tableSearch
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property CalculationType() As CalculationTypeDataTable
        Get
            Return Me.tableCalculationType
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property AnswerCategories() As AnswerCategoriesDataTable
        Get
            Return Me.tableAnswerCategories
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property AnswerCategoryTypes() As AnswerCategoryTypesDataTable
        Get
            Return Me.tableAnswerCategoryTypes
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.BrowsableAttribute(true),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Visible)>  _
    Public Overrides Property SchemaSerializationMode() As Global.System.Data.SchemaSerializationMode
        Get
            Return Me._schemaSerializationMode
        End Get
        Set
            Me._schemaSerializationMode = value
        End Set
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Hidden)>  _
    Public Shadows ReadOnly Property Tables() As Global.System.Data.DataTableCollection
        Get
            Return MyBase.Tables
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Hidden)>  _
    Public Shadows ReadOnly Property Relations() As Global.System.Data.DataRelationCollection
        Get
            Return MyBase.Relations
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Sub InitializeDerivedDataSet()
        Me.BeginInit
        Me.InitClass
        Me.EndInit
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Overrides Function Clone() As Global.System.Data.DataSet
        Dim cln As dsScriptScreens = CType(MyBase.Clone,dsScriptScreens)
        cln.InitVars
        cln.SchemaSerializationMode = Me.SchemaSerializationMode
        Return cln
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function ShouldSerializeTables() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function ShouldSerializeRelations() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Sub ReadXmlSerializable(ByVal reader As Global.System.Xml.XmlReader)
        If (Me.DetermineSchemaSerializationMode(reader) = Global.System.Data.SchemaSerializationMode.IncludeSchema) Then
            Me.Reset
            Dim ds As Global.System.Data.DataSet = New Global.System.Data.DataSet
            ds.ReadXml(reader)
            If (Not (ds.Tables("ScriptScreens")) Is Nothing) Then
                MyBase.Tables.Add(New ScriptScreensDataTable(ds.Tables("ScriptScreens")))
            End If
            If (Not (ds.Tables("ScriptScreenCategories")) Is Nothing) Then
                MyBase.Tables.Add(New ScriptScreenCategoriesDataTable(ds.Tables("ScriptScreenCategories")))
            End If
            If (Not (ds.Tables("Search")) Is Nothing) Then
                MyBase.Tables.Add(New SearchDataTable(ds.Tables("Search")))
            End If
            If (Not (ds.Tables("CalculationType")) Is Nothing) Then
                MyBase.Tables.Add(New CalculationTypeDataTable(ds.Tables("CalculationType")))
            End If
            If (Not (ds.Tables("AnswerCategories")) Is Nothing) Then
                MyBase.Tables.Add(New AnswerCategoriesDataTable(ds.Tables("AnswerCategories")))
            End If
            If (Not (ds.Tables("AnswerCategoryTypes")) Is Nothing) Then
                MyBase.Tables.Add(New AnswerCategoryTypesDataTable(ds.Tables("AnswerCategoryTypes")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, Global.System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.ReadXml(reader)
            Me.InitVars
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function GetSchemaSerializable() As Global.System.Xml.Schema.XmlSchema
        Dim stream As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
        Me.WriteXmlSchema(New Global.System.Xml.XmlTextWriter(stream, Nothing))
        stream.Position = 0
        Return Global.System.Xml.Schema.XmlSchema.Read(New Global.System.Xml.XmlTextReader(stream), Nothing)
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Friend Overloads Sub InitVars()
        Me.InitVars(true)
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Friend Overloads Sub InitVars(ByVal initTable As Boolean)
        Me.tableScriptScreens = CType(MyBase.Tables("ScriptScreens"),ScriptScreensDataTable)
        If (initTable = true) Then
            If (Not (Me.tableScriptScreens) Is Nothing) Then
                Me.tableScriptScreens.InitVars
            End If
        End If
        Me.tableScriptScreenCategories = CType(MyBase.Tables("ScriptScreenCategories"),ScriptScreenCategoriesDataTable)
        If (initTable = true) Then
            If (Not (Me.tableScriptScreenCategories) Is Nothing) Then
                Me.tableScriptScreenCategories.InitVars
            End If
        End If
        Me.tableSearch = CType(MyBase.Tables("Search"),SearchDataTable)
        If (initTable = true) Then
            If (Not (Me.tableSearch) Is Nothing) Then
                Me.tableSearch.InitVars
            End If
        End If
        Me.tableCalculationType = CType(MyBase.Tables("CalculationType"),CalculationTypeDataTable)
        If (initTable = true) Then
            If (Not (Me.tableCalculationType) Is Nothing) Then
                Me.tableCalculationType.InitVars
            End If
        End If
        Me.tableAnswerCategories = CType(MyBase.Tables("AnswerCategories"),AnswerCategoriesDataTable)
        If (initTable = true) Then
            If (Not (Me.tableAnswerCategories) Is Nothing) Then
                Me.tableAnswerCategories.InitVars
            End If
        End If
        Me.tableAnswerCategoryTypes = CType(MyBase.Tables("AnswerCategoryTypes"),AnswerCategoryTypesDataTable)
        If (initTable = true) Then
            If (Not (Me.tableAnswerCategoryTypes) Is Nothing) Then
                Me.tableAnswerCategoryTypes.InitVars
            End If
        End If
        Me.relationCalculationTypeScriptScreens = Me.Relations("CalculationTypeScriptScreens")
        Me.relationScriptScreensScriptScreenCategories = Me.Relations("ScriptScreensScriptScreenCategories")
        Me.relationAnswerCategoriesScriptScreenCategories = Me.Relations("AnswerCategoriesScriptScreenCategories")
        Me.relationAnswerCategoryTypesAnswerCategories = Me.Relations("AnswerCategoryTypesAnswerCategories")
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Sub InitClass()
        Me.DataSetName = "dsScriptScreens"
        Me.Prefix = ""
        Me.Namespace = "http://tempuri.org/dsScriptScreens.xsd"
        Me.EnforceConstraints = true
        Me.SchemaSerializationMode = Global.System.Data.SchemaSerializationMode.IncludeSchema
        Me.tableScriptScreens = New ScriptScreensDataTable
        MyBase.Tables.Add(Me.tableScriptScreens)
        Me.tableScriptScreenCategories = New ScriptScreenCategoriesDataTable
        MyBase.Tables.Add(Me.tableScriptScreenCategories)
        Me.tableSearch = New SearchDataTable
        MyBase.Tables.Add(Me.tableSearch)
        Me.tableCalculationType = New CalculationTypeDataTable
        MyBase.Tables.Add(Me.tableCalculationType)
        Me.tableAnswerCategories = New AnswerCategoriesDataTable
        MyBase.Tables.Add(Me.tableAnswerCategories)
        Me.tableAnswerCategoryTypes = New AnswerCategoryTypesDataTable
        MyBase.Tables.Add(Me.tableAnswerCategoryTypes)
        Dim fkc As Global.System.Data.ForeignKeyConstraint
        fkc = New Global.System.Data.ForeignKeyConstraint("CalculationTypeScriptScreens", New Global.System.Data.DataColumn() {Me.tableCalculationType.CalculationTypeIDColumn}, New Global.System.Data.DataColumn() {Me.tableScriptScreens.CalculationTypeIDColumn})
        Me.tableScriptScreens.Constraints.Add(fkc)
        fkc.AcceptRejectRule = Global.System.Data.AcceptRejectRule.None
        fkc.DeleteRule = Global.System.Data.Rule.Cascade
        fkc.UpdateRule = Global.System.Data.Rule.Cascade
        fkc = New Global.System.Data.ForeignKeyConstraint("ScriptScreensScriptScreenCategories", New Global.System.Data.DataColumn() {Me.tableScriptScreens.ScriptScreenIDColumn}, New Global.System.Data.DataColumn() {Me.tableScriptScreenCategories.ScriptScreenIDColumn})
        Me.tableScriptScreenCategories.Constraints.Add(fkc)
        fkc.AcceptRejectRule = Global.System.Data.AcceptRejectRule.None
        fkc.DeleteRule = Global.System.Data.Rule.Cascade
        fkc.UpdateRule = Global.System.Data.Rule.Cascade
        fkc = New Global.System.Data.ForeignKeyConstraint("AnswerCategoriesScriptScreenCategories", New Global.System.Data.DataColumn() {Me.tableAnswerCategories.AnswerCategoryIDColumn}, New Global.System.Data.DataColumn() {Me.tableScriptScreenCategories.AnswerCategoryIDColumn})
        Me.tableScriptScreenCategories.Constraints.Add(fkc)
        fkc.AcceptRejectRule = Global.System.Data.AcceptRejectRule.None
        fkc.DeleteRule = Global.System.Data.Rule.Cascade
        fkc.UpdateRule = Global.System.Data.Rule.Cascade
        fkc = New Global.System.Data.ForeignKeyConstraint("AnswerCategoryTypesAnswerCategories", New Global.System.Data.DataColumn() {Me.tableAnswerCategoryTypes.AnswerCategoryTypeIDColumn}, New Global.System.Data.DataColumn() {Me.tableAnswerCategories.AnswerCategoryTypeIDColumn})
        Me.tableAnswerCategories.Constraints.Add(fkc)
        fkc.AcceptRejectRule = Global.System.Data.AcceptRejectRule.None
        fkc.DeleteRule = Global.System.Data.Rule.Cascade
        fkc.UpdateRule = Global.System.Data.Rule.Cascade
        Me.relationCalculationTypeScriptScreens = New Global.System.Data.DataRelation("CalculationTypeScriptScreens", New Global.System.Data.DataColumn() {Me.tableCalculationType.CalculationTypeIDColumn}, New Global.System.Data.DataColumn() {Me.tableScriptScreens.CalculationTypeIDColumn}, false)
        Me.Relations.Add(Me.relationCalculationTypeScriptScreens)
        Me.relationScriptScreensScriptScreenCategories = New Global.System.Data.DataRelation("ScriptScreensScriptScreenCategories", New Global.System.Data.DataColumn() {Me.tableScriptScreens.ScriptScreenIDColumn}, New Global.System.Data.DataColumn() {Me.tableScriptScreenCategories.ScriptScreenIDColumn}, false)
        Me.Relations.Add(Me.relationScriptScreensScriptScreenCategories)
        Me.relationAnswerCategoriesScriptScreenCategories = New Global.System.Data.DataRelation("AnswerCategoriesScriptScreenCategories", New Global.System.Data.DataColumn() {Me.tableAnswerCategories.AnswerCategoryIDColumn}, New Global.System.Data.DataColumn() {Me.tableScriptScreenCategories.AnswerCategoryIDColumn}, false)
        Me.Relations.Add(Me.relationAnswerCategoriesScriptScreenCategories)
        Me.relationAnswerCategoryTypesAnswerCategories = New Global.System.Data.DataRelation("AnswerCategoryTypesAnswerCategories", New Global.System.Data.DataColumn() {Me.tableAnswerCategoryTypes.AnswerCategoryTypeIDColumn}, New Global.System.Data.DataColumn() {Me.tableAnswerCategories.AnswerCategoryTypeIDColumn}, false)
        Me.Relations.Add(Me.relationAnswerCategoryTypesAnswerCategories)
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeScriptScreens() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeScriptScreenCategories() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeSearch() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeCalculationType() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeAnswerCategories() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeAnswerCategoryTypes() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Sub SchemaChanged(ByVal sender As Object, ByVal e As Global.System.ComponentModel.CollectionChangeEventArgs)
        If (e.Action = Global.System.ComponentModel.CollectionChangeAction.Remove) Then
            Me.InitVars
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Shared Function GetTypedDataSetSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
        Dim ds As dsScriptScreens = New dsScriptScreens
        Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
        Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
        Dim any As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
        any.Namespace = ds.Namespace
        sequence.Items.Add(any)
        type.Particle = sequence
        Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
        If xs.Contains(dsSchema.TargetNamespace) Then
            Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
            Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
            Try 
                Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                dsSchema.Write(s1)
                Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                Do While schemas.MoveNext
                    schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                    s2.SetLength(0)
                    schema.Write(s2)
                    If (s1.Length = s2.Length) Then
                        s1.Position = 0
                        s2.Position = 0
                        
                        Do While ((s1.Position <> s1.Length)  _
                                    AndAlso (s1.ReadByte = s2.ReadByte))
                            
                            
                        Loop
                        If (s1.Position = s1.Length) Then
                            Return type
                        End If
                    End If
                    
                Loop
            Finally
                If (Not (s1) Is Nothing) Then
                    s1.Close
                End If
                If (Not (s2) Is Nothing) Then
                    s2.Close
                End If
            End Try
        End If
        xs.Add(dsSchema)
        Return type
    End Function
    
    Public Delegate Sub ScriptScreensRowChangeEventHandler(ByVal sender As Object, ByVal e As ScriptScreensRowChangeEvent)
    
    Public Delegate Sub ScriptScreenCategoriesRowChangeEventHandler(ByVal sender As Object, ByVal e As ScriptScreenCategoriesRowChangeEvent)
    
    Public Delegate Sub SearchRowChangeEventHandler(ByVal sender As Object, ByVal e As SearchRowChangeEvent)
    
    Public Delegate Sub CalculationTypeRowChangeEventHandler(ByVal sender As Object, ByVal e As CalculationTypeRowChangeEvent)
    
    Public Delegate Sub AnswerCategoriesRowChangeEventHandler(ByVal sender As Object, ByVal e As AnswerCategoriesRowChangeEvent)
    
    Public Delegate Sub AnswerCategoryTypesRowChangeEventHandler(ByVal sender As Object, ByVal e As AnswerCategoryTypesRowChangeEvent)
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class ScriptScreensDataTable
        Inherits Global.System.Data.TypedTableBase(Of ScriptScreensRow)
        
        Private columnScriptScreenID As Global.System.Data.DataColumn
        
        Private columnScriptID As Global.System.Data.DataColumn
        
        Private columnSurveyQuestionID As Global.System.Data.DataColumn
        
        Private columnTitle As Global.System.Data.DataColumn
        
        Private columnText As Global.System.Data.DataColumn
        
        Private columnCalculationTypeID As Global.System.Data.DataColumn
        
        Private columnItemOrder As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "ScriptScreens"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ScriptScreenIDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnScriptScreenID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ScriptIDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnScriptID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SurveyQuestionIDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSurveyQuestionID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TitleColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTitle
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TextColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnText
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CalculationTypeIDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCalculationTypeID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ItemOrderColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnItemOrder
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As ScriptScreensRow
            Get
                Return CType(Me.Rows(index),ScriptScreensRow)
            End Get
        End Property
        
        Public Event ScriptScreensRowChanging As ScriptScreensRowChangeEventHandler
        
        Public Event ScriptScreensRowChanged As ScriptScreensRowChangeEventHandler
        
        Public Event ScriptScreensRowDeleting As ScriptScreensRowChangeEventHandler
        
        Public Event ScriptScreensRowDeleted As ScriptScreensRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddScriptScreensRow(ByVal row As ScriptScreensRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddScriptScreensRow(ByVal ScriptID As Integer, ByVal SurveyQuestionID As Integer, ByVal Title As String, ByVal Text As String, ByVal parentCalculationTypeRowByCalculationTypeScriptScreens As CalculationTypeRow, ByVal ItemOrder As Integer) As ScriptScreensRow
            Dim rowScriptScreensRow As ScriptScreensRow = CType(Me.NewRow,ScriptScreensRow)
            Dim columnValuesArray() As Object = New Object() {Nothing, ScriptID, SurveyQuestionID, Title, Text, Nothing, ItemOrder}
            If (Not (parentCalculationTypeRowByCalculationTypeScriptScreens) Is Nothing) Then
                columnValuesArray(5) = parentCalculationTypeRowByCalculationTypeScriptScreens(0)
            End If
            rowScriptScreensRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowScriptScreensRow)
            Return rowScriptScreensRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByScriptScreenID(ByVal ScriptScreenID As Integer) As ScriptScreensRow
            Return CType(Me.Rows.Find(New Object() {ScriptScreenID}),ScriptScreensRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As ScriptScreensDataTable = CType(MyBase.Clone,ScriptScreensDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New ScriptScreensDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnScriptScreenID = MyBase.Columns("ScriptScreenID")
            Me.columnScriptID = MyBase.Columns("ScriptID")
            Me.columnSurveyQuestionID = MyBase.Columns("SurveyQuestionID")
            Me.columnTitle = MyBase.Columns("Title")
            Me.columnText = MyBase.Columns("Text")
            Me.columnCalculationTypeID = MyBase.Columns("CalculationTypeID")
            Me.columnItemOrder = MyBase.Columns("ItemOrder")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnScriptScreenID = New Global.System.Data.DataColumn("ScriptScreenID", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnScriptScreenID)
            Me.columnScriptID = New Global.System.Data.DataColumn("ScriptID", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnScriptID)
            Me.columnSurveyQuestionID = New Global.System.Data.DataColumn("SurveyQuestionID", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSurveyQuestionID)
            Me.columnTitle = New Global.System.Data.DataColumn("Title", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTitle)
            Me.columnText = New Global.System.Data.DataColumn("Text", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnText)
            Me.columnCalculationTypeID = New Global.System.Data.DataColumn("CalculationTypeID", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCalculationTypeID)
            Me.columnItemOrder = New Global.System.Data.DataColumn("ItemOrder", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnItemOrder)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("dsScriptScreensKey1", New Global.System.Data.DataColumn() {Me.columnScriptScreenID}, true))
            Me.columnScriptScreenID.AutoIncrement = true
            Me.columnScriptScreenID.AllowDBNull = false
            Me.columnScriptScreenID.ReadOnly = true
            Me.columnScriptScreenID.Unique = true
            Me.columnScriptID.AllowDBNull = false
            Me.columnTitle.AllowDBNull = false
            Me.columnText.AllowDBNull = false
            Me.columnCalculationTypeID.AllowDBNull = false
            Me.columnItemOrder.AllowDBNull = false
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewScriptScreensRow() As ScriptScreensRow
            Return CType(Me.NewRow,ScriptScreensRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New ScriptScreensRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(ScriptScreensRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.ScriptScreensRowChangedEvent) Is Nothing) Then
                RaiseEvent ScriptScreensRowChanged(Me, New ScriptScreensRowChangeEvent(CType(e.Row,ScriptScreensRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.ScriptScreensRowChangingEvent) Is Nothing) Then
                RaiseEvent ScriptScreensRowChanging(Me, New ScriptScreensRowChangeEvent(CType(e.Row,ScriptScreensRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.ScriptScreensRowDeletedEvent) Is Nothing) Then
                RaiseEvent ScriptScreensRowDeleted(Me, New ScriptScreensRowChangeEvent(CType(e.Row,ScriptScreensRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.ScriptScreensRowDeletingEvent) Is Nothing) Then
                RaiseEvent ScriptScreensRowDeleting(Me, New ScriptScreensRowChangeEvent(CType(e.Row,ScriptScreensRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveScriptScreensRow(ByVal row As ScriptScreensRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As dsScriptScreens = New dsScriptScreens
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "ScriptScreensDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class ScriptScreenCategoriesDataTable
        Inherits Global.System.Data.TypedTableBase(Of ScriptScreenCategoriesRow)
        
        Private columnScriptScreenCategoryID As Global.System.Data.DataColumn
        
        Private columnScriptScreenID As Global.System.Data.DataColumn
        
        Private columnAnswerCategoryID As Global.System.Data.DataColumn
        
        Private columnJumpToScriptScreenID As Global.System.Data.DataColumn
        
        Private columnText As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "ScriptScreenCategories"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ScriptScreenCategoryIDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnScriptScreenCategoryID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ScriptScreenIDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnScriptScreenID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property AnswerCategoryIDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnAnswerCategoryID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property JumpToScriptScreenIDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnJumpToScriptScreenID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TextColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnText
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As ScriptScreenCategoriesRow
            Get
                Return CType(Me.Rows(index),ScriptScreenCategoriesRow)
            End Get
        End Property
        
        Public Event ScriptScreenCategoriesRowChanging As ScriptScreenCategoriesRowChangeEventHandler
        
        Public Event ScriptScreenCategoriesRowChanged As ScriptScreenCategoriesRowChangeEventHandler
        
        Public Event ScriptScreenCategoriesRowDeleting As ScriptScreenCategoriesRowChangeEventHandler
        
        Public Event ScriptScreenCategoriesRowDeleted As ScriptScreenCategoriesRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddScriptScreenCategoriesRow(ByVal row As ScriptScreenCategoriesRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddScriptScreenCategoriesRow(ByVal parentScriptScreensRowByScriptScreensScriptScreenCategories As ScriptScreensRow, ByVal parentAnswerCategoriesRowByAnswerCategoriesScriptScreenCategories As AnswerCategoriesRow, ByVal JumpToScriptScreenID As Integer, ByVal Text As String) As ScriptScreenCategoriesRow
            Dim rowScriptScreenCategoriesRow As ScriptScreenCategoriesRow = CType(Me.NewRow,ScriptScreenCategoriesRow)
            Dim columnValuesArray() As Object = New Object() {Nothing, Nothing, Nothing, JumpToScriptScreenID, Text}
            If (Not (parentScriptScreensRowByScriptScreensScriptScreenCategories) Is Nothing) Then
                columnValuesArray(1) = parentScriptScreensRowByScriptScreensScriptScreenCategories(0)
            End If
            If (Not (parentAnswerCategoriesRowByAnswerCategoriesScriptScreenCategories) Is Nothing) Then
                columnValuesArray(2) = parentAnswerCategoriesRowByAnswerCategoriesScriptScreenCategories(0)
            End If
            rowScriptScreenCategoriesRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowScriptScreenCategoriesRow)
            Return rowScriptScreenCategoriesRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByScriptScreenCategoryID(ByVal ScriptScreenCategoryID As Integer) As ScriptScreenCategoriesRow
            Return CType(Me.Rows.Find(New Object() {ScriptScreenCategoryID}),ScriptScreenCategoriesRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As ScriptScreenCategoriesDataTable = CType(MyBase.Clone,ScriptScreenCategoriesDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New ScriptScreenCategoriesDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnScriptScreenCategoryID = MyBase.Columns("ScriptScreenCategoryID")
            Me.columnScriptScreenID = MyBase.Columns("ScriptScreenID")
            Me.columnAnswerCategoryID = MyBase.Columns("AnswerCategoryID")
            Me.columnJumpToScriptScreenID = MyBase.Columns("JumpToScriptScreenID")
            Me.columnText = MyBase.Columns("Text")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnScriptScreenCategoryID = New Global.System.Data.DataColumn("ScriptScreenCategoryID", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnScriptScreenCategoryID)
            Me.columnScriptScreenID = New Global.System.Data.DataColumn("ScriptScreenID", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnScriptScreenID)
            Me.columnAnswerCategoryID = New Global.System.Data.DataColumn("AnswerCategoryID", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAnswerCategoryID)
            Me.columnJumpToScriptScreenID = New Global.System.Data.DataColumn("JumpToScriptScreenID", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnJumpToScriptScreenID)
            Me.columnText = New Global.System.Data.DataColumn("Text", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnText)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("dsScriptScreensKey2", New Global.System.Data.DataColumn() {Me.columnScriptScreenCategoryID}, true))
            Me.columnScriptScreenCategoryID.AutoIncrement = true
            Me.columnScriptScreenCategoryID.AllowDBNull = false
            Me.columnScriptScreenCategoryID.ReadOnly = true
            Me.columnScriptScreenCategoryID.Unique = true
            Me.columnScriptScreenID.AllowDBNull = false
            Me.columnAnswerCategoryID.AllowDBNull = false
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewScriptScreenCategoriesRow() As ScriptScreenCategoriesRow
            Return CType(Me.NewRow,ScriptScreenCategoriesRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New ScriptScreenCategoriesRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(ScriptScreenCategoriesRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.ScriptScreenCategoriesRowChangedEvent) Is Nothing) Then
                RaiseEvent ScriptScreenCategoriesRowChanged(Me, New ScriptScreenCategoriesRowChangeEvent(CType(e.Row,ScriptScreenCategoriesRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.ScriptScreenCategoriesRowChangingEvent) Is Nothing) Then
                RaiseEvent ScriptScreenCategoriesRowChanging(Me, New ScriptScreenCategoriesRowChangeEvent(CType(e.Row,ScriptScreenCategoriesRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.ScriptScreenCategoriesRowDeletedEvent) Is Nothing) Then
                RaiseEvent ScriptScreenCategoriesRowDeleted(Me, New ScriptScreenCategoriesRowChangeEvent(CType(e.Row,ScriptScreenCategoriesRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.ScriptScreenCategoriesRowDeletingEvent) Is Nothing) Then
                RaiseEvent ScriptScreenCategoriesRowDeleting(Me, New ScriptScreenCategoriesRowChangeEvent(CType(e.Row,ScriptScreenCategoriesRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveScriptScreenCategoriesRow(ByVal row As ScriptScreenCategoriesRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As dsScriptScreens = New dsScriptScreens
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "ScriptScreenCategoriesDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class SearchDataTable
        Inherits Global.System.Data.TypedTableBase(Of SearchRow)
        
        Private columnScriptScreenID As Global.System.Data.DataColumn
        
        Private columnScriptID As Global.System.Data.DataColumn
        
        Private columnSurveyQuestionID As Global.System.Data.DataColumn
        
        Private columnKeyword As Global.System.Data.DataColumn
        
        Private columnItemOrder As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "Search"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ScriptScreenIDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnScriptScreenID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ScriptIDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnScriptID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SurveyQuestionIDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSurveyQuestionID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property KeywordColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnKeyword
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ItemOrderColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnItemOrder
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As SearchRow
            Get
                Return CType(Me.Rows(index),SearchRow)
            End Get
        End Property
        
        Public Event SearchRowChanging As SearchRowChangeEventHandler
        
        Public Event SearchRowChanged As SearchRowChangeEventHandler
        
        Public Event SearchRowDeleting As SearchRowChangeEventHandler
        
        Public Event SearchRowDeleted As SearchRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddSearchRow(ByVal row As SearchRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddSearchRow(ByVal ScriptScreenID As Integer, ByVal ScriptID As Integer, ByVal SurveyQuestionID As Integer, ByVal Keyword As String, ByVal ItemOrder As Integer) As SearchRow
            Dim rowSearchRow As SearchRow = CType(Me.NewRow,SearchRow)
            Dim columnValuesArray() As Object = New Object() {ScriptScreenID, ScriptID, SurveyQuestionID, Keyword, ItemOrder}
            rowSearchRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowSearchRow)
            Return rowSearchRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As SearchDataTable = CType(MyBase.Clone,SearchDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New SearchDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnScriptScreenID = MyBase.Columns("ScriptScreenID")
            Me.columnScriptID = MyBase.Columns("ScriptID")
            Me.columnSurveyQuestionID = MyBase.Columns("SurveyQuestionID")
            Me.columnKeyword = MyBase.Columns("Keyword")
            Me.columnItemOrder = MyBase.Columns("ItemOrder")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnScriptScreenID = New Global.System.Data.DataColumn("ScriptScreenID", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnScriptScreenID)
            Me.columnScriptID = New Global.System.Data.DataColumn("ScriptID", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnScriptID)
            Me.columnSurveyQuestionID = New Global.System.Data.DataColumn("SurveyQuestionID", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSurveyQuestionID)
            Me.columnKeyword = New Global.System.Data.DataColumn("Keyword", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnKeyword)
            Me.columnItemOrder = New Global.System.Data.DataColumn("ItemOrder", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnItemOrder)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewSearchRow() As SearchRow
            Return CType(Me.NewRow,SearchRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New SearchRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(SearchRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.SearchRowChangedEvent) Is Nothing) Then
                RaiseEvent SearchRowChanged(Me, New SearchRowChangeEvent(CType(e.Row,SearchRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.SearchRowChangingEvent) Is Nothing) Then
                RaiseEvent SearchRowChanging(Me, New SearchRowChangeEvent(CType(e.Row,SearchRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.SearchRowDeletedEvent) Is Nothing) Then
                RaiseEvent SearchRowDeleted(Me, New SearchRowChangeEvent(CType(e.Row,SearchRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.SearchRowDeletingEvent) Is Nothing) Then
                RaiseEvent SearchRowDeleting(Me, New SearchRowChangeEvent(CType(e.Row,SearchRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveSearchRow(ByVal row As SearchRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As dsScriptScreens = New dsScriptScreens
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "SearchDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class CalculationTypeDataTable
        Inherits Global.System.Data.TypedTableBase(Of CalculationTypeRow)
        
        Private columnCalculationTypeID As Global.System.Data.DataColumn
        
        Private columnName As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "CalculationType"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CalculationTypeIDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCalculationTypeID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnName
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As CalculationTypeRow
            Get
                Return CType(Me.Rows(index),CalculationTypeRow)
            End Get
        End Property
        
        Public Event CalculationTypeRowChanging As CalculationTypeRowChangeEventHandler
        
        Public Event CalculationTypeRowChanged As CalculationTypeRowChangeEventHandler
        
        Public Event CalculationTypeRowDeleting As CalculationTypeRowChangeEventHandler
        
        Public Event CalculationTypeRowDeleted As CalculationTypeRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddCalculationTypeRow(ByVal row As CalculationTypeRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddCalculationTypeRow(ByVal CalculationTypeID As Integer, ByVal Name As String) As CalculationTypeRow
            Dim rowCalculationTypeRow As CalculationTypeRow = CType(Me.NewRow,CalculationTypeRow)
            Dim columnValuesArray() As Object = New Object() {CalculationTypeID, Name}
            rowCalculationTypeRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowCalculationTypeRow)
            Return rowCalculationTypeRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As CalculationTypeDataTable = CType(MyBase.Clone,CalculationTypeDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New CalculationTypeDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnCalculationTypeID = MyBase.Columns("CalculationTypeID")
            Me.columnName = MyBase.Columns("Name")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnCalculationTypeID = New Global.System.Data.DataColumn("CalculationTypeID", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCalculationTypeID)
            Me.columnName = New Global.System.Data.DataColumn("Name", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnName)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("dsScriptScreens_Calculation_CalculationTypeIDKey", New Global.System.Data.DataColumn() {Me.columnCalculationTypeID}, false))
            Me.columnCalculationTypeID.AllowDBNull = false
            Me.columnCalculationTypeID.Unique = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewCalculationTypeRow() As CalculationTypeRow
            Return CType(Me.NewRow,CalculationTypeRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New CalculationTypeRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(CalculationTypeRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.CalculationTypeRowChangedEvent) Is Nothing) Then
                RaiseEvent CalculationTypeRowChanged(Me, New CalculationTypeRowChangeEvent(CType(e.Row,CalculationTypeRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.CalculationTypeRowChangingEvent) Is Nothing) Then
                RaiseEvent CalculationTypeRowChanging(Me, New CalculationTypeRowChangeEvent(CType(e.Row,CalculationTypeRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.CalculationTypeRowDeletedEvent) Is Nothing) Then
                RaiseEvent CalculationTypeRowDeleted(Me, New CalculationTypeRowChangeEvent(CType(e.Row,CalculationTypeRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.CalculationTypeRowDeletingEvent) Is Nothing) Then
                RaiseEvent CalculationTypeRowDeleting(Me, New CalculationTypeRowChangeEvent(CType(e.Row,CalculationTypeRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveCalculationTypeRow(ByVal row As CalculationTypeRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As dsScriptScreens = New dsScriptScreens
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "CalculationTypeDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class AnswerCategoriesDataTable
        Inherits Global.System.Data.TypedTableBase(Of AnswerCategoriesRow)
        
        Private columnAnswerCategoryID As Global.System.Data.DataColumn
        
        Private columnQuestionID As Global.System.Data.DataColumn
        
        Private columnAnswerValue As Global.System.Data.DataColumn
        
        Private columnAnswerText As Global.System.Data.DataColumn
        
        Private columnAnswerCategoryTypeID As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "AnswerCategories"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property AnswerCategoryIDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnAnswerCategoryID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property QuestionIDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnQuestionID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property AnswerValueColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnAnswerValue
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property AnswerTextColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnAnswerText
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property AnswerCategoryTypeIDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnAnswerCategoryTypeID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As AnswerCategoriesRow
            Get
                Return CType(Me.Rows(index),AnswerCategoriesRow)
            End Get
        End Property
        
        Public Event AnswerCategoriesRowChanging As AnswerCategoriesRowChangeEventHandler
        
        Public Event AnswerCategoriesRowChanged As AnswerCategoriesRowChangeEventHandler
        
        Public Event AnswerCategoriesRowDeleting As AnswerCategoriesRowChangeEventHandler
        
        Public Event AnswerCategoriesRowDeleted As AnswerCategoriesRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddAnswerCategoriesRow(ByVal row As AnswerCategoriesRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddAnswerCategoriesRow(ByVal QuestionID As Integer, ByVal AnswerValue As Integer, ByVal AnswerText As String, ByVal parentAnswerCategoryTypesRowByAnswerCategoryTypesAnswerCategories As AnswerCategoryTypesRow) As AnswerCategoriesRow
            Dim rowAnswerCategoriesRow As AnswerCategoriesRow = CType(Me.NewRow,AnswerCategoriesRow)
            Dim columnValuesArray() As Object = New Object() {Nothing, QuestionID, AnswerValue, AnswerText, Nothing}
            If (Not (parentAnswerCategoryTypesRowByAnswerCategoryTypesAnswerCategories) Is Nothing) Then
                columnValuesArray(4) = parentAnswerCategoryTypesRowByAnswerCategoryTypesAnswerCategories(0)
            End If
            rowAnswerCategoriesRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowAnswerCategoriesRow)
            Return rowAnswerCategoriesRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByAnswerCategoryID(ByVal AnswerCategoryID As Integer) As AnswerCategoriesRow
            Return CType(Me.Rows.Find(New Object() {AnswerCategoryID}),AnswerCategoriesRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As AnswerCategoriesDataTable = CType(MyBase.Clone,AnswerCategoriesDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New AnswerCategoriesDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnAnswerCategoryID = MyBase.Columns("AnswerCategoryID")
            Me.columnQuestionID = MyBase.Columns("QuestionID")
            Me.columnAnswerValue = MyBase.Columns("AnswerValue")
            Me.columnAnswerText = MyBase.Columns("AnswerText")
            Me.columnAnswerCategoryTypeID = MyBase.Columns("AnswerCategoryTypeID")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnAnswerCategoryID = New Global.System.Data.DataColumn("AnswerCategoryID", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAnswerCategoryID)
            Me.columnQuestionID = New Global.System.Data.DataColumn("QuestionID", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnQuestionID)
            Me.columnAnswerValue = New Global.System.Data.DataColumn("AnswerValue", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAnswerValue)
            Me.columnAnswerText = New Global.System.Data.DataColumn("AnswerText", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAnswerText)
            Me.columnAnswerCategoryTypeID = New Global.System.Data.DataColumn("AnswerCategoryTypeID", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAnswerCategoryTypeID)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("dsScriptScreensKey3", New Global.System.Data.DataColumn() {Me.columnAnswerCategoryID}, true))
            Me.columnAnswerCategoryID.AutoIncrement = true
            Me.columnAnswerCategoryID.AllowDBNull = false
            Me.columnAnswerCategoryID.ReadOnly = true
            Me.columnAnswerCategoryID.Unique = true
            Me.columnQuestionID.AllowDBNull = false
            Me.columnAnswerValue.AllowDBNull = false
            Me.columnAnswerText.AllowDBNull = false
            Me.columnAnswerCategoryTypeID.AllowDBNull = false
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewAnswerCategoriesRow() As AnswerCategoriesRow
            Return CType(Me.NewRow,AnswerCategoriesRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New AnswerCategoriesRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(AnswerCategoriesRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.AnswerCategoriesRowChangedEvent) Is Nothing) Then
                RaiseEvent AnswerCategoriesRowChanged(Me, New AnswerCategoriesRowChangeEvent(CType(e.Row,AnswerCategoriesRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.AnswerCategoriesRowChangingEvent) Is Nothing) Then
                RaiseEvent AnswerCategoriesRowChanging(Me, New AnswerCategoriesRowChangeEvent(CType(e.Row,AnswerCategoriesRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.AnswerCategoriesRowDeletedEvent) Is Nothing) Then
                RaiseEvent AnswerCategoriesRowDeleted(Me, New AnswerCategoriesRowChangeEvent(CType(e.Row,AnswerCategoriesRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.AnswerCategoriesRowDeletingEvent) Is Nothing) Then
                RaiseEvent AnswerCategoriesRowDeleting(Me, New AnswerCategoriesRowChangeEvent(CType(e.Row,AnswerCategoriesRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveAnswerCategoriesRow(ByVal row As AnswerCategoriesRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As dsScriptScreens = New dsScriptScreens
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "AnswerCategoriesDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class AnswerCategoryTypesDataTable
        Inherits Global.System.Data.TypedTableBase(Of AnswerCategoryTypesRow)
        
        Private columnAnswerCategoryTypeID As Global.System.Data.DataColumn
        
        Private columnName As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "AnswerCategoryTypes"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property AnswerCategoryTypeIDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnAnswerCategoryTypeID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnName
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As AnswerCategoryTypesRow
            Get
                Return CType(Me.Rows(index),AnswerCategoryTypesRow)
            End Get
        End Property
        
        Public Event AnswerCategoryTypesRowChanging As AnswerCategoryTypesRowChangeEventHandler
        
        Public Event AnswerCategoryTypesRowChanged As AnswerCategoryTypesRowChangeEventHandler
        
        Public Event AnswerCategoryTypesRowDeleting As AnswerCategoryTypesRowChangeEventHandler
        
        Public Event AnswerCategoryTypesRowDeleted As AnswerCategoryTypesRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddAnswerCategoryTypesRow(ByVal row As AnswerCategoryTypesRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddAnswerCategoryTypesRow(ByVal AnswerCategoryTypeID As Integer, ByVal Name As String) As AnswerCategoryTypesRow
            Dim rowAnswerCategoryTypesRow As AnswerCategoryTypesRow = CType(Me.NewRow,AnswerCategoryTypesRow)
            Dim columnValuesArray() As Object = New Object() {AnswerCategoryTypeID, Name}
            rowAnswerCategoryTypesRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowAnswerCategoryTypesRow)
            Return rowAnswerCategoryTypesRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByAnswerCategoryTypeID(ByVal AnswerCategoryTypeID As Integer) As AnswerCategoryTypesRow
            Return CType(Me.Rows.Find(New Object() {AnswerCategoryTypeID}),AnswerCategoryTypesRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As AnswerCategoryTypesDataTable = CType(MyBase.Clone,AnswerCategoryTypesDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New AnswerCategoryTypesDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnAnswerCategoryTypeID = MyBase.Columns("AnswerCategoryTypeID")
            Me.columnName = MyBase.Columns("Name")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnAnswerCategoryTypeID = New Global.System.Data.DataColumn("AnswerCategoryTypeID", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAnswerCategoryTypeID)
            Me.columnName = New Global.System.Data.DataColumn("Name", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnName)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("dsScriptScreensKey4", New Global.System.Data.DataColumn() {Me.columnAnswerCategoryTypeID}, true))
            Me.columnAnswerCategoryTypeID.AllowDBNull = false
            Me.columnAnswerCategoryTypeID.Unique = true
            Me.columnName.AllowDBNull = false
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewAnswerCategoryTypesRow() As AnswerCategoryTypesRow
            Return CType(Me.NewRow,AnswerCategoryTypesRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New AnswerCategoryTypesRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(AnswerCategoryTypesRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.AnswerCategoryTypesRowChangedEvent) Is Nothing) Then
                RaiseEvent AnswerCategoryTypesRowChanged(Me, New AnswerCategoryTypesRowChangeEvent(CType(e.Row,AnswerCategoryTypesRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.AnswerCategoryTypesRowChangingEvent) Is Nothing) Then
                RaiseEvent AnswerCategoryTypesRowChanging(Me, New AnswerCategoryTypesRowChangeEvent(CType(e.Row,AnswerCategoryTypesRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.AnswerCategoryTypesRowDeletedEvent) Is Nothing) Then
                RaiseEvent AnswerCategoryTypesRowDeleted(Me, New AnswerCategoryTypesRowChangeEvent(CType(e.Row,AnswerCategoryTypesRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.AnswerCategoryTypesRowDeletingEvent) Is Nothing) Then
                RaiseEvent AnswerCategoryTypesRowDeleting(Me, New AnswerCategoryTypesRowChangeEvent(CType(e.Row,AnswerCategoryTypesRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveAnswerCategoryTypesRow(ByVal row As AnswerCategoryTypesRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As dsScriptScreens = New dsScriptScreens
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "AnswerCategoryTypesDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class ScriptScreensRow
        Inherits Global.System.Data.DataRow
        
        Private tableScriptScreens As ScriptScreensDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableScriptScreens = CType(Me.Table,ScriptScreensDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ScriptScreenID() As Integer
            Get
                Return CType(Me(Me.tableScriptScreens.ScriptScreenIDColumn),Integer)
            End Get
            Set
                Me(Me.tableScriptScreens.ScriptScreenIDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ScriptID() As Integer
            Get
                Return CType(Me(Me.tableScriptScreens.ScriptIDColumn),Integer)
            End Get
            Set
                Me(Me.tableScriptScreens.ScriptIDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SurveyQuestionID() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableScriptScreens.SurveyQuestionIDColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'SurveyQuestionID' in table 'ScriptScreens' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableScriptScreens.SurveyQuestionIDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Title() As String
            Get
                Return CType(Me(Me.tableScriptScreens.TitleColumn),String)
            End Get
            Set
                Me(Me.tableScriptScreens.TitleColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Text() As String
            Get
                Return CType(Me(Me.tableScriptScreens.TextColumn),String)
            End Get
            Set
                Me(Me.tableScriptScreens.TextColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CalculationTypeID() As Integer
            Get
                Return CType(Me(Me.tableScriptScreens.CalculationTypeIDColumn),Integer)
            End Get
            Set
                Me(Me.tableScriptScreens.CalculationTypeIDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ItemOrder() As Integer
            Get
                Return CType(Me(Me.tableScriptScreens.ItemOrderColumn),Integer)
            End Get
            Set
                Me(Me.tableScriptScreens.ItemOrderColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CalculationTypeRow() As CalculationTypeRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("CalculationTypeScriptScreens")),CalculationTypeRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("CalculationTypeScriptScreens"))
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSurveyQuestionIDNull() As Boolean
            Return Me.IsNull(Me.tableScriptScreens.SurveyQuestionIDColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSurveyQuestionIDNull()
            Me(Me.tableScriptScreens.SurveyQuestionIDColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function GetScriptScreenCategoriesRows() As ScriptScreenCategoriesRow()
            If (Me.Table.ChildRelations("ScriptScreensScriptScreenCategories") Is Nothing) Then
                Return New ScriptScreenCategoriesRow(-1) {}
            Else
                Return CType(MyBase.GetChildRows(Me.Table.ChildRelations("ScriptScreensScriptScreenCategories")),ScriptScreenCategoriesRow())
            End If
        End Function
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class ScriptScreenCategoriesRow
        Inherits Global.System.Data.DataRow
        
        Private tableScriptScreenCategories As ScriptScreenCategoriesDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableScriptScreenCategories = CType(Me.Table,ScriptScreenCategoriesDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ScriptScreenCategoryID() As Integer
            Get
                Return CType(Me(Me.tableScriptScreenCategories.ScriptScreenCategoryIDColumn),Integer)
            End Get
            Set
                Me(Me.tableScriptScreenCategories.ScriptScreenCategoryIDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ScriptScreenID() As Integer
            Get
                Return CType(Me(Me.tableScriptScreenCategories.ScriptScreenIDColumn),Integer)
            End Get
            Set
                Me(Me.tableScriptScreenCategories.ScriptScreenIDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property AnswerCategoryID() As Integer
            Get
                Return CType(Me(Me.tableScriptScreenCategories.AnswerCategoryIDColumn),Integer)
            End Get
            Set
                Me(Me.tableScriptScreenCategories.AnswerCategoryIDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property JumpToScriptScreenID() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableScriptScreenCategories.JumpToScriptScreenIDColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'JumpToScriptScreenID' in table 'ScriptScreenCategories' is "& _ 
                            "DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableScriptScreenCategories.JumpToScriptScreenIDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Text() As String
            Get
                Try 
                    Return CType(Me(Me.tableScriptScreenCategories.TextColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Text' in table 'ScriptScreenCategories' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableScriptScreenCategories.TextColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ScriptScreensRow() As ScriptScreensRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("ScriptScreensScriptScreenCategories")),ScriptScreensRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("ScriptScreensScriptScreenCategories"))
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property AnswerCategoriesRow() As AnswerCategoriesRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("AnswerCategoriesScriptScreenCategories")),AnswerCategoriesRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("AnswerCategoriesScriptScreenCategories"))
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsJumpToScriptScreenIDNull() As Boolean
            Return Me.IsNull(Me.tableScriptScreenCategories.JumpToScriptScreenIDColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetJumpToScriptScreenIDNull()
            Me(Me.tableScriptScreenCategories.JumpToScriptScreenIDColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTextNull() As Boolean
            Return Me.IsNull(Me.tableScriptScreenCategories.TextColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTextNull()
            Me(Me.tableScriptScreenCategories.TextColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class SearchRow
        Inherits Global.System.Data.DataRow
        
        Private tableSearch As SearchDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableSearch = CType(Me.Table,SearchDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ScriptScreenID() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableSearch.ScriptScreenIDColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ScriptScreenID' in table 'Search' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSearch.ScriptScreenIDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ScriptID() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableSearch.ScriptIDColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ScriptID' in table 'Search' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSearch.ScriptIDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SurveyQuestionID() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableSearch.SurveyQuestionIDColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'SurveyQuestionID' in table 'Search' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSearch.SurveyQuestionIDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Keyword() As String
            Get
                Try 
                    Return CType(Me(Me.tableSearch.KeywordColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Keyword' in table 'Search' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSearch.KeywordColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ItemOrder() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableSearch.ItemOrderColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ItemOrder' in table 'Search' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSearch.ItemOrderColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsScriptScreenIDNull() As Boolean
            Return Me.IsNull(Me.tableSearch.ScriptScreenIDColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetScriptScreenIDNull()
            Me(Me.tableSearch.ScriptScreenIDColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsScriptIDNull() As Boolean
            Return Me.IsNull(Me.tableSearch.ScriptIDColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetScriptIDNull()
            Me(Me.tableSearch.ScriptIDColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSurveyQuestionIDNull() As Boolean
            Return Me.IsNull(Me.tableSearch.SurveyQuestionIDColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSurveyQuestionIDNull()
            Me(Me.tableSearch.SurveyQuestionIDColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsKeywordNull() As Boolean
            Return Me.IsNull(Me.tableSearch.KeywordColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetKeywordNull()
            Me(Me.tableSearch.KeywordColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsItemOrderNull() As Boolean
            Return Me.IsNull(Me.tableSearch.ItemOrderColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetItemOrderNull()
            Me(Me.tableSearch.ItemOrderColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class CalculationTypeRow
        Inherits Global.System.Data.DataRow
        
        Private tableCalculationType As CalculationTypeDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableCalculationType = CType(Me.Table,CalculationTypeDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CalculationTypeID() As Integer
            Get
                Return CType(Me(Me.tableCalculationType.CalculationTypeIDColumn),Integer)
            End Get
            Set
                Me(Me.tableCalculationType.CalculationTypeIDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Name() As String
            Get
                Try 
                    Return CType(Me(Me.tableCalculationType.NameColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Name' in table 'CalculationType' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCalculationType.NameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsNameNull() As Boolean
            Return Me.IsNull(Me.tableCalculationType.NameColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetNameNull()
            Me(Me.tableCalculationType.NameColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function GetScriptScreensRows() As ScriptScreensRow()
            If (Me.Table.ChildRelations("CalculationTypeScriptScreens") Is Nothing) Then
                Return New ScriptScreensRow(-1) {}
            Else
                Return CType(MyBase.GetChildRows(Me.Table.ChildRelations("CalculationTypeScriptScreens")),ScriptScreensRow())
            End If
        End Function
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class AnswerCategoriesRow
        Inherits Global.System.Data.DataRow
        
        Private tableAnswerCategories As AnswerCategoriesDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableAnswerCategories = CType(Me.Table,AnswerCategoriesDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property AnswerCategoryID() As Integer
            Get
                Return CType(Me(Me.tableAnswerCategories.AnswerCategoryIDColumn),Integer)
            End Get
            Set
                Me(Me.tableAnswerCategories.AnswerCategoryIDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property QuestionID() As Integer
            Get
                Return CType(Me(Me.tableAnswerCategories.QuestionIDColumn),Integer)
            End Get
            Set
                Me(Me.tableAnswerCategories.QuestionIDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property AnswerValue() As Integer
            Get
                Return CType(Me(Me.tableAnswerCategories.AnswerValueColumn),Integer)
            End Get
            Set
                Me(Me.tableAnswerCategories.AnswerValueColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property AnswerText() As String
            Get
                Return CType(Me(Me.tableAnswerCategories.AnswerTextColumn),String)
            End Get
            Set
                Me(Me.tableAnswerCategories.AnswerTextColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property AnswerCategoryTypeID() As Integer
            Get
                Return CType(Me(Me.tableAnswerCategories.AnswerCategoryTypeIDColumn),Integer)
            End Get
            Set
                Me(Me.tableAnswerCategories.AnswerCategoryTypeIDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property AnswerCategoryTypesRow() As AnswerCategoryTypesRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("AnswerCategoryTypesAnswerCategories")),AnswerCategoryTypesRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("AnswerCategoryTypesAnswerCategories"))
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function GetScriptScreenCategoriesRows() As ScriptScreenCategoriesRow()
            If (Me.Table.ChildRelations("AnswerCategoriesScriptScreenCategories") Is Nothing) Then
                Return New ScriptScreenCategoriesRow(-1) {}
            Else
                Return CType(MyBase.GetChildRows(Me.Table.ChildRelations("AnswerCategoriesScriptScreenCategories")),ScriptScreenCategoriesRow())
            End If
        End Function
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class AnswerCategoryTypesRow
        Inherits Global.System.Data.DataRow
        
        Private tableAnswerCategoryTypes As AnswerCategoryTypesDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableAnswerCategoryTypes = CType(Me.Table,AnswerCategoryTypesDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property AnswerCategoryTypeID() As Integer
            Get
                Return CType(Me(Me.tableAnswerCategoryTypes.AnswerCategoryTypeIDColumn),Integer)
            End Get
            Set
                Me(Me.tableAnswerCategoryTypes.AnswerCategoryTypeIDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Name() As String
            Get
                Return CType(Me(Me.tableAnswerCategoryTypes.NameColumn),String)
            End Get
            Set
                Me(Me.tableAnswerCategoryTypes.NameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function GetAnswerCategoriesRows() As AnswerCategoriesRow()
            If (Me.Table.ChildRelations("AnswerCategoryTypesAnswerCategories") Is Nothing) Then
                Return New AnswerCategoriesRow(-1) {}
            Else
                Return CType(MyBase.GetChildRows(Me.Table.ChildRelations("AnswerCategoryTypesAnswerCategories")),AnswerCategoriesRow())
            End If
        End Function
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class ScriptScreensRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As ScriptScreensRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As ScriptScreensRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As ScriptScreensRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class ScriptScreenCategoriesRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As ScriptScreenCategoriesRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As ScriptScreenCategoriesRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As ScriptScreenCategoriesRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class SearchRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As SearchRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As SearchRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As SearchRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class CalculationTypeRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As CalculationTypeRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As CalculationTypeRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As CalculationTypeRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class AnswerCategoriesRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As AnswerCategoriesRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As AnswerCategoriesRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As AnswerCategoriesRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class AnswerCategoryTypesRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As AnswerCategoryTypesRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As AnswerCategoryTypesRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As AnswerCategoryTypesRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
End Class

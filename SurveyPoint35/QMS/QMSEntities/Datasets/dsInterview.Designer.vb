'------------------------------------------------------------------------------
' <auto-generated>
'     This code was generated by a tool.
'     Runtime Version:2.0.50727.1433
'
'     Changes to this file may cause incorrect behavior and will be lost if
'     the code is regenerated.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On



'''<summary>
'''Represents a strongly typed in-memory cache of data.
'''</summary>
<Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
 Global.System.Serializable(),  _
 Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
 Global.System.ComponentModel.ToolboxItem(true),  _
 Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema"),  _
 Global.System.Xml.Serialization.XmlRootAttribute("dsInterview"),  _
 Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")>  _
Partial Public Class dsInterview
    Inherits Global.System.Data.DataSet
    
    Private tableScripts As ScriptsDataTable
    
    Private tableScriptScreens As ScriptScreensDataTable
    
    Private tableScriptScreenCategories As ScriptScreenCategoriesDataTable
    
    Private tableRespondents As RespondentsDataTable
    
    Private tableResponses As ResponsesDataTable
    
    Private tableScriptedTriggers As ScriptedTriggersDataTable
    
    Private tableEventLog As EventLogDataTable
    
    Private relationScriptsScriptScreens As Global.System.Data.DataRelation
    
    Private relationScriptScreensScriptScreenCategories As Global.System.Data.DataRelation
    
    Private relationRespondentsResponses As Global.System.Data.DataRelation
    
    Private relationRespondentsEventLog As Global.System.Data.DataRelation
    
    Private _schemaSerializationMode As Global.System.Data.SchemaSerializationMode = Global.System.Data.SchemaSerializationMode.IncludeSchema
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Sub New()
        MyBase.New
        Me.BeginInit
        Me.InitClass
        Dim schemaChangedHandler As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler MyBase.Relations.CollectionChanged, schemaChangedHandler
        Me.EndInit
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
        MyBase.New(info, context, false)
        If (Me.IsBinarySerialized(info, context) = true) Then
            Me.InitVars(false)
            Dim schemaChangedHandler1 As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
            AddHandler Me.Tables.CollectionChanged, schemaChangedHandler1
            AddHandler Me.Relations.CollectionChanged, schemaChangedHandler1
            Return
        End If
        Dim strSchema As String = CType(info.GetValue("XmlSchema", GetType(String)),String)
        If (Me.DetermineSchemaSerializationMode(info, context) = Global.System.Data.SchemaSerializationMode.IncludeSchema) Then
            Dim ds As Global.System.Data.DataSet = New Global.System.Data.DataSet
            ds.ReadXmlSchema(New Global.System.Xml.XmlTextReader(New Global.System.IO.StringReader(strSchema)))
            If (Not (ds.Tables("Scripts")) Is Nothing) Then
                MyBase.Tables.Add(New ScriptsDataTable(ds.Tables("Scripts")))
            End If
            If (Not (ds.Tables("ScriptScreens")) Is Nothing) Then
                MyBase.Tables.Add(New ScriptScreensDataTable(ds.Tables("ScriptScreens")))
            End If
            If (Not (ds.Tables("ScriptScreenCategories")) Is Nothing) Then
                MyBase.Tables.Add(New ScriptScreenCategoriesDataTable(ds.Tables("ScriptScreenCategories")))
            End If
            If (Not (ds.Tables("Respondents")) Is Nothing) Then
                MyBase.Tables.Add(New RespondentsDataTable(ds.Tables("Respondents")))
            End If
            If (Not (ds.Tables("Responses")) Is Nothing) Then
                MyBase.Tables.Add(New ResponsesDataTable(ds.Tables("Responses")))
            End If
            If (Not (ds.Tables("ScriptedTriggers")) Is Nothing) Then
                MyBase.Tables.Add(New ScriptedTriggersDataTable(ds.Tables("ScriptedTriggers")))
            End If
            If (Not (ds.Tables("EventLog")) Is Nothing) Then
                MyBase.Tables.Add(New EventLogDataTable(ds.Tables("EventLog")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, Global.System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.ReadXmlSchema(New Global.System.Xml.XmlTextReader(New Global.System.IO.StringReader(strSchema)))
        End If
        Me.GetSerializationData(info, context)
        Dim schemaChangedHandler As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property Scripts() As ScriptsDataTable
        Get
            Return Me.tableScripts
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property ScriptScreens() As ScriptScreensDataTable
        Get
            Return Me.tableScriptScreens
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property ScriptScreenCategories() As ScriptScreenCategoriesDataTable
        Get
            Return Me.tableScriptScreenCategories
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property Respondents() As RespondentsDataTable
        Get
            Return Me.tableRespondents
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property Responses() As ResponsesDataTable
        Get
            Return Me.tableResponses
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property ScriptedTriggers() As ScriptedTriggersDataTable
        Get
            Return Me.tableScriptedTriggers
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property EventLog() As EventLogDataTable
        Get
            Return Me.tableEventLog
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.BrowsableAttribute(true),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Visible)>  _
    Public Overrides Property SchemaSerializationMode() As Global.System.Data.SchemaSerializationMode
        Get
            Return Me._schemaSerializationMode
        End Get
        Set
            Me._schemaSerializationMode = value
        End Set
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Hidden)>  _
    Public Shadows ReadOnly Property Tables() As Global.System.Data.DataTableCollection
        Get
            Return MyBase.Tables
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Hidden)>  _
    Public Shadows ReadOnly Property Relations() As Global.System.Data.DataRelationCollection
        Get
            Return MyBase.Relations
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Sub InitializeDerivedDataSet()
        Me.BeginInit
        Me.InitClass
        Me.EndInit
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Overrides Function Clone() As Global.System.Data.DataSet
        Dim cln As dsInterview = CType(MyBase.Clone,dsInterview)
        cln.InitVars
        cln.SchemaSerializationMode = Me.SchemaSerializationMode
        Return cln
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function ShouldSerializeTables() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function ShouldSerializeRelations() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Sub ReadXmlSerializable(ByVal reader As Global.System.Xml.XmlReader)
        If (Me.DetermineSchemaSerializationMode(reader) = Global.System.Data.SchemaSerializationMode.IncludeSchema) Then
            Me.Reset
            Dim ds As Global.System.Data.DataSet = New Global.System.Data.DataSet
            ds.ReadXml(reader)
            If (Not (ds.Tables("Scripts")) Is Nothing) Then
                MyBase.Tables.Add(New ScriptsDataTable(ds.Tables("Scripts")))
            End If
            If (Not (ds.Tables("ScriptScreens")) Is Nothing) Then
                MyBase.Tables.Add(New ScriptScreensDataTable(ds.Tables("ScriptScreens")))
            End If
            If (Not (ds.Tables("ScriptScreenCategories")) Is Nothing) Then
                MyBase.Tables.Add(New ScriptScreenCategoriesDataTable(ds.Tables("ScriptScreenCategories")))
            End If
            If (Not (ds.Tables("Respondents")) Is Nothing) Then
                MyBase.Tables.Add(New RespondentsDataTable(ds.Tables("Respondents")))
            End If
            If (Not (ds.Tables("Responses")) Is Nothing) Then
                MyBase.Tables.Add(New ResponsesDataTable(ds.Tables("Responses")))
            End If
            If (Not (ds.Tables("ScriptedTriggers")) Is Nothing) Then
                MyBase.Tables.Add(New ScriptedTriggersDataTable(ds.Tables("ScriptedTriggers")))
            End If
            If (Not (ds.Tables("EventLog")) Is Nothing) Then
                MyBase.Tables.Add(New EventLogDataTable(ds.Tables("EventLog")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, Global.System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.ReadXml(reader)
            Me.InitVars
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function GetSchemaSerializable() As Global.System.Xml.Schema.XmlSchema
        Dim stream As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
        Me.WriteXmlSchema(New Global.System.Xml.XmlTextWriter(stream, Nothing))
        stream.Position = 0
        Return Global.System.Xml.Schema.XmlSchema.Read(New Global.System.Xml.XmlTextReader(stream), Nothing)
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Friend Overloads Sub InitVars()
        Me.InitVars(true)
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Friend Overloads Sub InitVars(ByVal initTable As Boolean)
        Me.tableScripts = CType(MyBase.Tables("Scripts"),ScriptsDataTable)
        If (initTable = true) Then
            If (Not (Me.tableScripts) Is Nothing) Then
                Me.tableScripts.InitVars
            End If
        End If
        Me.tableScriptScreens = CType(MyBase.Tables("ScriptScreens"),ScriptScreensDataTable)
        If (initTable = true) Then
            If (Not (Me.tableScriptScreens) Is Nothing) Then
                Me.tableScriptScreens.InitVars
            End If
        End If
        Me.tableScriptScreenCategories = CType(MyBase.Tables("ScriptScreenCategories"),ScriptScreenCategoriesDataTable)
        If (initTable = true) Then
            If (Not (Me.tableScriptScreenCategories) Is Nothing) Then
                Me.tableScriptScreenCategories.InitVars
            End If
        End If
        Me.tableRespondents = CType(MyBase.Tables("Respondents"),RespondentsDataTable)
        If (initTable = true) Then
            If (Not (Me.tableRespondents) Is Nothing) Then
                Me.tableRespondents.InitVars
            End If
        End If
        Me.tableResponses = CType(MyBase.Tables("Responses"),ResponsesDataTable)
        If (initTable = true) Then
            If (Not (Me.tableResponses) Is Nothing) Then
                Me.tableResponses.InitVars
            End If
        End If
        Me.tableScriptedTriggers = CType(MyBase.Tables("ScriptedTriggers"),ScriptedTriggersDataTable)
        If (initTable = true) Then
            If (Not (Me.tableScriptedTriggers) Is Nothing) Then
                Me.tableScriptedTriggers.InitVars
            End If
        End If
        Me.tableEventLog = CType(MyBase.Tables("EventLog"),EventLogDataTable)
        If (initTable = true) Then
            If (Not (Me.tableEventLog) Is Nothing) Then
                Me.tableEventLog.InitVars
            End If
        End If
        Me.relationScriptsScriptScreens = Me.Relations("ScriptsScriptScreens")
        Me.relationScriptScreensScriptScreenCategories = Me.Relations("ScriptScreensScriptScreenCategories")
        Me.relationRespondentsResponses = Me.Relations("RespondentsResponses")
        Me.relationRespondentsEventLog = Me.Relations("RespondentsEventLog")
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Sub InitClass()
        Me.DataSetName = "dsInterview"
        Me.Prefix = ""
        Me.Namespace = "http://tempuri.org/dsInterview.xsd"
        Me.EnforceConstraints = true
        Me.SchemaSerializationMode = Global.System.Data.SchemaSerializationMode.IncludeSchema
        Me.tableScripts = New ScriptsDataTable
        MyBase.Tables.Add(Me.tableScripts)
        Me.tableScriptScreens = New ScriptScreensDataTable
        MyBase.Tables.Add(Me.tableScriptScreens)
        Me.tableScriptScreenCategories = New ScriptScreenCategoriesDataTable
        MyBase.Tables.Add(Me.tableScriptScreenCategories)
        Me.tableRespondents = New RespondentsDataTable
        MyBase.Tables.Add(Me.tableRespondents)
        Me.tableResponses = New ResponsesDataTable
        MyBase.Tables.Add(Me.tableResponses)
        Me.tableScriptedTriggers = New ScriptedTriggersDataTable
        MyBase.Tables.Add(Me.tableScriptedTriggers)
        Me.tableEventLog = New EventLogDataTable
        MyBase.Tables.Add(Me.tableEventLog)
        Dim fkc As Global.System.Data.ForeignKeyConstraint
        fkc = New Global.System.Data.ForeignKeyConstraint("ScriptsScriptScreens", New Global.System.Data.DataColumn() {Me.tableScripts.ScriptIDColumn}, New Global.System.Data.DataColumn() {Me.tableScriptScreens.ScriptIDColumn})
        Me.tableScriptScreens.Constraints.Add(fkc)
        fkc.AcceptRejectRule = Global.System.Data.AcceptRejectRule.None
        fkc.DeleteRule = Global.System.Data.Rule.Cascade
        fkc.UpdateRule = Global.System.Data.Rule.Cascade
        fkc = New Global.System.Data.ForeignKeyConstraint("ScriptScreensScriptScreenCategories", New Global.System.Data.DataColumn() {Me.tableScriptScreens.ScriptScreenIDColumn}, New Global.System.Data.DataColumn() {Me.tableScriptScreenCategories.ScriptScreenIDColumn})
        Me.tableScriptScreenCategories.Constraints.Add(fkc)
        fkc.AcceptRejectRule = Global.System.Data.AcceptRejectRule.None
        fkc.DeleteRule = Global.System.Data.Rule.Cascade
        fkc.UpdateRule = Global.System.Data.Rule.Cascade
        fkc = New Global.System.Data.ForeignKeyConstraint("RespondentsResponses", New Global.System.Data.DataColumn() {Me.tableRespondents.RespondentIDColumn}, New Global.System.Data.DataColumn() {Me.tableResponses.RespondentIDColumn})
        Me.tableResponses.Constraints.Add(fkc)
        fkc.AcceptRejectRule = Global.System.Data.AcceptRejectRule.None
        fkc.DeleteRule = Global.System.Data.Rule.Cascade
        fkc.UpdateRule = Global.System.Data.Rule.Cascade
        fkc = New Global.System.Data.ForeignKeyConstraint("RespondentsEventLog", New Global.System.Data.DataColumn() {Me.tableRespondents.RespondentIDColumn}, New Global.System.Data.DataColumn() {Me.tableEventLog.RespondentIDColumn})
        Me.tableEventLog.Constraints.Add(fkc)
        fkc.AcceptRejectRule = Global.System.Data.AcceptRejectRule.None
        fkc.DeleteRule = Global.System.Data.Rule.Cascade
        fkc.UpdateRule = Global.System.Data.Rule.Cascade
        Me.relationScriptsScriptScreens = New Global.System.Data.DataRelation("ScriptsScriptScreens", New Global.System.Data.DataColumn() {Me.tableScripts.ScriptIDColumn}, New Global.System.Data.DataColumn() {Me.tableScriptScreens.ScriptIDColumn}, false)
        Me.Relations.Add(Me.relationScriptsScriptScreens)
        Me.relationScriptScreensScriptScreenCategories = New Global.System.Data.DataRelation("ScriptScreensScriptScreenCategories", New Global.System.Data.DataColumn() {Me.tableScriptScreens.ScriptScreenIDColumn}, New Global.System.Data.DataColumn() {Me.tableScriptScreenCategories.ScriptScreenIDColumn}, false)
        Me.Relations.Add(Me.relationScriptScreensScriptScreenCategories)
        Me.relationRespondentsResponses = New Global.System.Data.DataRelation("RespondentsResponses", New Global.System.Data.DataColumn() {Me.tableRespondents.RespondentIDColumn}, New Global.System.Data.DataColumn() {Me.tableResponses.RespondentIDColumn}, false)
        Me.Relations.Add(Me.relationRespondentsResponses)
        Me.relationRespondentsEventLog = New Global.System.Data.DataRelation("RespondentsEventLog", New Global.System.Data.DataColumn() {Me.tableRespondents.RespondentIDColumn}, New Global.System.Data.DataColumn() {Me.tableEventLog.RespondentIDColumn}, false)
        Me.Relations.Add(Me.relationRespondentsEventLog)
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeScripts() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeScriptScreens() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeScriptScreenCategories() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeRespondents() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeResponses() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeScriptedTriggers() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeEventLog() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Sub SchemaChanged(ByVal sender As Object, ByVal e As Global.System.ComponentModel.CollectionChangeEventArgs)
        If (e.Action = Global.System.ComponentModel.CollectionChangeAction.Remove) Then
            Me.InitVars
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Shared Function GetTypedDataSetSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
        Dim ds As dsInterview = New dsInterview
        Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
        Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
        Dim any As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
        any.Namespace = ds.Namespace
        sequence.Items.Add(any)
        type.Particle = sequence
        Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
        If xs.Contains(dsSchema.TargetNamespace) Then
            Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
            Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
            Try 
                Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                dsSchema.Write(s1)
                Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                Do While schemas.MoveNext
                    schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                    s2.SetLength(0)
                    schema.Write(s2)
                    If (s1.Length = s2.Length) Then
                        s1.Position = 0
                        s2.Position = 0
                        
                        Do While ((s1.Position <> s1.Length)  _
                                    AndAlso (s1.ReadByte = s2.ReadByte))
                            
                            
                        Loop
                        If (s1.Position = s1.Length) Then
                            Return type
                        End If
                    End If
                    
                Loop
            Finally
                If (Not (s1) Is Nothing) Then
                    s1.Close
                End If
                If (Not (s2) Is Nothing) Then
                    s2.Close
                End If
            End Try
        End If
        xs.Add(dsSchema)
        Return type
    End Function
    
    Public Delegate Sub ScriptsRowChangeEventHandler(ByVal sender As Object, ByVal e As ScriptsRowChangeEvent)
    
    Public Delegate Sub ScriptScreensRowChangeEventHandler(ByVal sender As Object, ByVal e As ScriptScreensRowChangeEvent)
    
    Public Delegate Sub ScriptScreenCategoriesRowChangeEventHandler(ByVal sender As Object, ByVal e As ScriptScreenCategoriesRowChangeEvent)
    
    Public Delegate Sub RespondentsRowChangeEventHandler(ByVal sender As Object, ByVal e As RespondentsRowChangeEvent)
    
    Public Delegate Sub ResponsesRowChangeEventHandler(ByVal sender As Object, ByVal e As ResponsesRowChangeEvent)
    
    Public Delegate Sub ScriptedTriggersRowChangeEventHandler(ByVal sender As Object, ByVal e As ScriptedTriggersRowChangeEvent)
    
    Public Delegate Sub EventLogRowChangeEventHandler(ByVal sender As Object, ByVal e As EventLogRowChangeEvent)
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class ScriptsDataTable
        Inherits Global.System.Data.TypedTableBase(Of ScriptsRow)
        
        Private columnScriptID As Global.System.Data.DataColumn
        
        Private columnSurveyID As Global.System.Data.DataColumn
        
        Private columnScriptTypeID As Global.System.Data.DataColumn
        
        Private columnName As Global.System.Data.DataColumn
        
        Private columnDescription As Global.System.Data.DataColumn
        
        Private columnCompletenessLevel As Global.System.Data.DataColumn
        
        Private columnFollowSkips As Global.System.Data.DataColumn
        
        Private columnCalcCompleteness As Global.System.Data.DataColumn
        
        Private columnDefaultScript As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "Scripts"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ScriptIDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnScriptID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SurveyIDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSurveyID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ScriptTypeIDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnScriptTypeID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnName
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DescriptionColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDescription
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CompletenessLevelColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCompletenessLevel
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FollowSkipsColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFollowSkips
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CalcCompletenessColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCalcCompleteness
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DefaultScriptColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDefaultScript
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As ScriptsRow
            Get
                Return CType(Me.Rows(index),ScriptsRow)
            End Get
        End Property
        
        Public Event ScriptsRowChanging As ScriptsRowChangeEventHandler
        
        Public Event ScriptsRowChanged As ScriptsRowChangeEventHandler
        
        Public Event ScriptsRowDeleting As ScriptsRowChangeEventHandler
        
        Public Event ScriptsRowDeleted As ScriptsRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddScriptsRow(ByVal row As ScriptsRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddScriptsRow(ByVal SurveyID As Integer, ByVal ScriptTypeID As Integer, ByVal Name As String, ByVal Description As String, ByVal CompletenessLevel As Decimal, ByVal FollowSkips As Byte, ByVal CalcCompleteness As Byte, ByVal DefaultScript As Byte) As ScriptsRow
            Dim rowScriptsRow As ScriptsRow = CType(Me.NewRow,ScriptsRow)
            Dim columnValuesArray() As Object = New Object() {Nothing, SurveyID, ScriptTypeID, Name, Description, CompletenessLevel, FollowSkips, CalcCompleteness, DefaultScript}
            rowScriptsRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowScriptsRow)
            Return rowScriptsRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByScriptID(ByVal ScriptID As Integer) As ScriptsRow
            Return CType(Me.Rows.Find(New Object() {ScriptID}),ScriptsRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As ScriptsDataTable = CType(MyBase.Clone,ScriptsDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New ScriptsDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnScriptID = MyBase.Columns("ScriptID")
            Me.columnSurveyID = MyBase.Columns("SurveyID")
            Me.columnScriptTypeID = MyBase.Columns("ScriptTypeID")
            Me.columnName = MyBase.Columns("Name")
            Me.columnDescription = MyBase.Columns("Description")
            Me.columnCompletenessLevel = MyBase.Columns("CompletenessLevel")
            Me.columnFollowSkips = MyBase.Columns("FollowSkips")
            Me.columnCalcCompleteness = MyBase.Columns("CalcCompleteness")
            Me.columnDefaultScript = MyBase.Columns("DefaultScript")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnScriptID = New Global.System.Data.DataColumn("ScriptID", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnScriptID)
            Me.columnSurveyID = New Global.System.Data.DataColumn("SurveyID", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSurveyID)
            Me.columnScriptTypeID = New Global.System.Data.DataColumn("ScriptTypeID", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnScriptTypeID)
            Me.columnName = New Global.System.Data.DataColumn("Name", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnName)
            Me.columnDescription = New Global.System.Data.DataColumn("Description", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDescription)
            Me.columnCompletenessLevel = New Global.System.Data.DataColumn("CompletenessLevel", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCompletenessLevel)
            Me.columnFollowSkips = New Global.System.Data.DataColumn("FollowSkips", GetType(Byte), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFollowSkips)
            Me.columnCalcCompleteness = New Global.System.Data.DataColumn("CalcCompleteness", GetType(Byte), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCalcCompleteness)
            Me.columnDefaultScript = New Global.System.Data.DataColumn("DefaultScript", GetType(Byte), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDefaultScript)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("dsInterviewKey1", New Global.System.Data.DataColumn() {Me.columnScriptID}, true))
            Me.columnScriptID.AutoIncrement = true
            Me.columnScriptID.AllowDBNull = false
            Me.columnScriptID.ReadOnly = true
            Me.columnScriptID.Unique = true
            Me.columnSurveyID.AllowDBNull = false
            Me.columnScriptTypeID.AllowDBNull = false
            Me.columnName.AllowDBNull = false
            Me.columnDescription.AllowDBNull = false
            Me.columnCompletenessLevel.AllowDBNull = false
            Me.columnFollowSkips.AllowDBNull = false
            Me.columnCalcCompleteness.AllowDBNull = false
            Me.columnDefaultScript.AllowDBNull = false
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewScriptsRow() As ScriptsRow
            Return CType(Me.NewRow,ScriptsRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New ScriptsRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(ScriptsRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.ScriptsRowChangedEvent) Is Nothing) Then
                RaiseEvent ScriptsRowChanged(Me, New ScriptsRowChangeEvent(CType(e.Row,ScriptsRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.ScriptsRowChangingEvent) Is Nothing) Then
                RaiseEvent ScriptsRowChanging(Me, New ScriptsRowChangeEvent(CType(e.Row,ScriptsRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.ScriptsRowDeletedEvent) Is Nothing) Then
                RaiseEvent ScriptsRowDeleted(Me, New ScriptsRowChangeEvent(CType(e.Row,ScriptsRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.ScriptsRowDeletingEvent) Is Nothing) Then
                RaiseEvent ScriptsRowDeleting(Me, New ScriptsRowChangeEvent(CType(e.Row,ScriptsRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveScriptsRow(ByVal row As ScriptsRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As dsInterview = New dsInterview
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "ScriptsDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class ScriptScreensDataTable
        Inherits Global.System.Data.TypedTableBase(Of ScriptScreensRow)
        
        Private columnScriptScreenID As Global.System.Data.DataColumn
        
        Private columnScriptID As Global.System.Data.DataColumn
        
        Private columnSurveyQuestionID As Global.System.Data.DataColumn
        
        Private columnTitle As Global.System.Data.DataColumn
        
        Private columnText As Global.System.Data.DataColumn
        
        Private columnCalculationTypeID As Global.System.Data.DataColumn
        
        Private columnItemOrder As Global.System.Data.DataColumn
        
        Private columnStatus As Global.System.Data.DataColumn
        
        Private columnQuestionTypeID As Global.System.Data.DataColumn
        
        Private columnJumpIndex As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "ScriptScreens"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ScriptScreenIDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnScriptScreenID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ScriptIDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnScriptID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SurveyQuestionIDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSurveyQuestionID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TitleColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTitle
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TextColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnText
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CalculationTypeIDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCalculationTypeID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ItemOrderColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnItemOrder
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property StatusColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnStatus
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property QuestionTypeIDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnQuestionTypeID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property JumpIndexColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnJumpIndex
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As ScriptScreensRow
            Get
                Return CType(Me.Rows(index),ScriptScreensRow)
            End Get
        End Property
        
        Public Event ScriptScreensRowChanging As ScriptScreensRowChangeEventHandler
        
        Public Event ScriptScreensRowChanged As ScriptScreensRowChangeEventHandler
        
        Public Event ScriptScreensRowDeleting As ScriptScreensRowChangeEventHandler
        
        Public Event ScriptScreensRowDeleted As ScriptScreensRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddScriptScreensRow(ByVal row As ScriptScreensRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddScriptScreensRow(ByVal parentScriptsRowByScriptsScriptScreens As ScriptsRow, ByVal SurveyQuestionID As Integer, ByVal Title As String, ByVal Text As String, ByVal CalculationTypeID As Integer, ByVal ItemOrder As Integer, ByVal Status As Integer, ByVal QuestionTypeID As Integer, ByVal JumpIndex As Integer) As ScriptScreensRow
            Dim rowScriptScreensRow As ScriptScreensRow = CType(Me.NewRow,ScriptScreensRow)
            Dim columnValuesArray() As Object = New Object() {Nothing, Nothing, SurveyQuestionID, Title, Text, CalculationTypeID, ItemOrder, Status, QuestionTypeID, JumpIndex}
            If (Not (parentScriptsRowByScriptsScriptScreens) Is Nothing) Then
                columnValuesArray(1) = parentScriptsRowByScriptsScriptScreens(0)
            End If
            rowScriptScreensRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowScriptScreensRow)
            Return rowScriptScreensRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByScriptScreenID(ByVal ScriptScreenID As Integer) As ScriptScreensRow
            Return CType(Me.Rows.Find(New Object() {ScriptScreenID}),ScriptScreensRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As ScriptScreensDataTable = CType(MyBase.Clone,ScriptScreensDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New ScriptScreensDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnScriptScreenID = MyBase.Columns("ScriptScreenID")
            Me.columnScriptID = MyBase.Columns("ScriptID")
            Me.columnSurveyQuestionID = MyBase.Columns("SurveyQuestionID")
            Me.columnTitle = MyBase.Columns("Title")
            Me.columnText = MyBase.Columns("Text")
            Me.columnCalculationTypeID = MyBase.Columns("CalculationTypeID")
            Me.columnItemOrder = MyBase.Columns("ItemOrder")
            Me.columnStatus = MyBase.Columns("Status")
            Me.columnQuestionTypeID = MyBase.Columns("QuestionTypeID")
            Me.columnJumpIndex = MyBase.Columns("JumpIndex")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnScriptScreenID = New Global.System.Data.DataColumn("ScriptScreenID", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnScriptScreenID)
            Me.columnScriptID = New Global.System.Data.DataColumn("ScriptID", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnScriptID)
            Me.columnSurveyQuestionID = New Global.System.Data.DataColumn("SurveyQuestionID", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSurveyQuestionID)
            Me.columnTitle = New Global.System.Data.DataColumn("Title", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTitle)
            Me.columnText = New Global.System.Data.DataColumn("Text", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnText)
            Me.columnCalculationTypeID = New Global.System.Data.DataColumn("CalculationTypeID", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCalculationTypeID)
            Me.columnItemOrder = New Global.System.Data.DataColumn("ItemOrder", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnItemOrder)
            Me.columnStatus = New Global.System.Data.DataColumn("Status", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnStatus)
            Me.columnQuestionTypeID = New Global.System.Data.DataColumn("QuestionTypeID", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnQuestionTypeID)
            Me.columnJumpIndex = New Global.System.Data.DataColumn("JumpIndex", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnJumpIndex)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("dsInterviewKey2", New Global.System.Data.DataColumn() {Me.columnScriptScreenID}, true))
            Me.columnScriptScreenID.AutoIncrement = true
            Me.columnScriptScreenID.AllowDBNull = false
            Me.columnScriptScreenID.ReadOnly = true
            Me.columnScriptScreenID.Unique = true
            Me.columnScriptID.AllowDBNull = false
            Me.columnTitle.AllowDBNull = false
            Me.columnText.AllowDBNull = false
            Me.columnCalculationTypeID.AllowDBNull = false
            Me.columnItemOrder.AllowDBNull = false
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewScriptScreensRow() As ScriptScreensRow
            Return CType(Me.NewRow,ScriptScreensRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New ScriptScreensRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(ScriptScreensRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.ScriptScreensRowChangedEvent) Is Nothing) Then
                RaiseEvent ScriptScreensRowChanged(Me, New ScriptScreensRowChangeEvent(CType(e.Row,ScriptScreensRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.ScriptScreensRowChangingEvent) Is Nothing) Then
                RaiseEvent ScriptScreensRowChanging(Me, New ScriptScreensRowChangeEvent(CType(e.Row,ScriptScreensRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.ScriptScreensRowDeletedEvent) Is Nothing) Then
                RaiseEvent ScriptScreensRowDeleted(Me, New ScriptScreensRowChangeEvent(CType(e.Row,ScriptScreensRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.ScriptScreensRowDeletingEvent) Is Nothing) Then
                RaiseEvent ScriptScreensRowDeleting(Me, New ScriptScreensRowChangeEvent(CType(e.Row,ScriptScreensRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveScriptScreensRow(ByVal row As ScriptScreensRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As dsInterview = New dsInterview
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "ScriptScreensDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class ScriptScreenCategoriesDataTable
        Inherits Global.System.Data.TypedTableBase(Of ScriptScreenCategoriesRow)
        
        Private columnScriptScreenCategoryID As Global.System.Data.DataColumn
        
        Private columnScriptScreenID As Global.System.Data.DataColumn
        
        Private columnAnswerCategoryID As Global.System.Data.DataColumn
        
        Private columnJumpToScriptScreenID As Global.System.Data.DataColumn
        
        Private columnText As Global.System.Data.DataColumn
        
        Private columnAnswerCategoryTypeID As Global.System.Data.DataColumn
        
        Private columnAnswerText As Global.System.Data.DataColumn
        
        Private columnQuestionID As Global.System.Data.DataColumn
        
        Private columnAnswerValue As Global.System.Data.DataColumn
        
        Private columnShow As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "ScriptScreenCategories"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ScriptScreenCategoryIDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnScriptScreenCategoryID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ScriptScreenIDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnScriptScreenID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property AnswerCategoryIDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnAnswerCategoryID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property JumpToScriptScreenIDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnJumpToScriptScreenID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TextColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnText
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property AnswerCategoryTypeIDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnAnswerCategoryTypeID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property AnswerTextColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnAnswerText
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property QuestionIDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnQuestionID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property AnswerValueColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnAnswerValue
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ShowColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnShow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As ScriptScreenCategoriesRow
            Get
                Return CType(Me.Rows(index),ScriptScreenCategoriesRow)
            End Get
        End Property
        
        Public Event ScriptScreenCategoriesRowChanging As ScriptScreenCategoriesRowChangeEventHandler
        
        Public Event ScriptScreenCategoriesRowChanged As ScriptScreenCategoriesRowChangeEventHandler
        
        Public Event ScriptScreenCategoriesRowDeleting As ScriptScreenCategoriesRowChangeEventHandler
        
        Public Event ScriptScreenCategoriesRowDeleted As ScriptScreenCategoriesRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddScriptScreenCategoriesRow(ByVal row As ScriptScreenCategoriesRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddScriptScreenCategoriesRow(ByVal parentScriptScreensRowByScriptScreensScriptScreenCategories As ScriptScreensRow, ByVal AnswerCategoryID As Integer, ByVal JumpToScriptScreenID As Integer, ByVal Text As String, ByVal AnswerCategoryTypeID As Integer, ByVal AnswerText As String, ByVal QuestionID As Integer, ByVal AnswerValue As Integer, ByVal Show As Integer) As ScriptScreenCategoriesRow
            Dim rowScriptScreenCategoriesRow As ScriptScreenCategoriesRow = CType(Me.NewRow,ScriptScreenCategoriesRow)
            Dim columnValuesArray() As Object = New Object() {Nothing, Nothing, AnswerCategoryID, JumpToScriptScreenID, Text, AnswerCategoryTypeID, AnswerText, QuestionID, AnswerValue, Show}
            If (Not (parentScriptScreensRowByScriptScreensScriptScreenCategories) Is Nothing) Then
                columnValuesArray(1) = parentScriptScreensRowByScriptScreensScriptScreenCategories(0)
            End If
            rowScriptScreenCategoriesRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowScriptScreenCategoriesRow)
            Return rowScriptScreenCategoriesRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As ScriptScreenCategoriesDataTable = CType(MyBase.Clone,ScriptScreenCategoriesDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New ScriptScreenCategoriesDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnScriptScreenCategoryID = MyBase.Columns("ScriptScreenCategoryID")
            Me.columnScriptScreenID = MyBase.Columns("ScriptScreenID")
            Me.columnAnswerCategoryID = MyBase.Columns("AnswerCategoryID")
            Me.columnJumpToScriptScreenID = MyBase.Columns("JumpToScriptScreenID")
            Me.columnText = MyBase.Columns("Text")
            Me.columnAnswerCategoryTypeID = MyBase.Columns("AnswerCategoryTypeID")
            Me.columnAnswerText = MyBase.Columns("AnswerText")
            Me.columnQuestionID = MyBase.Columns("QuestionID")
            Me.columnAnswerValue = MyBase.Columns("AnswerValue")
            Me.columnShow = MyBase.Columns("Show")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnScriptScreenCategoryID = New Global.System.Data.DataColumn("ScriptScreenCategoryID", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnScriptScreenCategoryID)
            Me.columnScriptScreenID = New Global.System.Data.DataColumn("ScriptScreenID", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnScriptScreenID)
            Me.columnAnswerCategoryID = New Global.System.Data.DataColumn("AnswerCategoryID", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAnswerCategoryID)
            Me.columnJumpToScriptScreenID = New Global.System.Data.DataColumn("JumpToScriptScreenID", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnJumpToScriptScreenID)
            Me.columnText = New Global.System.Data.DataColumn("Text", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnText)
            Me.columnAnswerCategoryTypeID = New Global.System.Data.DataColumn("AnswerCategoryTypeID", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAnswerCategoryTypeID)
            Me.columnAnswerText = New Global.System.Data.DataColumn("AnswerText", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAnswerText)
            Me.columnQuestionID = New Global.System.Data.DataColumn("QuestionID", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnQuestionID)
            Me.columnAnswerValue = New Global.System.Data.DataColumn("AnswerValue", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAnswerValue)
            Me.columnShow = New Global.System.Data.DataColumn("Show", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnShow)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("dsInterviewKey3", New Global.System.Data.DataColumn() {Me.columnScriptScreenCategoryID}, false))
            Me.columnScriptScreenCategoryID.AutoIncrement = true
            Me.columnScriptScreenCategoryID.AllowDBNull = false
            Me.columnScriptScreenCategoryID.ReadOnly = true
            Me.columnScriptScreenCategoryID.Unique = true
            Me.columnScriptScreenID.AllowDBNull = false
            Me.columnAnswerCategoryID.AllowDBNull = false
            Me.columnShow.ReadOnly = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewScriptScreenCategoriesRow() As ScriptScreenCategoriesRow
            Return CType(Me.NewRow,ScriptScreenCategoriesRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New ScriptScreenCategoriesRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(ScriptScreenCategoriesRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.ScriptScreenCategoriesRowChangedEvent) Is Nothing) Then
                RaiseEvent ScriptScreenCategoriesRowChanged(Me, New ScriptScreenCategoriesRowChangeEvent(CType(e.Row,ScriptScreenCategoriesRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.ScriptScreenCategoriesRowChangingEvent) Is Nothing) Then
                RaiseEvent ScriptScreenCategoriesRowChanging(Me, New ScriptScreenCategoriesRowChangeEvent(CType(e.Row,ScriptScreenCategoriesRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.ScriptScreenCategoriesRowDeletedEvent) Is Nothing) Then
                RaiseEvent ScriptScreenCategoriesRowDeleted(Me, New ScriptScreenCategoriesRowChangeEvent(CType(e.Row,ScriptScreenCategoriesRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.ScriptScreenCategoriesRowDeletingEvent) Is Nothing) Then
                RaiseEvent ScriptScreenCategoriesRowDeleting(Me, New ScriptScreenCategoriesRowChangeEvent(CType(e.Row,ScriptScreenCategoriesRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveScriptScreenCategoriesRow(ByVal row As ScriptScreenCategoriesRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As dsInterview = New dsInterview
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "ScriptScreenCategoriesDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class RespondentsDataTable
        Inherits Global.System.Data.TypedTableBase(Of RespondentsRow)
        
        Private columnRespondentID As Global.System.Data.DataColumn
        
        Private columnSurveyInstanceID As Global.System.Data.DataColumn
        
        Private columnFirstName As Global.System.Data.DataColumn
        
        Private columnMiddleInitial As Global.System.Data.DataColumn
        
        Private columnLastName As Global.System.Data.DataColumn
        
        Private columnAddress1 As Global.System.Data.DataColumn
        
        Private columnAddress2 As Global.System.Data.DataColumn
        
        Private columnCity As Global.System.Data.DataColumn
        
        Private columnState As Global.System.Data.DataColumn
        
        Private columnPostalCode As Global.System.Data.DataColumn
        
        Private columnTelephoneDay As Global.System.Data.DataColumn
        
        Private columnTelephoneEvening As Global.System.Data.DataColumn
        
        Private columnEmail As Global.System.Data.DataColumn
        
        Private columnDOB As Global.System.Data.DataColumn
        
        Private columnGender As Global.System.Data.DataColumn
        
        Private columnClientRespondentID As Global.System.Data.DataColumn
        
        Private columnSSN As Global.System.Data.DataColumn
        
        Private columnBatchID As Global.System.Data.DataColumn
        
        Private columnSurveyInstanceName As Global.System.Data.DataColumn
        
        Private columnClientName As Global.System.Data.DataColumn
        
        Private columnSurveyName As Global.System.Data.DataColumn
        
        Private columnClientID As Global.System.Data.DataColumn
        
        Private columnSurveyID As Global.System.Data.DataColumn
        
        Private columnCallsMade As Global.System.Data.DataColumn
        
        Private columnFinal As Global.System.Data.DataColumn
        
        Private columnNextContact As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "Respondents"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property RespondentIDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRespondentID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SurveyInstanceIDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSurveyInstanceID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FirstNameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFirstName
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property MiddleInitialColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMiddleInitial
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property LastNameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnLastName
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Address1Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnAddress1
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Address2Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnAddress2
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CityColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCity
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property StateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnState
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PostalCodeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPostalCode
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TelephoneDayColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTelephoneDay
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TelephoneEveningColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTelephoneEvening
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property EmailColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEmail
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DOBColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDOB
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property GenderColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnGender
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ClientRespondentIDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnClientRespondentID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SSNColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSSN
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property BatchIDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnBatchID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SurveyInstanceNameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSurveyInstanceName
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ClientNameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnClientName
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SurveyNameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSurveyName
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ClientIDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnClientID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SurveyIDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSurveyID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CallsMadeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCallsMade
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FinalColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFinal
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NextContactColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNextContact
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As RespondentsRow
            Get
                Return CType(Me.Rows(index),RespondentsRow)
            End Get
        End Property
        
        Public Event RespondentsRowChanging As RespondentsRowChangeEventHandler
        
        Public Event RespondentsRowChanged As RespondentsRowChangeEventHandler
        
        Public Event RespondentsRowDeleting As RespondentsRowChangeEventHandler
        
        Public Event RespondentsRowDeleted As RespondentsRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddRespondentsRow(ByVal row As RespondentsRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddRespondentsRow( _
                    ByVal SurveyInstanceID As Integer,  _
                    ByVal FirstName As String,  _
                    ByVal MiddleInitial As String,  _
                    ByVal LastName As String,  _
                    ByVal Address1 As String,  _
                    ByVal Address2 As String,  _
                    ByVal City As String,  _
                    ByVal State As String,  _
                    ByVal PostalCode As String,  _
                    ByVal TelephoneDay As String,  _
                    ByVal TelephoneEvening As String,  _
                    ByVal Email As String,  _
                    ByVal DOB As Date,  _
                    ByVal Gender As String,  _
                    ByVal ClientRespondentID As String,  _
                    ByVal SSN As String,  _
                    ByVal BatchID As Integer,  _
                    ByVal SurveyInstanceName As String,  _
                    ByVal ClientName As String,  _
                    ByVal SurveyName As String,  _
                    ByVal CallsMade As Integer,  _
                    ByVal Final As Byte,  _
                    ByVal NextContact As Date) As RespondentsRow
            Dim rowRespondentsRow As RespondentsRow = CType(Me.NewRow,RespondentsRow)
            Dim columnValuesArray() As Object = New Object() {Nothing, SurveyInstanceID, FirstName, MiddleInitial, LastName, Address1, Address2, City, State, PostalCode, TelephoneDay, TelephoneEvening, Email, DOB, Gender, ClientRespondentID, SSN, BatchID, SurveyInstanceName, ClientName, SurveyName, Nothing, Nothing, CallsMade, Final, NextContact}
            rowRespondentsRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowRespondentsRow)
            Return rowRespondentsRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As RespondentsDataTable = CType(MyBase.Clone,RespondentsDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New RespondentsDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnRespondentID = MyBase.Columns("RespondentID")
            Me.columnSurveyInstanceID = MyBase.Columns("SurveyInstanceID")
            Me.columnFirstName = MyBase.Columns("FirstName")
            Me.columnMiddleInitial = MyBase.Columns("MiddleInitial")
            Me.columnLastName = MyBase.Columns("LastName")
            Me.columnAddress1 = MyBase.Columns("Address1")
            Me.columnAddress2 = MyBase.Columns("Address2")
            Me.columnCity = MyBase.Columns("City")
            Me.columnState = MyBase.Columns("State")
            Me.columnPostalCode = MyBase.Columns("PostalCode")
            Me.columnTelephoneDay = MyBase.Columns("TelephoneDay")
            Me.columnTelephoneEvening = MyBase.Columns("TelephoneEvening")
            Me.columnEmail = MyBase.Columns("Email")
            Me.columnDOB = MyBase.Columns("DOB")
            Me.columnGender = MyBase.Columns("Gender")
            Me.columnClientRespondentID = MyBase.Columns("ClientRespondentID")
            Me.columnSSN = MyBase.Columns("SSN")
            Me.columnBatchID = MyBase.Columns("BatchID")
            Me.columnSurveyInstanceName = MyBase.Columns("SurveyInstanceName")
            Me.columnClientName = MyBase.Columns("ClientName")
            Me.columnSurveyName = MyBase.Columns("SurveyName")
            Me.columnClientID = MyBase.Columns("ClientID")
            Me.columnSurveyID = MyBase.Columns("SurveyID")
            Me.columnCallsMade = MyBase.Columns("CallsMade")
            Me.columnFinal = MyBase.Columns("Final")
            Me.columnNextContact = MyBase.Columns("NextContact")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnRespondentID = New Global.System.Data.DataColumn("RespondentID", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRespondentID)
            Me.columnSurveyInstanceID = New Global.System.Data.DataColumn("SurveyInstanceID", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSurveyInstanceID)
            Me.columnFirstName = New Global.System.Data.DataColumn("FirstName", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFirstName)
            Me.columnMiddleInitial = New Global.System.Data.DataColumn("MiddleInitial", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMiddleInitial)
            Me.columnLastName = New Global.System.Data.DataColumn("LastName", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnLastName)
            Me.columnAddress1 = New Global.System.Data.DataColumn("Address1", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAddress1)
            Me.columnAddress2 = New Global.System.Data.DataColumn("Address2", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAddress2)
            Me.columnCity = New Global.System.Data.DataColumn("City", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCity)
            Me.columnState = New Global.System.Data.DataColumn("State", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnState)
            Me.columnPostalCode = New Global.System.Data.DataColumn("PostalCode", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPostalCode)
            Me.columnTelephoneDay = New Global.System.Data.DataColumn("TelephoneDay", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTelephoneDay)
            Me.columnTelephoneEvening = New Global.System.Data.DataColumn("TelephoneEvening", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTelephoneEvening)
            Me.columnEmail = New Global.System.Data.DataColumn("Email", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEmail)
            Me.columnDOB = New Global.System.Data.DataColumn("DOB", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDOB)
            Me.columnGender = New Global.System.Data.DataColumn("Gender", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnGender)
            Me.columnClientRespondentID = New Global.System.Data.DataColumn("ClientRespondentID", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnClientRespondentID)
            Me.columnSSN = New Global.System.Data.DataColumn("SSN", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSSN)
            Me.columnBatchID = New Global.System.Data.DataColumn("BatchID", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnBatchID)
            Me.columnSurveyInstanceName = New Global.System.Data.DataColumn("SurveyInstanceName", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSurveyInstanceName)
            Me.columnClientName = New Global.System.Data.DataColumn("ClientName", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnClientName)
            Me.columnSurveyName = New Global.System.Data.DataColumn("SurveyName", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSurveyName)
            Me.columnClientID = New Global.System.Data.DataColumn("ClientID", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnClientID)
            Me.columnSurveyID = New Global.System.Data.DataColumn("SurveyID", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSurveyID)
            Me.columnCallsMade = New Global.System.Data.DataColumn("CallsMade", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCallsMade)
            Me.columnFinal = New Global.System.Data.DataColumn("Final", GetType(Byte), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFinal)
            Me.columnNextContact = New Global.System.Data.DataColumn("NextContact", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNextContact)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("key4", New Global.System.Data.DataColumn() {Me.columnRespondentID}, false))
            Me.columnRespondentID.AutoIncrement = true
            Me.columnRespondentID.AllowDBNull = false
            Me.columnRespondentID.ReadOnly = true
            Me.columnRespondentID.Unique = true
            Me.columnSurveyInstanceID.AllowDBNull = false
            Me.columnLastName.AllowDBNull = false
            Me.columnSurveyInstanceName.AllowDBNull = false
            Me.columnClientName.AllowDBNull = false
            Me.columnSurveyName.AllowDBNull = false
            Me.columnClientID.AutoIncrement = true
            Me.columnClientID.AllowDBNull = false
            Me.columnClientID.ReadOnly = true
            Me.columnSurveyID.AutoIncrement = true
            Me.columnSurveyID.AllowDBNull = false
            Me.columnSurveyID.ReadOnly = true
            Me.columnCallsMade.AllowDBNull = false
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewRespondentsRow() As RespondentsRow
            Return CType(Me.NewRow,RespondentsRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New RespondentsRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(RespondentsRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.RespondentsRowChangedEvent) Is Nothing) Then
                RaiseEvent RespondentsRowChanged(Me, New RespondentsRowChangeEvent(CType(e.Row,RespondentsRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.RespondentsRowChangingEvent) Is Nothing) Then
                RaiseEvent RespondentsRowChanging(Me, New RespondentsRowChangeEvent(CType(e.Row,RespondentsRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.RespondentsRowDeletedEvent) Is Nothing) Then
                RaiseEvent RespondentsRowDeleted(Me, New RespondentsRowChangeEvent(CType(e.Row,RespondentsRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.RespondentsRowDeletingEvent) Is Nothing) Then
                RaiseEvent RespondentsRowDeleting(Me, New RespondentsRowChangeEvent(CType(e.Row,RespondentsRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveRespondentsRow(ByVal row As RespondentsRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As dsInterview = New dsInterview
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "RespondentsDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class ResponsesDataTable
        Inherits Global.System.Data.TypedTableBase(Of ResponsesRow)
        
        Private columnResponseID As Global.System.Data.DataColumn
        
        Private columnRespondentID As Global.System.Data.DataColumn
        
        Private columnAnswerCategoryID As Global.System.Data.DataColumn
        
        Private columnResponseText As Global.System.Data.DataColumn
        
        Private columnSurveyQuestionID As Global.System.Data.DataColumn
        
        Private columnUserID As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "Responses"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ResponseIDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnResponseID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property RespondentIDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRespondentID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property AnswerCategoryIDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnAnswerCategoryID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ResponseTextColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnResponseText
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SurveyQuestionIDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSurveyQuestionID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property UserIDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnUserID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As ResponsesRow
            Get
                Return CType(Me.Rows(index),ResponsesRow)
            End Get
        End Property
        
        Public Event ResponsesRowChanging As ResponsesRowChangeEventHandler
        
        Public Event ResponsesRowChanged As ResponsesRowChangeEventHandler
        
        Public Event ResponsesRowDeleting As ResponsesRowChangeEventHandler
        
        Public Event ResponsesRowDeleted As ResponsesRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddResponsesRow(ByVal row As ResponsesRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddResponsesRow(ByVal parentRespondentsRowByRespondentsResponses As RespondentsRow, ByVal AnswerCategoryID As Integer, ByVal ResponseText As String, ByVal SurveyQuestionID As Integer, ByVal UserID As Integer) As ResponsesRow
            Dim rowResponsesRow As ResponsesRow = CType(Me.NewRow,ResponsesRow)
            Dim columnValuesArray() As Object = New Object() {Nothing, Nothing, AnswerCategoryID, ResponseText, SurveyQuestionID, UserID}
            If (Not (parentRespondentsRowByRespondentsResponses) Is Nothing) Then
                columnValuesArray(1) = parentRespondentsRowByRespondentsResponses(0)
            End If
            rowResponsesRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowResponsesRow)
            Return rowResponsesRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As ResponsesDataTable = CType(MyBase.Clone,ResponsesDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New ResponsesDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnResponseID = MyBase.Columns("ResponseID")
            Me.columnRespondentID = MyBase.Columns("RespondentID")
            Me.columnAnswerCategoryID = MyBase.Columns("AnswerCategoryID")
            Me.columnResponseText = MyBase.Columns("ResponseText")
            Me.columnSurveyQuestionID = MyBase.Columns("SurveyQuestionID")
            Me.columnUserID = MyBase.Columns("UserID")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnResponseID = New Global.System.Data.DataColumn("ResponseID", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnResponseID)
            Me.columnRespondentID = New Global.System.Data.DataColumn("RespondentID", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRespondentID)
            Me.columnAnswerCategoryID = New Global.System.Data.DataColumn("AnswerCategoryID", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAnswerCategoryID)
            Me.columnResponseText = New Global.System.Data.DataColumn("ResponseText", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnResponseText)
            Me.columnSurveyQuestionID = New Global.System.Data.DataColumn("SurveyQuestionID", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSurveyQuestionID)
            Me.columnUserID = New Global.System.Data.DataColumn("UserID", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnUserID)
            Me.columnResponseID.AutoIncrement = true
            Me.columnResponseID.AllowDBNull = false
            Me.columnResponseID.ReadOnly = true
            Me.columnRespondentID.AllowDBNull = false
            Me.columnAnswerCategoryID.AllowDBNull = false
            Me.columnResponseText.AllowDBNull = false
            Me.columnSurveyQuestionID.AllowDBNull = false
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewResponsesRow() As ResponsesRow
            Return CType(Me.NewRow,ResponsesRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New ResponsesRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(ResponsesRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.ResponsesRowChangedEvent) Is Nothing) Then
                RaiseEvent ResponsesRowChanged(Me, New ResponsesRowChangeEvent(CType(e.Row,ResponsesRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.ResponsesRowChangingEvent) Is Nothing) Then
                RaiseEvent ResponsesRowChanging(Me, New ResponsesRowChangeEvent(CType(e.Row,ResponsesRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.ResponsesRowDeletedEvent) Is Nothing) Then
                RaiseEvent ResponsesRowDeleted(Me, New ResponsesRowChangeEvent(CType(e.Row,ResponsesRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.ResponsesRowDeletingEvent) Is Nothing) Then
                RaiseEvent ResponsesRowDeleting(Me, New ResponsesRowChangeEvent(CType(e.Row,ResponsesRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveResponsesRow(ByVal row As ResponsesRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As dsInterview = New dsInterview
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "ResponsesDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class ScriptedTriggersDataTable
        Inherits Global.System.Data.TypedTableBase(Of ScriptedTriggersRow)
        
        Private columnScriptedTriggerID As Global.System.Data.DataColumn
        
        Private columnTriggerID As Global.System.Data.DataColumn
        
        Private columnTriggerIDValue1 As Global.System.Data.DataColumn
        
        Private columnTriggerIDValue2 As Global.System.Data.DataColumn
        
        Private columnTriggerIDValue3 As Global.System.Data.DataColumn
        
        Private columnTriggerIDValue4 As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "ScriptedTriggers"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ScriptedTriggerIDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnScriptedTriggerID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TriggerIDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTriggerID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TriggerIDValue1Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnTriggerIDValue1
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TriggerIDValue2Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnTriggerIDValue2
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TriggerIDValue3Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnTriggerIDValue3
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TriggerIDValue4Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnTriggerIDValue4
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As ScriptedTriggersRow
            Get
                Return CType(Me.Rows(index),ScriptedTriggersRow)
            End Get
        End Property
        
        Public Event ScriptedTriggersRowChanging As ScriptedTriggersRowChangeEventHandler
        
        Public Event ScriptedTriggersRowChanged As ScriptedTriggersRowChangeEventHandler
        
        Public Event ScriptedTriggersRowDeleting As ScriptedTriggersRowChangeEventHandler
        
        Public Event ScriptedTriggersRowDeleted As ScriptedTriggersRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddScriptedTriggersRow(ByVal row As ScriptedTriggersRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddScriptedTriggersRow(ByVal ScriptedTriggerID As Integer, ByVal TriggerID As Integer, ByVal TriggerIDValue1 As Integer, ByVal TriggerIDValue2 As Integer, ByVal TriggerIDValue3 As Integer, ByVal TriggerIDValue4 As Integer) As ScriptedTriggersRow
            Dim rowScriptedTriggersRow As ScriptedTriggersRow = CType(Me.NewRow,ScriptedTriggersRow)
            Dim columnValuesArray() As Object = New Object() {ScriptedTriggerID, TriggerID, TriggerIDValue1, TriggerIDValue2, TriggerIDValue3, TriggerIDValue4}
            rowScriptedTriggersRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowScriptedTriggersRow)
            Return rowScriptedTriggersRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByScriptedTriggerID(ByVal ScriptedTriggerID As Integer) As ScriptedTriggersRow
            Return CType(Me.Rows.Find(New Object() {ScriptedTriggerID}),ScriptedTriggersRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As ScriptedTriggersDataTable = CType(MyBase.Clone,ScriptedTriggersDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New ScriptedTriggersDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnScriptedTriggerID = MyBase.Columns("ScriptedTriggerID")
            Me.columnTriggerID = MyBase.Columns("TriggerID")
            Me.columnTriggerIDValue1 = MyBase.Columns("TriggerIDValue1")
            Me.columnTriggerIDValue2 = MyBase.Columns("TriggerIDValue2")
            Me.columnTriggerIDValue3 = MyBase.Columns("TriggerIDValue3")
            Me.columnTriggerIDValue4 = MyBase.Columns("TriggerIDValue4")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnScriptedTriggerID = New Global.System.Data.DataColumn("ScriptedTriggerID", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnScriptedTriggerID)
            Me.columnTriggerID = New Global.System.Data.DataColumn("TriggerID", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTriggerID)
            Me.columnTriggerIDValue1 = New Global.System.Data.DataColumn("TriggerIDValue1", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTriggerIDValue1)
            Me.columnTriggerIDValue2 = New Global.System.Data.DataColumn("TriggerIDValue2", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTriggerIDValue2)
            Me.columnTriggerIDValue3 = New Global.System.Data.DataColumn("TriggerIDValue3", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTriggerIDValue3)
            Me.columnTriggerIDValue4 = New Global.System.Data.DataColumn("TriggerIDValue4", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTriggerIDValue4)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("dsInterviewKey5", New Global.System.Data.DataColumn() {Me.columnScriptedTriggerID}, true))
            Me.columnScriptedTriggerID.AllowDBNull = false
            Me.columnScriptedTriggerID.Unique = true
            Me.columnTriggerID.AllowDBNull = false
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewScriptedTriggersRow() As ScriptedTriggersRow
            Return CType(Me.NewRow,ScriptedTriggersRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New ScriptedTriggersRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(ScriptedTriggersRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.ScriptedTriggersRowChangedEvent) Is Nothing) Then
                RaiseEvent ScriptedTriggersRowChanged(Me, New ScriptedTriggersRowChangeEvent(CType(e.Row,ScriptedTriggersRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.ScriptedTriggersRowChangingEvent) Is Nothing) Then
                RaiseEvent ScriptedTriggersRowChanging(Me, New ScriptedTriggersRowChangeEvent(CType(e.Row,ScriptedTriggersRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.ScriptedTriggersRowDeletedEvent) Is Nothing) Then
                RaiseEvent ScriptedTriggersRowDeleted(Me, New ScriptedTriggersRowChangeEvent(CType(e.Row,ScriptedTriggersRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.ScriptedTriggersRowDeletingEvent) Is Nothing) Then
                RaiseEvent ScriptedTriggersRowDeleting(Me, New ScriptedTriggersRowChangeEvent(CType(e.Row,ScriptedTriggersRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveScriptedTriggersRow(ByVal row As ScriptedTriggersRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As dsInterview = New dsInterview
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "ScriptedTriggersDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class EventLogDataTable
        Inherits Global.System.Data.TypedTableBase(Of EventLogRow)
        
        Private columnEventLogID As Global.System.Data.DataColumn
        
        Private columnEventDate As Global.System.Data.DataColumn
        
        Private columnEventID As Global.System.Data.DataColumn
        
        Private columnUserID As Global.System.Data.DataColumn
        
        Private columnRespondentID As Global.System.Data.DataColumn
        
        Private columnEventParameters As Global.System.Data.DataColumn
        
        Private columnEventName As Global.System.Data.DataColumn
        
        Private columnEventTypeID As Global.System.Data.DataColumn
        
        Private columnRespondentName As Global.System.Data.DataColumn
        
        Private columnSurveyInstanceName As Global.System.Data.DataColumn
        
        Private columnUsername As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "EventLog"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property EventLogIDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEventLogID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property EventDateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEventDate
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property EventIDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEventID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property UserIDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnUserID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property RespondentIDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRespondentID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property EventParametersColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEventParameters
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property EventNameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEventName
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property EventTypeIDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEventTypeID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property RespondentNameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRespondentName
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SurveyInstanceNameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSurveyInstanceName
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property UsernameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnUsername
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As EventLogRow
            Get
                Return CType(Me.Rows(index),EventLogRow)
            End Get
        End Property
        
        Public Event EventLogRowChanging As EventLogRowChangeEventHandler
        
        Public Event EventLogRowChanged As EventLogRowChangeEventHandler
        
        Public Event EventLogRowDeleting As EventLogRowChangeEventHandler
        
        Public Event EventLogRowDeleted As EventLogRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddEventLogRow(ByVal row As EventLogRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddEventLogRow(ByVal EventDate As Date, ByVal EventID As Integer, ByVal UserID As Integer, ByVal parentRespondentsRowByRespondentsEventLog As RespondentsRow, ByVal EventParameters As String, ByVal EventName As String, ByVal EventTypeID As Integer, ByVal RespondentName As String, ByVal SurveyInstanceName As String, ByVal Username As String) As EventLogRow
            Dim rowEventLogRow As EventLogRow = CType(Me.NewRow,EventLogRow)
            Dim columnValuesArray() As Object = New Object() {Nothing, EventDate, EventID, UserID, Nothing, EventParameters, EventName, EventTypeID, RespondentName, SurveyInstanceName, Username}
            If (Not (parentRespondentsRowByRespondentsEventLog) Is Nothing) Then
                columnValuesArray(4) = parentRespondentsRowByRespondentsEventLog(0)
            End If
            rowEventLogRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowEventLogRow)
            Return rowEventLogRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As EventLogDataTable = CType(MyBase.Clone,EventLogDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New EventLogDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnEventLogID = MyBase.Columns("EventLogID")
            Me.columnEventDate = MyBase.Columns("EventDate")
            Me.columnEventID = MyBase.Columns("EventID")
            Me.columnUserID = MyBase.Columns("UserID")
            Me.columnRespondentID = MyBase.Columns("RespondentID")
            Me.columnEventParameters = MyBase.Columns("EventParameters")
            Me.columnEventName = MyBase.Columns("EventName")
            Me.columnEventTypeID = MyBase.Columns("EventTypeID")
            Me.columnRespondentName = MyBase.Columns("RespondentName")
            Me.columnSurveyInstanceName = MyBase.Columns("SurveyInstanceName")
            Me.columnUsername = MyBase.Columns("Username")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnEventLogID = New Global.System.Data.DataColumn("EventLogID", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEventLogID)
            Me.columnEventDate = New Global.System.Data.DataColumn("EventDate", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEventDate)
            Me.columnEventID = New Global.System.Data.DataColumn("EventID", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEventID)
            Me.columnUserID = New Global.System.Data.DataColumn("UserID", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnUserID)
            Me.columnRespondentID = New Global.System.Data.DataColumn("RespondentID", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRespondentID)
            Me.columnEventParameters = New Global.System.Data.DataColumn("EventParameters", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEventParameters)
            Me.columnEventName = New Global.System.Data.DataColumn("EventName", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEventName)
            Me.columnEventTypeID = New Global.System.Data.DataColumn("EventTypeID", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEventTypeID)
            Me.columnRespondentName = New Global.System.Data.DataColumn("RespondentName", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRespondentName)
            Me.columnSurveyInstanceName = New Global.System.Data.DataColumn("SurveyInstanceName", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSurveyInstanceName)
            Me.columnUsername = New Global.System.Data.DataColumn("Username", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnUsername)
            Me.columnEventLogID.AutoIncrement = true
            Me.columnEventLogID.AllowDBNull = false
            Me.columnEventLogID.ReadOnly = true
            Me.columnEventDate.AllowDBNull = false
            Me.columnEventID.AllowDBNull = false
            Me.columnUserID.AllowDBNull = false
            Me.columnEventName.AllowDBNull = false
            Me.columnEventTypeID.AllowDBNull = false
            Me.columnRespondentName.ReadOnly = true
            Me.columnSurveyInstanceName.ReadOnly = true
            Me.columnUsername.AllowDBNull = false
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewEventLogRow() As EventLogRow
            Return CType(Me.NewRow,EventLogRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New EventLogRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(EventLogRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.EventLogRowChangedEvent) Is Nothing) Then
                RaiseEvent EventLogRowChanged(Me, New EventLogRowChangeEvent(CType(e.Row,EventLogRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.EventLogRowChangingEvent) Is Nothing) Then
                RaiseEvent EventLogRowChanging(Me, New EventLogRowChangeEvent(CType(e.Row,EventLogRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.EventLogRowDeletedEvent) Is Nothing) Then
                RaiseEvent EventLogRowDeleted(Me, New EventLogRowChangeEvent(CType(e.Row,EventLogRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.EventLogRowDeletingEvent) Is Nothing) Then
                RaiseEvent EventLogRowDeleting(Me, New EventLogRowChangeEvent(CType(e.Row,EventLogRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveEventLogRow(ByVal row As EventLogRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As dsInterview = New dsInterview
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "EventLogDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class ScriptsRow
        Inherits Global.System.Data.DataRow
        
        Private tableScripts As ScriptsDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableScripts = CType(Me.Table,ScriptsDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ScriptID() As Integer
            Get
                Return CType(Me(Me.tableScripts.ScriptIDColumn),Integer)
            End Get
            Set
                Me(Me.tableScripts.ScriptIDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SurveyID() As Integer
            Get
                Return CType(Me(Me.tableScripts.SurveyIDColumn),Integer)
            End Get
            Set
                Me(Me.tableScripts.SurveyIDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ScriptTypeID() As Integer
            Get
                Return CType(Me(Me.tableScripts.ScriptTypeIDColumn),Integer)
            End Get
            Set
                Me(Me.tableScripts.ScriptTypeIDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Name() As String
            Get
                Return CType(Me(Me.tableScripts.NameColumn),String)
            End Get
            Set
                Me(Me.tableScripts.NameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Description() As String
            Get
                Return CType(Me(Me.tableScripts.DescriptionColumn),String)
            End Get
            Set
                Me(Me.tableScripts.DescriptionColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CompletenessLevel() As Decimal
            Get
                Return CType(Me(Me.tableScripts.CompletenessLevelColumn),Decimal)
            End Get
            Set
                Me(Me.tableScripts.CompletenessLevelColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FollowSkips() As Byte
            Get
                Return CType(Me(Me.tableScripts.FollowSkipsColumn),Byte)
            End Get
            Set
                Me(Me.tableScripts.FollowSkipsColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CalcCompleteness() As Byte
            Get
                Return CType(Me(Me.tableScripts.CalcCompletenessColumn),Byte)
            End Get
            Set
                Me(Me.tableScripts.CalcCompletenessColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DefaultScript() As Byte
            Get
                Return CType(Me(Me.tableScripts.DefaultScriptColumn),Byte)
            End Get
            Set
                Me(Me.tableScripts.DefaultScriptColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function GetScriptScreensRows() As ScriptScreensRow()
            If (Me.Table.ChildRelations("ScriptsScriptScreens") Is Nothing) Then
                Return New ScriptScreensRow(-1) {}
            Else
                Return CType(MyBase.GetChildRows(Me.Table.ChildRelations("ScriptsScriptScreens")),ScriptScreensRow())
            End If
        End Function
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class ScriptScreensRow
        Inherits Global.System.Data.DataRow
        
        Private tableScriptScreens As ScriptScreensDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableScriptScreens = CType(Me.Table,ScriptScreensDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ScriptScreenID() As Integer
            Get
                Return CType(Me(Me.tableScriptScreens.ScriptScreenIDColumn),Integer)
            End Get
            Set
                Me(Me.tableScriptScreens.ScriptScreenIDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ScriptID() As Integer
            Get
                Return CType(Me(Me.tableScriptScreens.ScriptIDColumn),Integer)
            End Get
            Set
                Me(Me.tableScriptScreens.ScriptIDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SurveyQuestionID() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableScriptScreens.SurveyQuestionIDColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'SurveyQuestionID' in table 'ScriptScreens' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableScriptScreens.SurveyQuestionIDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Title() As String
            Get
                Return CType(Me(Me.tableScriptScreens.TitleColumn),String)
            End Get
            Set
                Me(Me.tableScriptScreens.TitleColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Text() As String
            Get
                Return CType(Me(Me.tableScriptScreens.TextColumn),String)
            End Get
            Set
                Me(Me.tableScriptScreens.TextColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CalculationTypeID() As Integer
            Get
                Return CType(Me(Me.tableScriptScreens.CalculationTypeIDColumn),Integer)
            End Get
            Set
                Me(Me.tableScriptScreens.CalculationTypeIDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ItemOrder() As Integer
            Get
                Return CType(Me(Me.tableScriptScreens.ItemOrderColumn),Integer)
            End Get
            Set
                Me(Me.tableScriptScreens.ItemOrderColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Status() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableScriptScreens.StatusColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Status' in table 'ScriptScreens' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableScriptScreens.StatusColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property QuestionTypeID() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableScriptScreens.QuestionTypeIDColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'QuestionTypeID' in table 'ScriptScreens' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableScriptScreens.QuestionTypeIDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property JumpIndex() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableScriptScreens.JumpIndexColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'JumpIndex' in table 'ScriptScreens' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableScriptScreens.JumpIndexColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ScriptsRow() As ScriptsRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("ScriptsScriptScreens")),ScriptsRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("ScriptsScriptScreens"))
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSurveyQuestionIDNull() As Boolean
            Return Me.IsNull(Me.tableScriptScreens.SurveyQuestionIDColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSurveyQuestionIDNull()
            Me(Me.tableScriptScreens.SurveyQuestionIDColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsStatusNull() As Boolean
            Return Me.IsNull(Me.tableScriptScreens.StatusColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetStatusNull()
            Me(Me.tableScriptScreens.StatusColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsQuestionTypeIDNull() As Boolean
            Return Me.IsNull(Me.tableScriptScreens.QuestionTypeIDColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetQuestionTypeIDNull()
            Me(Me.tableScriptScreens.QuestionTypeIDColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsJumpIndexNull() As Boolean
            Return Me.IsNull(Me.tableScriptScreens.JumpIndexColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetJumpIndexNull()
            Me(Me.tableScriptScreens.JumpIndexColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function GetScriptScreenCategoriesRows() As ScriptScreenCategoriesRow()
            If (Me.Table.ChildRelations("ScriptScreensScriptScreenCategories") Is Nothing) Then
                Return New ScriptScreenCategoriesRow(-1) {}
            Else
                Return CType(MyBase.GetChildRows(Me.Table.ChildRelations("ScriptScreensScriptScreenCategories")),ScriptScreenCategoriesRow())
            End If
        End Function
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class ScriptScreenCategoriesRow
        Inherits Global.System.Data.DataRow
        
        Private tableScriptScreenCategories As ScriptScreenCategoriesDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableScriptScreenCategories = CType(Me.Table,ScriptScreenCategoriesDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ScriptScreenCategoryID() As Integer
            Get
                Return CType(Me(Me.tableScriptScreenCategories.ScriptScreenCategoryIDColumn),Integer)
            End Get
            Set
                Me(Me.tableScriptScreenCategories.ScriptScreenCategoryIDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ScriptScreenID() As Integer
            Get
                Return CType(Me(Me.tableScriptScreenCategories.ScriptScreenIDColumn),Integer)
            End Get
            Set
                Me(Me.tableScriptScreenCategories.ScriptScreenIDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property AnswerCategoryID() As Integer
            Get
                Return CType(Me(Me.tableScriptScreenCategories.AnswerCategoryIDColumn),Integer)
            End Get
            Set
                Me(Me.tableScriptScreenCategories.AnswerCategoryIDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property JumpToScriptScreenID() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableScriptScreenCategories.JumpToScriptScreenIDColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'JumpToScriptScreenID' in table 'ScriptScreenCategories' is "& _ 
                            "DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableScriptScreenCategories.JumpToScriptScreenIDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Text() As String
            Get
                Try 
                    Return CType(Me(Me.tableScriptScreenCategories.TextColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Text' in table 'ScriptScreenCategories' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableScriptScreenCategories.TextColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property AnswerCategoryTypeID() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableScriptScreenCategories.AnswerCategoryTypeIDColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'AnswerCategoryTypeID' in table 'ScriptScreenCategories' is "& _ 
                            "DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableScriptScreenCategories.AnswerCategoryTypeIDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property AnswerText() As String
            Get
                Try 
                    Return CType(Me(Me.tableScriptScreenCategories.AnswerTextColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'AnswerText' in table 'ScriptScreenCategories' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableScriptScreenCategories.AnswerTextColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property QuestionID() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableScriptScreenCategories.QuestionIDColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'QuestionID' in table 'ScriptScreenCategories' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableScriptScreenCategories.QuestionIDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property AnswerValue() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableScriptScreenCategories.AnswerValueColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'AnswerValue' in table 'ScriptScreenCategories' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableScriptScreenCategories.AnswerValueColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Show() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableScriptScreenCategories.ShowColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Show' in table 'ScriptScreenCategories' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableScriptScreenCategories.ShowColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ScriptScreensRow() As ScriptScreensRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("ScriptScreensScriptScreenCategories")),ScriptScreensRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("ScriptScreensScriptScreenCategories"))
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsJumpToScriptScreenIDNull() As Boolean
            Return Me.IsNull(Me.tableScriptScreenCategories.JumpToScriptScreenIDColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetJumpToScriptScreenIDNull()
            Me(Me.tableScriptScreenCategories.JumpToScriptScreenIDColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTextNull() As Boolean
            Return Me.IsNull(Me.tableScriptScreenCategories.TextColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTextNull()
            Me(Me.tableScriptScreenCategories.TextColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsAnswerCategoryTypeIDNull() As Boolean
            Return Me.IsNull(Me.tableScriptScreenCategories.AnswerCategoryTypeIDColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetAnswerCategoryTypeIDNull()
            Me(Me.tableScriptScreenCategories.AnswerCategoryTypeIDColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsAnswerTextNull() As Boolean
            Return Me.IsNull(Me.tableScriptScreenCategories.AnswerTextColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetAnswerTextNull()
            Me(Me.tableScriptScreenCategories.AnswerTextColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsQuestionIDNull() As Boolean
            Return Me.IsNull(Me.tableScriptScreenCategories.QuestionIDColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetQuestionIDNull()
            Me(Me.tableScriptScreenCategories.QuestionIDColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsAnswerValueNull() As Boolean
            Return Me.IsNull(Me.tableScriptScreenCategories.AnswerValueColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetAnswerValueNull()
            Me(Me.tableScriptScreenCategories.AnswerValueColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsShowNull() As Boolean
            Return Me.IsNull(Me.tableScriptScreenCategories.ShowColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetShowNull()
            Me(Me.tableScriptScreenCategories.ShowColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class RespondentsRow
        Inherits Global.System.Data.DataRow
        
        Private tableRespondents As RespondentsDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableRespondents = CType(Me.Table,RespondentsDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property RespondentID() As Integer
            Get
                Return CType(Me(Me.tableRespondents.RespondentIDColumn),Integer)
            End Get
            Set
                Me(Me.tableRespondents.RespondentIDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SurveyInstanceID() As Integer
            Get
                Return CType(Me(Me.tableRespondents.SurveyInstanceIDColumn),Integer)
            End Get
            Set
                Me(Me.tableRespondents.SurveyInstanceIDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FirstName() As String
            Get
                Try 
                    Return CType(Me(Me.tableRespondents.FirstNameColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'FirstName' in table 'Respondents' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableRespondents.FirstNameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property MiddleInitial() As String
            Get
                Try 
                    Return CType(Me(Me.tableRespondents.MiddleInitialColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'MiddleInitial' in table 'Respondents' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableRespondents.MiddleInitialColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property LastName() As String
            Get
                Return CType(Me(Me.tableRespondents.LastNameColumn),String)
            End Get
            Set
                Me(Me.tableRespondents.LastNameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Address1() As String
            Get
                Try 
                    Return CType(Me(Me.tableRespondents.Address1Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Address1' in table 'Respondents' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableRespondents.Address1Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Address2() As String
            Get
                Try 
                    Return CType(Me(Me.tableRespondents.Address2Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Address2' in table 'Respondents' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableRespondents.Address2Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property City() As String
            Get
                Try 
                    Return CType(Me(Me.tableRespondents.CityColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'City' in table 'Respondents' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableRespondents.CityColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property State() As String
            Get
                Try 
                    Return CType(Me(Me.tableRespondents.StateColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'State' in table 'Respondents' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableRespondents.StateColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PostalCode() As String
            Get
                Try 
                    Return CType(Me(Me.tableRespondents.PostalCodeColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PostalCode' in table 'Respondents' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableRespondents.PostalCodeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TelephoneDay() As String
            Get
                Try 
                    Return CType(Me(Me.tableRespondents.TelephoneDayColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'TelephoneDay' in table 'Respondents' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableRespondents.TelephoneDayColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TelephoneEvening() As String
            Get
                Try 
                    Return CType(Me(Me.tableRespondents.TelephoneEveningColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'TelephoneEvening' in table 'Respondents' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableRespondents.TelephoneEveningColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Email() As String
            Get
                Try 
                    Return CType(Me(Me.tableRespondents.EmailColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Email' in table 'Respondents' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableRespondents.EmailColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DOB() As Date
            Get
                Try 
                    Return CType(Me(Me.tableRespondents.DOBColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'DOB' in table 'Respondents' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableRespondents.DOBColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Gender() As String
            Get
                Try 
                    Return CType(Me(Me.tableRespondents.GenderColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Gender' in table 'Respondents' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableRespondents.GenderColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClientRespondentID() As String
            Get
                Try 
                    Return CType(Me(Me.tableRespondents.ClientRespondentIDColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ClientRespondentID' in table 'Respondents' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableRespondents.ClientRespondentIDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SSN() As String
            Get
                Try 
                    Return CType(Me(Me.tableRespondents.SSNColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'SSN' in table 'Respondents' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableRespondents.SSNColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property BatchID() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableRespondents.BatchIDColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'BatchID' in table 'Respondents' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableRespondents.BatchIDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SurveyInstanceName() As String
            Get
                Return CType(Me(Me.tableRespondents.SurveyInstanceNameColumn),String)
            End Get
            Set
                Me(Me.tableRespondents.SurveyInstanceNameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClientName() As String
            Get
                Return CType(Me(Me.tableRespondents.ClientNameColumn),String)
            End Get
            Set
                Me(Me.tableRespondents.ClientNameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SurveyName() As String
            Get
                Return CType(Me(Me.tableRespondents.SurveyNameColumn),String)
            End Get
            Set
                Me(Me.tableRespondents.SurveyNameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClientID() As Integer
            Get
                Return CType(Me(Me.tableRespondents.ClientIDColumn),Integer)
            End Get
            Set
                Me(Me.tableRespondents.ClientIDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SurveyID() As Integer
            Get
                Return CType(Me(Me.tableRespondents.SurveyIDColumn),Integer)
            End Get
            Set
                Me(Me.tableRespondents.SurveyIDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CallsMade() As Integer
            Get
                Return CType(Me(Me.tableRespondents.CallsMadeColumn),Integer)
            End Get
            Set
                Me(Me.tableRespondents.CallsMadeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Final() As Byte
            Get
                Try 
                    Return CType(Me(Me.tableRespondents.FinalColumn),Byte)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Final' in table 'Respondents' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableRespondents.FinalColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property NextContact() As Date
            Get
                Try 
                    Return CType(Me(Me.tableRespondents.NextContactColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'NextContact' in table 'Respondents' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableRespondents.NextContactColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFirstNameNull() As Boolean
            Return Me.IsNull(Me.tableRespondents.FirstNameColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFirstNameNull()
            Me(Me.tableRespondents.FirstNameColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsMiddleInitialNull() As Boolean
            Return Me.IsNull(Me.tableRespondents.MiddleInitialColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetMiddleInitialNull()
            Me(Me.tableRespondents.MiddleInitialColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsAddress1Null() As Boolean
            Return Me.IsNull(Me.tableRespondents.Address1Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetAddress1Null()
            Me(Me.tableRespondents.Address1Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsAddress2Null() As Boolean
            Return Me.IsNull(Me.tableRespondents.Address2Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetAddress2Null()
            Me(Me.tableRespondents.Address2Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCityNull() As Boolean
            Return Me.IsNull(Me.tableRespondents.CityColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCityNull()
            Me(Me.tableRespondents.CityColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsStateNull() As Boolean
            Return Me.IsNull(Me.tableRespondents.StateColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetStateNull()
            Me(Me.tableRespondents.StateColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPostalCodeNull() As Boolean
            Return Me.IsNull(Me.tableRespondents.PostalCodeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPostalCodeNull()
            Me(Me.tableRespondents.PostalCodeColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTelephoneDayNull() As Boolean
            Return Me.IsNull(Me.tableRespondents.TelephoneDayColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTelephoneDayNull()
            Me(Me.tableRespondents.TelephoneDayColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTelephoneEveningNull() As Boolean
            Return Me.IsNull(Me.tableRespondents.TelephoneEveningColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTelephoneEveningNull()
            Me(Me.tableRespondents.TelephoneEveningColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsEmailNull() As Boolean
            Return Me.IsNull(Me.tableRespondents.EmailColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetEmailNull()
            Me(Me.tableRespondents.EmailColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDOBNull() As Boolean
            Return Me.IsNull(Me.tableRespondents.DOBColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDOBNull()
            Me(Me.tableRespondents.DOBColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsGenderNull() As Boolean
            Return Me.IsNull(Me.tableRespondents.GenderColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetGenderNull()
            Me(Me.tableRespondents.GenderColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsClientRespondentIDNull() As Boolean
            Return Me.IsNull(Me.tableRespondents.ClientRespondentIDColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetClientRespondentIDNull()
            Me(Me.tableRespondents.ClientRespondentIDColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSSNNull() As Boolean
            Return Me.IsNull(Me.tableRespondents.SSNColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSSNNull()
            Me(Me.tableRespondents.SSNColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsBatchIDNull() As Boolean
            Return Me.IsNull(Me.tableRespondents.BatchIDColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetBatchIDNull()
            Me(Me.tableRespondents.BatchIDColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFinalNull() As Boolean
            Return Me.IsNull(Me.tableRespondents.FinalColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFinalNull()
            Me(Me.tableRespondents.FinalColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsNextContactNull() As Boolean
            Return Me.IsNull(Me.tableRespondents.NextContactColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetNextContactNull()
            Me(Me.tableRespondents.NextContactColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function GetResponsesRows() As ResponsesRow()
            If (Me.Table.ChildRelations("RespondentsResponses") Is Nothing) Then
                Return New ResponsesRow(-1) {}
            Else
                Return CType(MyBase.GetChildRows(Me.Table.ChildRelations("RespondentsResponses")),ResponsesRow())
            End If
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function GetEventLogRows() As EventLogRow()
            If (Me.Table.ChildRelations("RespondentsEventLog") Is Nothing) Then
                Return New EventLogRow(-1) {}
            Else
                Return CType(MyBase.GetChildRows(Me.Table.ChildRelations("RespondentsEventLog")),EventLogRow())
            End If
        End Function
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class ResponsesRow
        Inherits Global.System.Data.DataRow
        
        Private tableResponses As ResponsesDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableResponses = CType(Me.Table,ResponsesDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ResponseID() As Integer
            Get
                Return CType(Me(Me.tableResponses.ResponseIDColumn),Integer)
            End Get
            Set
                Me(Me.tableResponses.ResponseIDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property RespondentID() As Integer
            Get
                Return CType(Me(Me.tableResponses.RespondentIDColumn),Integer)
            End Get
            Set
                Me(Me.tableResponses.RespondentIDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property AnswerCategoryID() As Integer
            Get
                Return CType(Me(Me.tableResponses.AnswerCategoryIDColumn),Integer)
            End Get
            Set
                Me(Me.tableResponses.AnswerCategoryIDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ResponseText() As String
            Get
                Return CType(Me(Me.tableResponses.ResponseTextColumn),String)
            End Get
            Set
                Me(Me.tableResponses.ResponseTextColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SurveyQuestionID() As Integer
            Get
                Return CType(Me(Me.tableResponses.SurveyQuestionIDColumn),Integer)
            End Get
            Set
                Me(Me.tableResponses.SurveyQuestionIDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property UserID() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableResponses.UserIDColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'UserID' in table 'Responses' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableResponses.UserIDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property RespondentsRow() As RespondentsRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("RespondentsResponses")),RespondentsRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("RespondentsResponses"))
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsUserIDNull() As Boolean
            Return Me.IsNull(Me.tableResponses.UserIDColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetUserIDNull()
            Me(Me.tableResponses.UserIDColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class ScriptedTriggersRow
        Inherits Global.System.Data.DataRow
        
        Private tableScriptedTriggers As ScriptedTriggersDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableScriptedTriggers = CType(Me.Table,ScriptedTriggersDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ScriptedTriggerID() As Integer
            Get
                Return CType(Me(Me.tableScriptedTriggers.ScriptedTriggerIDColumn),Integer)
            End Get
            Set
                Me(Me.tableScriptedTriggers.ScriptedTriggerIDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TriggerID() As Integer
            Get
                Return CType(Me(Me.tableScriptedTriggers.TriggerIDColumn),Integer)
            End Get
            Set
                Me(Me.tableScriptedTriggers.TriggerIDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TriggerIDValue1() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableScriptedTriggers.TriggerIDValue1Column),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'TriggerIDValue1' in table 'ScriptedTriggers' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableScriptedTriggers.TriggerIDValue1Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TriggerIDValue2() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableScriptedTriggers.TriggerIDValue2Column),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'TriggerIDValue2' in table 'ScriptedTriggers' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableScriptedTriggers.TriggerIDValue2Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TriggerIDValue3() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableScriptedTriggers.TriggerIDValue3Column),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'TriggerIDValue3' in table 'ScriptedTriggers' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableScriptedTriggers.TriggerIDValue3Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TriggerIDValue4() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableScriptedTriggers.TriggerIDValue4Column),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'TriggerIDValue4' in table 'ScriptedTriggers' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableScriptedTriggers.TriggerIDValue4Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTriggerIDValue1Null() As Boolean
            Return Me.IsNull(Me.tableScriptedTriggers.TriggerIDValue1Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTriggerIDValue1Null()
            Me(Me.tableScriptedTriggers.TriggerIDValue1Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTriggerIDValue2Null() As Boolean
            Return Me.IsNull(Me.tableScriptedTriggers.TriggerIDValue2Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTriggerIDValue2Null()
            Me(Me.tableScriptedTriggers.TriggerIDValue2Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTriggerIDValue3Null() As Boolean
            Return Me.IsNull(Me.tableScriptedTriggers.TriggerIDValue3Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTriggerIDValue3Null()
            Me(Me.tableScriptedTriggers.TriggerIDValue3Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTriggerIDValue4Null() As Boolean
            Return Me.IsNull(Me.tableScriptedTriggers.TriggerIDValue4Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTriggerIDValue4Null()
            Me(Me.tableScriptedTriggers.TriggerIDValue4Column) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class EventLogRow
        Inherits Global.System.Data.DataRow
        
        Private tableEventLog As EventLogDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableEventLog = CType(Me.Table,EventLogDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property EventLogID() As Integer
            Get
                Return CType(Me(Me.tableEventLog.EventLogIDColumn),Integer)
            End Get
            Set
                Me(Me.tableEventLog.EventLogIDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property EventDate() As Date
            Get
                Return CType(Me(Me.tableEventLog.EventDateColumn),Date)
            End Get
            Set
                Me(Me.tableEventLog.EventDateColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property EventID() As Integer
            Get
                Return CType(Me(Me.tableEventLog.EventIDColumn),Integer)
            End Get
            Set
                Me(Me.tableEventLog.EventIDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property UserID() As Integer
            Get
                Return CType(Me(Me.tableEventLog.UserIDColumn),Integer)
            End Get
            Set
                Me(Me.tableEventLog.UserIDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property RespondentID() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableEventLog.RespondentIDColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'RespondentID' in table 'EventLog' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEventLog.RespondentIDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property EventParameters() As String
            Get
                Try 
                    Return CType(Me(Me.tableEventLog.EventParametersColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'EventParameters' in table 'EventLog' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEventLog.EventParametersColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property EventName() As String
            Get
                Return CType(Me(Me.tableEventLog.EventNameColumn),String)
            End Get
            Set
                Me(Me.tableEventLog.EventNameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property EventTypeID() As Integer
            Get
                Return CType(Me(Me.tableEventLog.EventTypeIDColumn),Integer)
            End Get
            Set
                Me(Me.tableEventLog.EventTypeIDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property RespondentName() As String
            Get
                Try 
                    Return CType(Me(Me.tableEventLog.RespondentNameColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'RespondentName' in table 'EventLog' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEventLog.RespondentNameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SurveyInstanceName() As String
            Get
                Try 
                    Return CType(Me(Me.tableEventLog.SurveyInstanceNameColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'SurveyInstanceName' in table 'EventLog' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEventLog.SurveyInstanceNameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Username() As String
            Get
                Return CType(Me(Me.tableEventLog.UsernameColumn),String)
            End Get
            Set
                Me(Me.tableEventLog.UsernameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property RespondentsRow() As RespondentsRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("RespondentsEventLog")),RespondentsRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("RespondentsEventLog"))
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsRespondentIDNull() As Boolean
            Return Me.IsNull(Me.tableEventLog.RespondentIDColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetRespondentIDNull()
            Me(Me.tableEventLog.RespondentIDColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsEventParametersNull() As Boolean
            Return Me.IsNull(Me.tableEventLog.EventParametersColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetEventParametersNull()
            Me(Me.tableEventLog.EventParametersColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsRespondentNameNull() As Boolean
            Return Me.IsNull(Me.tableEventLog.RespondentNameColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetRespondentNameNull()
            Me(Me.tableEventLog.RespondentNameColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSurveyInstanceNameNull() As Boolean
            Return Me.IsNull(Me.tableEventLog.SurveyInstanceNameColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSurveyInstanceNameNull()
            Me(Me.tableEventLog.SurveyInstanceNameColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class ScriptsRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As ScriptsRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As ScriptsRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As ScriptsRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class ScriptScreensRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As ScriptScreensRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As ScriptScreensRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As ScriptScreensRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class ScriptScreenCategoriesRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As ScriptScreenCategoriesRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As ScriptScreenCategoriesRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As ScriptScreenCategoriesRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class RespondentsRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As RespondentsRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As RespondentsRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As RespondentsRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class ResponsesRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As ResponsesRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As ResponsesRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As ResponsesRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class ScriptedTriggersRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As ScriptedTriggersRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As ScriptedTriggersRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As ScriptedTriggersRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class EventLogRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As EventLogRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As EventLogRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As EventLogRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
End Class

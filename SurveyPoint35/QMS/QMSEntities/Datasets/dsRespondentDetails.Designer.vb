'------------------------------------------------------------------------------
' <auto-generated>
'     This code was generated by a tool.
'     Runtime Version:2.0.50727.1433
'
'     Changes to this file may cause incorrect behavior and will be lost if
'     the code is regenerated.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On



'''<summary>
'''Represents a strongly typed in-memory cache of data.
'''</summary>
<Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
 Global.System.Serializable(),  _
 Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
 Global.System.ComponentModel.ToolboxItem(true),  _
 Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema"),  _
 Global.System.Xml.Serialization.XmlRootAttribute("dsRespondentDetails"),  _
 Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")>  _
Partial Public Class dsRespondentDetails
    Inherits Global.System.Data.DataSet
    
    Private tableRespondentProperties As RespondentPropertiesDataTable
    
    Private tableEventLog As EventLogDataTable
    
    Private tabletblEvents As tblEventsDataTable
    
    Private tableUsers As UsersDataTable
    
    Private tableRespondents As RespondentsDataTable
    
    Private tableHousehold As HouseholdDataTable
    
    Private relationRespondentsRespondentProperties As Global.System.Data.DataRelation
    
    Private relationUsersEventLog As Global.System.Data.DataRelation
    
    Private relationtblEventsEventLog As Global.System.Data.DataRelation
    
    Private relationRespondentsEventLog As Global.System.Data.DataRelation
    
    Private _schemaSerializationMode As Global.System.Data.SchemaSerializationMode = Global.System.Data.SchemaSerializationMode.IncludeSchema
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Sub New()
        MyBase.New
        Me.BeginInit
        Me.InitClass
        Dim schemaChangedHandler As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler MyBase.Relations.CollectionChanged, schemaChangedHandler
        Me.EndInit
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
        MyBase.New(info, context, false)
        If (Me.IsBinarySerialized(info, context) = true) Then
            Me.InitVars(false)
            Dim schemaChangedHandler1 As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
            AddHandler Me.Tables.CollectionChanged, schemaChangedHandler1
            AddHandler Me.Relations.CollectionChanged, schemaChangedHandler1
            Return
        End If
        Dim strSchema As String = CType(info.GetValue("XmlSchema", GetType(String)),String)
        If (Me.DetermineSchemaSerializationMode(info, context) = Global.System.Data.SchemaSerializationMode.IncludeSchema) Then
            Dim ds As Global.System.Data.DataSet = New Global.System.Data.DataSet
            ds.ReadXmlSchema(New Global.System.Xml.XmlTextReader(New Global.System.IO.StringReader(strSchema)))
            If (Not (ds.Tables("RespondentProperties")) Is Nothing) Then
                MyBase.Tables.Add(New RespondentPropertiesDataTable(ds.Tables("RespondentProperties")))
            End If
            If (Not (ds.Tables("EventLog")) Is Nothing) Then
                MyBase.Tables.Add(New EventLogDataTable(ds.Tables("EventLog")))
            End If
            If (Not (ds.Tables("tblEvents")) Is Nothing) Then
                MyBase.Tables.Add(New tblEventsDataTable(ds.Tables("tblEvents")))
            End If
            If (Not (ds.Tables("Users")) Is Nothing) Then
                MyBase.Tables.Add(New UsersDataTable(ds.Tables("Users")))
            End If
            If (Not (ds.Tables("Respondents")) Is Nothing) Then
                MyBase.Tables.Add(New RespondentsDataTable(ds.Tables("Respondents")))
            End If
            If (Not (ds.Tables("Household")) Is Nothing) Then
                MyBase.Tables.Add(New HouseholdDataTable(ds.Tables("Household")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, Global.System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.ReadXmlSchema(New Global.System.Xml.XmlTextReader(New Global.System.IO.StringReader(strSchema)))
        End If
        Me.GetSerializationData(info, context)
        Dim schemaChangedHandler As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property RespondentProperties() As RespondentPropertiesDataTable
        Get
            Return Me.tableRespondentProperties
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property EventLog() As EventLogDataTable
        Get
            Return Me.tableEventLog
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property tblEvents() As tblEventsDataTable
        Get
            Return Me.tabletblEvents
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property Users() As UsersDataTable
        Get
            Return Me.tableUsers
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property Respondents() As RespondentsDataTable
        Get
            Return Me.tableRespondents
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property Household() As HouseholdDataTable
        Get
            Return Me.tableHousehold
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.BrowsableAttribute(true),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Visible)>  _
    Public Overrides Property SchemaSerializationMode() As Global.System.Data.SchemaSerializationMode
        Get
            Return Me._schemaSerializationMode
        End Get
        Set
            Me._schemaSerializationMode = value
        End Set
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Hidden)>  _
    Public Shadows ReadOnly Property Tables() As Global.System.Data.DataTableCollection
        Get
            Return MyBase.Tables
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Hidden)>  _
    Public Shadows ReadOnly Property Relations() As Global.System.Data.DataRelationCollection
        Get
            Return MyBase.Relations
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Sub InitializeDerivedDataSet()
        Me.BeginInit
        Me.InitClass
        Me.EndInit
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Overrides Function Clone() As Global.System.Data.DataSet
        Dim cln As dsRespondentDetails = CType(MyBase.Clone,dsRespondentDetails)
        cln.InitVars
        cln.SchemaSerializationMode = Me.SchemaSerializationMode
        Return cln
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function ShouldSerializeTables() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function ShouldSerializeRelations() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Sub ReadXmlSerializable(ByVal reader As Global.System.Xml.XmlReader)
        If (Me.DetermineSchemaSerializationMode(reader) = Global.System.Data.SchemaSerializationMode.IncludeSchema) Then
            Me.Reset
            Dim ds As Global.System.Data.DataSet = New Global.System.Data.DataSet
            ds.ReadXml(reader)
            If (Not (ds.Tables("RespondentProperties")) Is Nothing) Then
                MyBase.Tables.Add(New RespondentPropertiesDataTable(ds.Tables("RespondentProperties")))
            End If
            If (Not (ds.Tables("EventLog")) Is Nothing) Then
                MyBase.Tables.Add(New EventLogDataTable(ds.Tables("EventLog")))
            End If
            If (Not (ds.Tables("tblEvents")) Is Nothing) Then
                MyBase.Tables.Add(New tblEventsDataTable(ds.Tables("tblEvents")))
            End If
            If (Not (ds.Tables("Users")) Is Nothing) Then
                MyBase.Tables.Add(New UsersDataTable(ds.Tables("Users")))
            End If
            If (Not (ds.Tables("Respondents")) Is Nothing) Then
                MyBase.Tables.Add(New RespondentsDataTable(ds.Tables("Respondents")))
            End If
            If (Not (ds.Tables("Household")) Is Nothing) Then
                MyBase.Tables.Add(New HouseholdDataTable(ds.Tables("Household")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, Global.System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.ReadXml(reader)
            Me.InitVars
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function GetSchemaSerializable() As Global.System.Xml.Schema.XmlSchema
        Dim stream As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
        Me.WriteXmlSchema(New Global.System.Xml.XmlTextWriter(stream, Nothing))
        stream.Position = 0
        Return Global.System.Xml.Schema.XmlSchema.Read(New Global.System.Xml.XmlTextReader(stream), Nothing)
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Friend Overloads Sub InitVars()
        Me.InitVars(true)
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Friend Overloads Sub InitVars(ByVal initTable As Boolean)
        Me.tableRespondentProperties = CType(MyBase.Tables("RespondentProperties"),RespondentPropertiesDataTable)
        If (initTable = true) Then
            If (Not (Me.tableRespondentProperties) Is Nothing) Then
                Me.tableRespondentProperties.InitVars
            End If
        End If
        Me.tableEventLog = CType(MyBase.Tables("EventLog"),EventLogDataTable)
        If (initTable = true) Then
            If (Not (Me.tableEventLog) Is Nothing) Then
                Me.tableEventLog.InitVars
            End If
        End If
        Me.tabletblEvents = CType(MyBase.Tables("tblEvents"),tblEventsDataTable)
        If (initTable = true) Then
            If (Not (Me.tabletblEvents) Is Nothing) Then
                Me.tabletblEvents.InitVars
            End If
        End If
        Me.tableUsers = CType(MyBase.Tables("Users"),UsersDataTable)
        If (initTable = true) Then
            If (Not (Me.tableUsers) Is Nothing) Then
                Me.tableUsers.InitVars
            End If
        End If
        Me.tableRespondents = CType(MyBase.Tables("Respondents"),RespondentsDataTable)
        If (initTable = true) Then
            If (Not (Me.tableRespondents) Is Nothing) Then
                Me.tableRespondents.InitVars
            End If
        End If
        Me.tableHousehold = CType(MyBase.Tables("Household"),HouseholdDataTable)
        If (initTable = true) Then
            If (Not (Me.tableHousehold) Is Nothing) Then
                Me.tableHousehold.InitVars
            End If
        End If
        Me.relationRespondentsRespondentProperties = Me.Relations("RespondentsRespondentProperties")
        Me.relationUsersEventLog = Me.Relations("UsersEventLog")
        Me.relationtblEventsEventLog = Me.Relations("tblEventsEventLog")
        Me.relationRespondentsEventLog = Me.Relations("RespondentsEventLog")
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Sub InitClass()
        Me.DataSetName = "dsRespondentDetails"
        Me.Prefix = ""
        Me.Namespace = "http://tempuri.org/dsRespondentDetails.xsd"
        Me.EnforceConstraints = true
        Me.SchemaSerializationMode = Global.System.Data.SchemaSerializationMode.IncludeSchema
        Me.tableRespondentProperties = New RespondentPropertiesDataTable
        MyBase.Tables.Add(Me.tableRespondentProperties)
        Me.tableEventLog = New EventLogDataTable
        MyBase.Tables.Add(Me.tableEventLog)
        Me.tabletblEvents = New tblEventsDataTable
        MyBase.Tables.Add(Me.tabletblEvents)
        Me.tableUsers = New UsersDataTable
        MyBase.Tables.Add(Me.tableUsers)
        Me.tableRespondents = New RespondentsDataTable
        MyBase.Tables.Add(Me.tableRespondents)
        Me.tableHousehold = New HouseholdDataTable
        MyBase.Tables.Add(Me.tableHousehold)
        Dim fkc As Global.System.Data.ForeignKeyConstraint
        fkc = New Global.System.Data.ForeignKeyConstraint("RespondentsRespondentProperties", New Global.System.Data.DataColumn() {Me.tableRespondents.RespondentIDColumn}, New Global.System.Data.DataColumn() {Me.tableRespondentProperties.RespondentIDColumn})
        Me.tableRespondentProperties.Constraints.Add(fkc)
        fkc.AcceptRejectRule = Global.System.Data.AcceptRejectRule.None
        fkc.DeleteRule = Global.System.Data.Rule.Cascade
        fkc.UpdateRule = Global.System.Data.Rule.Cascade
        fkc = New Global.System.Data.ForeignKeyConstraint("UsersEventLog", New Global.System.Data.DataColumn() {Me.tableUsers.UserIDColumn}, New Global.System.Data.DataColumn() {Me.tableEventLog.UserIDColumn})
        Me.tableEventLog.Constraints.Add(fkc)
        fkc.AcceptRejectRule = Global.System.Data.AcceptRejectRule.None
        fkc.DeleteRule = Global.System.Data.Rule.Cascade
        fkc.UpdateRule = Global.System.Data.Rule.Cascade
        fkc = New Global.System.Data.ForeignKeyConstraint("tblEventsEventLog", New Global.System.Data.DataColumn() {Me.tabletblEvents.EventIDColumn}, New Global.System.Data.DataColumn() {Me.tableEventLog.EventIDColumn})
        Me.tableEventLog.Constraints.Add(fkc)
        fkc.AcceptRejectRule = Global.System.Data.AcceptRejectRule.None
        fkc.DeleteRule = Global.System.Data.Rule.Cascade
        fkc.UpdateRule = Global.System.Data.Rule.Cascade
        fkc = New Global.System.Data.ForeignKeyConstraint("RespondentsEventLog", New Global.System.Data.DataColumn() {Me.tableRespondents.RespondentIDColumn}, New Global.System.Data.DataColumn() {Me.tableEventLog.RespondentIDColumn})
        Me.tableEventLog.Constraints.Add(fkc)
        fkc.AcceptRejectRule = Global.System.Data.AcceptRejectRule.None
        fkc.DeleteRule = Global.System.Data.Rule.Cascade
        fkc.UpdateRule = Global.System.Data.Rule.Cascade
        Me.relationRespondentsRespondentProperties = New Global.System.Data.DataRelation("RespondentsRespondentProperties", New Global.System.Data.DataColumn() {Me.tableRespondents.RespondentIDColumn}, New Global.System.Data.DataColumn() {Me.tableRespondentProperties.RespondentIDColumn}, false)
        Me.Relations.Add(Me.relationRespondentsRespondentProperties)
        Me.relationUsersEventLog = New Global.System.Data.DataRelation("UsersEventLog", New Global.System.Data.DataColumn() {Me.tableUsers.UserIDColumn}, New Global.System.Data.DataColumn() {Me.tableEventLog.UserIDColumn}, false)
        Me.Relations.Add(Me.relationUsersEventLog)
        Me.relationtblEventsEventLog = New Global.System.Data.DataRelation("tblEventsEventLog", New Global.System.Data.DataColumn() {Me.tabletblEvents.EventIDColumn}, New Global.System.Data.DataColumn() {Me.tableEventLog.EventIDColumn}, false)
        Me.Relations.Add(Me.relationtblEventsEventLog)
        Me.relationRespondentsEventLog = New Global.System.Data.DataRelation("RespondentsEventLog", New Global.System.Data.DataColumn() {Me.tableRespondents.RespondentIDColumn}, New Global.System.Data.DataColumn() {Me.tableEventLog.RespondentIDColumn}, false)
        Me.Relations.Add(Me.relationRespondentsEventLog)
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeRespondentProperties() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeEventLog() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializetblEvents() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeUsers() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeRespondents() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeHousehold() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Sub SchemaChanged(ByVal sender As Object, ByVal e As Global.System.ComponentModel.CollectionChangeEventArgs)
        If (e.Action = Global.System.ComponentModel.CollectionChangeAction.Remove) Then
            Me.InitVars
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Shared Function GetTypedDataSetSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
        Dim ds As dsRespondentDetails = New dsRespondentDetails
        Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
        Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
        Dim any As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
        any.Namespace = ds.Namespace
        sequence.Items.Add(any)
        type.Particle = sequence
        Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
        If xs.Contains(dsSchema.TargetNamespace) Then
            Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
            Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
            Try 
                Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                dsSchema.Write(s1)
                Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                Do While schemas.MoveNext
                    schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                    s2.SetLength(0)
                    schema.Write(s2)
                    If (s1.Length = s2.Length) Then
                        s1.Position = 0
                        s2.Position = 0
                        
                        Do While ((s1.Position <> s1.Length)  _
                                    AndAlso (s1.ReadByte = s2.ReadByte))
                            
                            
                        Loop
                        If (s1.Position = s1.Length) Then
                            Return type
                        End If
                    End If
                    
                Loop
            Finally
                If (Not (s1) Is Nothing) Then
                    s1.Close
                End If
                If (Not (s2) Is Nothing) Then
                    s2.Close
                End If
            End Try
        End If
        xs.Add(dsSchema)
        Return type
    End Function
    
    Public Delegate Sub RespondentPropertiesRowChangeEventHandler(ByVal sender As Object, ByVal e As RespondentPropertiesRowChangeEvent)
    
    Public Delegate Sub EventLogRowChangeEventHandler(ByVal sender As Object, ByVal e As EventLogRowChangeEvent)
    
    Public Delegate Sub tblEventsRowChangeEventHandler(ByVal sender As Object, ByVal e As tblEventsRowChangeEvent)
    
    Public Delegate Sub UsersRowChangeEventHandler(ByVal sender As Object, ByVal e As UsersRowChangeEvent)
    
    Public Delegate Sub RespondentsRowChangeEventHandler(ByVal sender As Object, ByVal e As RespondentsRowChangeEvent)
    
    Public Delegate Sub HouseholdRowChangeEventHandler(ByVal sender As Object, ByVal e As HouseholdRowChangeEvent)
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class RespondentPropertiesDataTable
        Inherits Global.System.Data.TypedTableBase(Of RespondentPropertiesRow)
        
        Private columnRespondentPropertyID As Global.System.Data.DataColumn
        
        Private columnRespondentID As Global.System.Data.DataColumn
        
        Private columnPropertyName As Global.System.Data.DataColumn
        
        Private columnPropertyValue As Global.System.Data.DataColumn
        
        Private columnPropertyLevel As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "RespondentProperties"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property RespondentPropertyIDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRespondentPropertyID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property RespondentIDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRespondentID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PropertyNameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPropertyName
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PropertyValueColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPropertyValue
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PropertyLevelColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPropertyLevel
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As RespondentPropertiesRow
            Get
                Return CType(Me.Rows(index),RespondentPropertiesRow)
            End Get
        End Property
        
        Public Event RespondentPropertiesRowChanging As RespondentPropertiesRowChangeEventHandler
        
        Public Event RespondentPropertiesRowChanged As RespondentPropertiesRowChangeEventHandler
        
        Public Event RespondentPropertiesRowDeleting As RespondentPropertiesRowChangeEventHandler
        
        Public Event RespondentPropertiesRowDeleted As RespondentPropertiesRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddRespondentPropertiesRow(ByVal row As RespondentPropertiesRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddRespondentPropertiesRow(ByVal parentRespondentsRowByRespondentsRespondentProperties As RespondentsRow, ByVal PropertyName As String, ByVal PropertyValue As String, ByVal PropertyLevel As Integer) As RespondentPropertiesRow
            Dim rowRespondentPropertiesRow As RespondentPropertiesRow = CType(Me.NewRow,RespondentPropertiesRow)
            Dim columnValuesArray() As Object = New Object() {Nothing, Nothing, PropertyName, PropertyValue, PropertyLevel}
            If (Not (parentRespondentsRowByRespondentsRespondentProperties) Is Nothing) Then
                columnValuesArray(1) = parentRespondentsRowByRespondentsRespondentProperties(0)
            End If
            rowRespondentPropertiesRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowRespondentPropertiesRow)
            Return rowRespondentPropertiesRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByRespondentPropertyID(ByVal RespondentPropertyID As Integer) As RespondentPropertiesRow
            Return CType(Me.Rows.Find(New Object() {RespondentPropertyID}),RespondentPropertiesRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As RespondentPropertiesDataTable = CType(MyBase.Clone,RespondentPropertiesDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New RespondentPropertiesDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnRespondentPropertyID = MyBase.Columns("RespondentPropertyID")
            Me.columnRespondentID = MyBase.Columns("RespondentID")
            Me.columnPropertyName = MyBase.Columns("PropertyName")
            Me.columnPropertyValue = MyBase.Columns("PropertyValue")
            Me.columnPropertyLevel = MyBase.Columns("PropertyLevel")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnRespondentPropertyID = New Global.System.Data.DataColumn("RespondentPropertyID", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRespondentPropertyID)
            Me.columnRespondentID = New Global.System.Data.DataColumn("RespondentID", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRespondentID)
            Me.columnPropertyName = New Global.System.Data.DataColumn("PropertyName", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPropertyName)
            Me.columnPropertyValue = New Global.System.Data.DataColumn("PropertyValue", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPropertyValue)
            Me.columnPropertyLevel = New Global.System.Data.DataColumn("PropertyLevel", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPropertyLevel)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("dsRespondentDetailsKey2", New Global.System.Data.DataColumn() {Me.columnRespondentPropertyID}, true))
            Me.columnRespondentPropertyID.AutoIncrement = true
            Me.columnRespondentPropertyID.AllowDBNull = false
            Me.columnRespondentPropertyID.ReadOnly = true
            Me.columnRespondentPropertyID.Unique = true
            Me.columnRespondentID.AllowDBNull = false
            Me.columnPropertyName.AllowDBNull = false
            Me.columnPropertyValue.AllowDBNull = false
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewRespondentPropertiesRow() As RespondentPropertiesRow
            Return CType(Me.NewRow,RespondentPropertiesRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New RespondentPropertiesRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(RespondentPropertiesRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.RespondentPropertiesRowChangedEvent) Is Nothing) Then
                RaiseEvent RespondentPropertiesRowChanged(Me, New RespondentPropertiesRowChangeEvent(CType(e.Row,RespondentPropertiesRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.RespondentPropertiesRowChangingEvent) Is Nothing) Then
                RaiseEvent RespondentPropertiesRowChanging(Me, New RespondentPropertiesRowChangeEvent(CType(e.Row,RespondentPropertiesRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.RespondentPropertiesRowDeletedEvent) Is Nothing) Then
                RaiseEvent RespondentPropertiesRowDeleted(Me, New RespondentPropertiesRowChangeEvent(CType(e.Row,RespondentPropertiesRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.RespondentPropertiesRowDeletingEvent) Is Nothing) Then
                RaiseEvent RespondentPropertiesRowDeleting(Me, New RespondentPropertiesRowChangeEvent(CType(e.Row,RespondentPropertiesRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveRespondentPropertiesRow(ByVal row As RespondentPropertiesRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As dsRespondentDetails = New dsRespondentDetails
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "RespondentPropertiesDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class EventLogDataTable
        Inherits Global.System.Data.TypedTableBase(Of EventLogRow)
        
        Private columnEventLogID As Global.System.Data.DataColumn
        
        Private columnEventDate As Global.System.Data.DataColumn
        
        Private columnEventID As Global.System.Data.DataColumn
        
        Private columnUserID As Global.System.Data.DataColumn
        
        Private columnRespondentID As Global.System.Data.DataColumn
        
        Private columnEventParameters As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "EventLog"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property EventLogIDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEventLogID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property EventDateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEventDate
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property EventIDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEventID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property UserIDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnUserID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property RespondentIDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRespondentID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property EventParametersColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEventParameters
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As EventLogRow
            Get
                Return CType(Me.Rows(index),EventLogRow)
            End Get
        End Property
        
        Public Event EventLogRowChanging As EventLogRowChangeEventHandler
        
        Public Event EventLogRowChanged As EventLogRowChangeEventHandler
        
        Public Event EventLogRowDeleting As EventLogRowChangeEventHandler
        
        Public Event EventLogRowDeleted As EventLogRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddEventLogRow(ByVal row As EventLogRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddEventLogRow(ByVal EventDate As Date, ByVal parenttblEventsRowBytblEventsEventLog As tblEventsRow, ByVal parentUsersRowByUsersEventLog As UsersRow, ByVal parentRespondentsRowByRespondentsEventLog As RespondentsRow, ByVal EventParameters As String) As EventLogRow
            Dim rowEventLogRow As EventLogRow = CType(Me.NewRow,EventLogRow)
            Dim columnValuesArray() As Object = New Object() {Nothing, EventDate, Nothing, Nothing, Nothing, EventParameters}
            If (Not (parenttblEventsRowBytblEventsEventLog) Is Nothing) Then
                columnValuesArray(2) = parenttblEventsRowBytblEventsEventLog(0)
            End If
            If (Not (parentUsersRowByUsersEventLog) Is Nothing) Then
                columnValuesArray(3) = parentUsersRowByUsersEventLog(0)
            End If
            If (Not (parentRespondentsRowByRespondentsEventLog) Is Nothing) Then
                columnValuesArray(4) = parentRespondentsRowByRespondentsEventLog(0)
            End If
            rowEventLogRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowEventLogRow)
            Return rowEventLogRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByEventLogID(ByVal EventLogID As Integer) As EventLogRow
            Return CType(Me.Rows.Find(New Object() {EventLogID}),EventLogRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As EventLogDataTable = CType(MyBase.Clone,EventLogDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New EventLogDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnEventLogID = MyBase.Columns("EventLogID")
            Me.columnEventDate = MyBase.Columns("EventDate")
            Me.columnEventID = MyBase.Columns("EventID")
            Me.columnUserID = MyBase.Columns("UserID")
            Me.columnRespondentID = MyBase.Columns("RespondentID")
            Me.columnEventParameters = MyBase.Columns("EventParameters")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnEventLogID = New Global.System.Data.DataColumn("EventLogID", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEventLogID)
            Me.columnEventDate = New Global.System.Data.DataColumn("EventDate", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEventDate)
            Me.columnEventID = New Global.System.Data.DataColumn("EventID", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEventID)
            Me.columnUserID = New Global.System.Data.DataColumn("UserID", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnUserID)
            Me.columnRespondentID = New Global.System.Data.DataColumn("RespondentID", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRespondentID)
            Me.columnEventParameters = New Global.System.Data.DataColumn("EventParameters", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEventParameters)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("dsRespondentDetailsKey3", New Global.System.Data.DataColumn() {Me.columnEventLogID}, true))
            Me.columnEventLogID.AutoIncrement = true
            Me.columnEventLogID.AllowDBNull = false
            Me.columnEventLogID.ReadOnly = true
            Me.columnEventLogID.Unique = true
            Me.columnEventDate.AllowDBNull = false
            Me.columnEventID.AllowDBNull = false
            Me.columnUserID.AllowDBNull = false
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewEventLogRow() As EventLogRow
            Return CType(Me.NewRow,EventLogRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New EventLogRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(EventLogRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.EventLogRowChangedEvent) Is Nothing) Then
                RaiseEvent EventLogRowChanged(Me, New EventLogRowChangeEvent(CType(e.Row,EventLogRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.EventLogRowChangingEvent) Is Nothing) Then
                RaiseEvent EventLogRowChanging(Me, New EventLogRowChangeEvent(CType(e.Row,EventLogRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.EventLogRowDeletedEvent) Is Nothing) Then
                RaiseEvent EventLogRowDeleted(Me, New EventLogRowChangeEvent(CType(e.Row,EventLogRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.EventLogRowDeletingEvent) Is Nothing) Then
                RaiseEvent EventLogRowDeleting(Me, New EventLogRowChangeEvent(CType(e.Row,EventLogRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveEventLogRow(ByVal row As EventLogRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As dsRespondentDetails = New dsRespondentDetails
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "EventLogDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class tblEventsDataTable
        Inherits Global.System.Data.TypedTableBase(Of tblEventsRow)
        
        Private columnEventID As Global.System.Data.DataColumn
        
        Private columnName As Global.System.Data.DataColumn
        
        Private columnDescription As Global.System.Data.DataColumn
        
        Private columnEventTypeID As Global.System.Data.DataColumn
        
        Private columnFinalCode As Global.System.Data.DataColumn
        
        Private columnUserCreated As Global.System.Data.DataColumn
        
        Private columnDefaultNonContact As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "tblEvents"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property EventIDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEventID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnName
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DescriptionColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDescription
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property EventTypeIDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEventTypeID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FinalCodeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFinalCode
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property UserCreatedColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnUserCreated
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DefaultNonContactColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDefaultNonContact
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As tblEventsRow
            Get
                Return CType(Me.Rows(index),tblEventsRow)
            End Get
        End Property
        
        Public Event tblEventsRowChanging As tblEventsRowChangeEventHandler
        
        Public Event tblEventsRowChanged As tblEventsRowChangeEventHandler
        
        Public Event tblEventsRowDeleting As tblEventsRowChangeEventHandler
        
        Public Event tblEventsRowDeleted As tblEventsRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddtblEventsRow(ByVal row As tblEventsRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddtblEventsRow(ByVal EventID As Integer, ByVal Name As String, ByVal Description As String, ByVal EventTypeID As Integer, ByVal FinalCode As Byte, ByVal UserCreated As Byte, ByVal DefaultNonContact As Integer) As tblEventsRow
            Dim rowtblEventsRow As tblEventsRow = CType(Me.NewRow,tblEventsRow)
            Dim columnValuesArray() As Object = New Object() {EventID, Name, Description, EventTypeID, FinalCode, UserCreated, DefaultNonContact}
            rowtblEventsRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowtblEventsRow)
            Return rowtblEventsRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByEventID(ByVal EventID As Integer) As tblEventsRow
            Return CType(Me.Rows.Find(New Object() {EventID}),tblEventsRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As tblEventsDataTable = CType(MyBase.Clone,tblEventsDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New tblEventsDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnEventID = MyBase.Columns("EventID")
            Me.columnName = MyBase.Columns("Name")
            Me.columnDescription = MyBase.Columns("Description")
            Me.columnEventTypeID = MyBase.Columns("EventTypeID")
            Me.columnFinalCode = MyBase.Columns("FinalCode")
            Me.columnUserCreated = MyBase.Columns("UserCreated")
            Me.columnDefaultNonContact = MyBase.Columns("DefaultNonContact")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnEventID = New Global.System.Data.DataColumn("EventID", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEventID)
            Me.columnName = New Global.System.Data.DataColumn("Name", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnName)
            Me.columnDescription = New Global.System.Data.DataColumn("Description", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDescription)
            Me.columnEventTypeID = New Global.System.Data.DataColumn("EventTypeID", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEventTypeID)
            Me.columnFinalCode = New Global.System.Data.DataColumn("FinalCode", GetType(Byte), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFinalCode)
            Me.columnUserCreated = New Global.System.Data.DataColumn("UserCreated", GetType(Byte), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnUserCreated)
            Me.columnDefaultNonContact = New Global.System.Data.DataColumn("DefaultNonContact", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDefaultNonContact)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("dsRespondentDetailsKey4", New Global.System.Data.DataColumn() {Me.columnEventID}, true))
            Me.columnEventID.AllowDBNull = false
            Me.columnEventID.Unique = true
            Me.columnName.AllowDBNull = false
            Me.columnDescription.AllowDBNull = false
            Me.columnEventTypeID.AllowDBNull = false
            Me.columnFinalCode.AllowDBNull = false
            Me.columnUserCreated.AllowDBNull = false
            Me.columnDefaultNonContact.AllowDBNull = false
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewtblEventsRow() As tblEventsRow
            Return CType(Me.NewRow,tblEventsRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New tblEventsRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(tblEventsRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.tblEventsRowChangedEvent) Is Nothing) Then
                RaiseEvent tblEventsRowChanged(Me, New tblEventsRowChangeEvent(CType(e.Row,tblEventsRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.tblEventsRowChangingEvent) Is Nothing) Then
                RaiseEvent tblEventsRowChanging(Me, New tblEventsRowChangeEvent(CType(e.Row,tblEventsRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.tblEventsRowDeletedEvent) Is Nothing) Then
                RaiseEvent tblEventsRowDeleted(Me, New tblEventsRowChangeEvent(CType(e.Row,tblEventsRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.tblEventsRowDeletingEvent) Is Nothing) Then
                RaiseEvent tblEventsRowDeleting(Me, New tblEventsRowChangeEvent(CType(e.Row,tblEventsRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemovetblEventsRow(ByVal row As tblEventsRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As dsRespondentDetails = New dsRespondentDetails
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "tblEventsDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class UsersDataTable
        Inherits Global.System.Data.TypedTableBase(Of UsersRow)
        
        Private columnUserID As Global.System.Data.DataColumn
        
        Private columnUsername As Global.System.Data.DataColumn
        
        Private columnFirstName As Global.System.Data.DataColumn
        
        Private columnLastName As Global.System.Data.DataColumn
        
        Private columnPassword As Global.System.Data.DataColumn
        
        Private columnEmail As Global.System.Data.DataColumn
        
        Private columnGroupID As Global.System.Data.DataColumn
        
        Private columnActive As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "Users"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property UserIDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnUserID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property UsernameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnUsername
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FirstNameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFirstName
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property LastNameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnLastName
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PasswordColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPassword
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property EmailColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEmail
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property GroupIDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnGroupID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ActiveColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnActive
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As UsersRow
            Get
                Return CType(Me.Rows(index),UsersRow)
            End Get
        End Property
        
        Public Event UsersRowChanging As UsersRowChangeEventHandler
        
        Public Event UsersRowChanged As UsersRowChangeEventHandler
        
        Public Event UsersRowDeleting As UsersRowChangeEventHandler
        
        Public Event UsersRowDeleted As UsersRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddUsersRow(ByVal row As UsersRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddUsersRow(ByVal Username As String, ByVal FirstName As String, ByVal LastName As String, ByVal Password As String, ByVal Email As String, ByVal GroupID As Integer, ByVal Active As Byte) As UsersRow
            Dim rowUsersRow As UsersRow = CType(Me.NewRow,UsersRow)
            Dim columnValuesArray() As Object = New Object() {Nothing, Username, FirstName, LastName, Password, Email, GroupID, Active}
            rowUsersRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowUsersRow)
            Return rowUsersRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByUserID(ByVal UserID As Integer) As UsersRow
            Return CType(Me.Rows.Find(New Object() {UserID}),UsersRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As UsersDataTable = CType(MyBase.Clone,UsersDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New UsersDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnUserID = MyBase.Columns("UserID")
            Me.columnUsername = MyBase.Columns("Username")
            Me.columnFirstName = MyBase.Columns("FirstName")
            Me.columnLastName = MyBase.Columns("LastName")
            Me.columnPassword = MyBase.Columns("Password")
            Me.columnEmail = MyBase.Columns("Email")
            Me.columnGroupID = MyBase.Columns("GroupID")
            Me.columnActive = MyBase.Columns("Active")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnUserID = New Global.System.Data.DataColumn("UserID", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnUserID)
            Me.columnUsername = New Global.System.Data.DataColumn("Username", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnUsername)
            Me.columnFirstName = New Global.System.Data.DataColumn("FirstName", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFirstName)
            Me.columnLastName = New Global.System.Data.DataColumn("LastName", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnLastName)
            Me.columnPassword = New Global.System.Data.DataColumn("Password", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPassword)
            Me.columnEmail = New Global.System.Data.DataColumn("Email", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEmail)
            Me.columnGroupID = New Global.System.Data.DataColumn("GroupID", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnGroupID)
            Me.columnActive = New Global.System.Data.DataColumn("Active", GetType(Byte), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnActive)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("dsRespondentDetailsKey5", New Global.System.Data.DataColumn() {Me.columnUserID}, true))
            Me.columnUserID.AutoIncrement = true
            Me.columnUserID.AllowDBNull = false
            Me.columnUserID.ReadOnly = true
            Me.columnUserID.Unique = true
            Me.columnUsername.AllowDBNull = false
            Me.columnFirstName.AllowDBNull = false
            Me.columnLastName.AllowDBNull = false
            Me.columnPassword.AllowDBNull = false
            Me.columnEmail.AllowDBNull = false
            Me.columnGroupID.AllowDBNull = false
            Me.columnActive.AllowDBNull = false
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewUsersRow() As UsersRow
            Return CType(Me.NewRow,UsersRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New UsersRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(UsersRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.UsersRowChangedEvent) Is Nothing) Then
                RaiseEvent UsersRowChanged(Me, New UsersRowChangeEvent(CType(e.Row,UsersRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.UsersRowChangingEvent) Is Nothing) Then
                RaiseEvent UsersRowChanging(Me, New UsersRowChangeEvent(CType(e.Row,UsersRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.UsersRowDeletedEvent) Is Nothing) Then
                RaiseEvent UsersRowDeleted(Me, New UsersRowChangeEvent(CType(e.Row,UsersRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.UsersRowDeletingEvent) Is Nothing) Then
                RaiseEvent UsersRowDeleting(Me, New UsersRowChangeEvent(CType(e.Row,UsersRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveUsersRow(ByVal row As UsersRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As dsRespondentDetails = New dsRespondentDetails
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "UsersDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class RespondentsDataTable
        Inherits Global.System.Data.TypedTableBase(Of RespondentsRow)
        
        Private columnRespondentID As Global.System.Data.DataColumn
        
        Private columnSurveyInstanceID As Global.System.Data.DataColumn
        
        Private columnFirstName As Global.System.Data.DataColumn
        
        Private columnMiddleInitial As Global.System.Data.DataColumn
        
        Private columnLastName As Global.System.Data.DataColumn
        
        Private columnAddress1 As Global.System.Data.DataColumn
        
        Private columnAddress2 As Global.System.Data.DataColumn
        
        Private columnCity As Global.System.Data.DataColumn
        
        Private columnState As Global.System.Data.DataColumn
        
        Private columnPostalCode As Global.System.Data.DataColumn
        
        Private columnTelephoneDay As Global.System.Data.DataColumn
        
        Private columnTelephoneEvening As Global.System.Data.DataColumn
        
        Private columnEmail As Global.System.Data.DataColumn
        
        Private columnDOB As Global.System.Data.DataColumn
        
        Private columnGender As Global.System.Data.DataColumn
        
        Private columnClientRespondentID As Global.System.Data.DataColumn
        
        Private columnSSN As Global.System.Data.DataColumn
        
        Private columnBatchID As Global.System.Data.DataColumn
        
        Private columnSurveyInstanceName As Global.System.Data.DataColumn
        
        Private columnClientName As Global.System.Data.DataColumn
        
        Private columnSurveyName As Global.System.Data.DataColumn
        
        Private columnClientID As Global.System.Data.DataColumn
        
        Private columnSurveyID As Global.System.Data.DataColumn
        
        Private columnCallsMade As Global.System.Data.DataColumn
        
        Private columnFinal As Global.System.Data.DataColumn
        
        Private columnNextContact As Global.System.Data.DataColumn
        
        Private columnPostalCodeExt As Global.System.Data.DataColumn
        
        Private columnRespondentKey As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "Respondents"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property RespondentIDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRespondentID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SurveyInstanceIDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSurveyInstanceID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FirstNameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFirstName
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property MiddleInitialColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMiddleInitial
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property LastNameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnLastName
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Address1Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnAddress1
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Address2Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnAddress2
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CityColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCity
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property StateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnState
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PostalCodeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPostalCode
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TelephoneDayColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTelephoneDay
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TelephoneEveningColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTelephoneEvening
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property EmailColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEmail
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DOBColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDOB
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property GenderColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnGender
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ClientRespondentIDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnClientRespondentID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SSNColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSSN
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property BatchIDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnBatchID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SurveyInstanceNameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSurveyInstanceName
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ClientNameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnClientName
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SurveyNameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSurveyName
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ClientIDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnClientID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SurveyIDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSurveyID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CallsMadeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCallsMade
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FinalColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFinal
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NextContactColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNextContact
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PostalCodeExtColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPostalCodeExt
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property RespondentKeyColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRespondentKey
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As RespondentsRow
            Get
                Return CType(Me.Rows(index),RespondentsRow)
            End Get
        End Property
        
        Public Event RespondentsRowChanging As RespondentsRowChangeEventHandler
        
        Public Event RespondentsRowChanged As RespondentsRowChangeEventHandler
        
        Public Event RespondentsRowDeleting As RespondentsRowChangeEventHandler
        
        Public Event RespondentsRowDeleted As RespondentsRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddRespondentsRow(ByVal row As RespondentsRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddRespondentsRow( _
                    ByVal SurveyInstanceID As Integer,  _
                    ByVal FirstName As String,  _
                    ByVal MiddleInitial As String,  _
                    ByVal LastName As String,  _
                    ByVal Address1 As String,  _
                    ByVal Address2 As String,  _
                    ByVal City As String,  _
                    ByVal State As String,  _
                    ByVal PostalCode As String,  _
                    ByVal TelephoneDay As String,  _
                    ByVal TelephoneEvening As String,  _
                    ByVal Email As String,  _
                    ByVal DOB As Date,  _
                    ByVal Gender As String,  _
                    ByVal ClientRespondentID As String,  _
                    ByVal SSN As String,  _
                    ByVal BatchID As Integer,  _
                    ByVal SurveyInstanceName As String,  _
                    ByVal ClientName As String,  _
                    ByVal SurveyName As String,  _
                    ByVal CallsMade As Integer,  _
                    ByVal Final As Byte,  _
                    ByVal NextContact As Date,  _
                    ByVal PostalCodeExt As String,  _
                    ByVal RespondentKey As String) As RespondentsRow
            Dim rowRespondentsRow As RespondentsRow = CType(Me.NewRow,RespondentsRow)
            Dim columnValuesArray() As Object = New Object() {Nothing, SurveyInstanceID, FirstName, MiddleInitial, LastName, Address1, Address2, City, State, PostalCode, TelephoneDay, TelephoneEvening, Email, DOB, Gender, ClientRespondentID, SSN, BatchID, SurveyInstanceName, ClientName, SurveyName, Nothing, Nothing, CallsMade, Final, NextContact, PostalCodeExt, RespondentKey}
            rowRespondentsRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowRespondentsRow)
            Return rowRespondentsRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As RespondentsDataTable = CType(MyBase.Clone,RespondentsDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New RespondentsDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnRespondentID = MyBase.Columns("RespondentID")
            Me.columnSurveyInstanceID = MyBase.Columns("SurveyInstanceID")
            Me.columnFirstName = MyBase.Columns("FirstName")
            Me.columnMiddleInitial = MyBase.Columns("MiddleInitial")
            Me.columnLastName = MyBase.Columns("LastName")
            Me.columnAddress1 = MyBase.Columns("Address1")
            Me.columnAddress2 = MyBase.Columns("Address2")
            Me.columnCity = MyBase.Columns("City")
            Me.columnState = MyBase.Columns("State")
            Me.columnPostalCode = MyBase.Columns("PostalCode")
            Me.columnTelephoneDay = MyBase.Columns("TelephoneDay")
            Me.columnTelephoneEvening = MyBase.Columns("TelephoneEvening")
            Me.columnEmail = MyBase.Columns("Email")
            Me.columnDOB = MyBase.Columns("DOB")
            Me.columnGender = MyBase.Columns("Gender")
            Me.columnClientRespondentID = MyBase.Columns("ClientRespondentID")
            Me.columnSSN = MyBase.Columns("SSN")
            Me.columnBatchID = MyBase.Columns("BatchID")
            Me.columnSurveyInstanceName = MyBase.Columns("SurveyInstanceName")
            Me.columnClientName = MyBase.Columns("ClientName")
            Me.columnSurveyName = MyBase.Columns("SurveyName")
            Me.columnClientID = MyBase.Columns("ClientID")
            Me.columnSurveyID = MyBase.Columns("SurveyID")
            Me.columnCallsMade = MyBase.Columns("CallsMade")
            Me.columnFinal = MyBase.Columns("Final")
            Me.columnNextContact = MyBase.Columns("NextContact")
            Me.columnPostalCodeExt = MyBase.Columns("PostalCodeExt")
            Me.columnRespondentKey = MyBase.Columns("RespondentKey")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnRespondentID = New Global.System.Data.DataColumn("RespondentID", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRespondentID)
            Me.columnSurveyInstanceID = New Global.System.Data.DataColumn("SurveyInstanceID", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSurveyInstanceID)
            Me.columnFirstName = New Global.System.Data.DataColumn("FirstName", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFirstName)
            Me.columnMiddleInitial = New Global.System.Data.DataColumn("MiddleInitial", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMiddleInitial)
            Me.columnLastName = New Global.System.Data.DataColumn("LastName", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnLastName)
            Me.columnAddress1 = New Global.System.Data.DataColumn("Address1", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAddress1)
            Me.columnAddress2 = New Global.System.Data.DataColumn("Address2", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAddress2)
            Me.columnCity = New Global.System.Data.DataColumn("City", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCity)
            Me.columnState = New Global.System.Data.DataColumn("State", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnState)
            Me.columnPostalCode = New Global.System.Data.DataColumn("PostalCode", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPostalCode)
            Me.columnTelephoneDay = New Global.System.Data.DataColumn("TelephoneDay", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTelephoneDay)
            Me.columnTelephoneEvening = New Global.System.Data.DataColumn("TelephoneEvening", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTelephoneEvening)
            Me.columnEmail = New Global.System.Data.DataColumn("Email", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEmail)
            Me.columnDOB = New Global.System.Data.DataColumn("DOB", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDOB)
            Me.columnGender = New Global.System.Data.DataColumn("Gender", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnGender)
            Me.columnClientRespondentID = New Global.System.Data.DataColumn("ClientRespondentID", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnClientRespondentID)
            Me.columnSSN = New Global.System.Data.DataColumn("SSN", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSSN)
            Me.columnBatchID = New Global.System.Data.DataColumn("BatchID", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnBatchID)
            Me.columnSurveyInstanceName = New Global.System.Data.DataColumn("SurveyInstanceName", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSurveyInstanceName)
            Me.columnClientName = New Global.System.Data.DataColumn("ClientName", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnClientName)
            Me.columnSurveyName = New Global.System.Data.DataColumn("SurveyName", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSurveyName)
            Me.columnClientID = New Global.System.Data.DataColumn("ClientID", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnClientID)
            Me.columnSurveyID = New Global.System.Data.DataColumn("SurveyID", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSurveyID)
            Me.columnCallsMade = New Global.System.Data.DataColumn("CallsMade", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCallsMade)
            Me.columnFinal = New Global.System.Data.DataColumn("Final", GetType(Byte), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFinal)
            Me.columnNextContact = New Global.System.Data.DataColumn("NextContact", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNextContact)
            Me.columnPostalCodeExt = New Global.System.Data.DataColumn("PostalCodeExt", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPostalCodeExt)
            Me.columnRespondentKey = New Global.System.Data.DataColumn("RespondentKey", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRespondentKey)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("dsRespondentDetailsKey1", New Global.System.Data.DataColumn() {Me.columnRespondentID}, false))
            Me.columnRespondentID.AutoIncrement = true
            Me.columnRespondentID.AllowDBNull = false
            Me.columnRespondentID.ReadOnly = true
            Me.columnRespondentID.Unique = true
            Me.columnSurveyInstanceID.AllowDBNull = false
            Me.columnLastName.AllowDBNull = false
            Me.columnSurveyInstanceName.AllowDBNull = false
            Me.columnClientName.AllowDBNull = false
            Me.columnSurveyName.AllowDBNull = false
            Me.columnClientID.AutoIncrement = true
            Me.columnClientID.AllowDBNull = false
            Me.columnClientID.ReadOnly = true
            Me.columnSurveyID.AutoIncrement = true
            Me.columnSurveyID.AllowDBNull = false
            Me.columnSurveyID.ReadOnly = true
            Me.columnCallsMade.AllowDBNull = false
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewRespondentsRow() As RespondentsRow
            Return CType(Me.NewRow,RespondentsRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New RespondentsRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(RespondentsRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.RespondentsRowChangedEvent) Is Nothing) Then
                RaiseEvent RespondentsRowChanged(Me, New RespondentsRowChangeEvent(CType(e.Row,RespondentsRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.RespondentsRowChangingEvent) Is Nothing) Then
                RaiseEvent RespondentsRowChanging(Me, New RespondentsRowChangeEvent(CType(e.Row,RespondentsRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.RespondentsRowDeletedEvent) Is Nothing) Then
                RaiseEvent RespondentsRowDeleted(Me, New RespondentsRowChangeEvent(CType(e.Row,RespondentsRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.RespondentsRowDeletingEvent) Is Nothing) Then
                RaiseEvent RespondentsRowDeleting(Me, New RespondentsRowChangeEvent(CType(e.Row,RespondentsRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveRespondentsRow(ByVal row As RespondentsRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As dsRespondentDetails = New dsRespondentDetails
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "RespondentsDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class HouseholdDataTable
        Inherits Global.System.Data.TypedTableBase(Of HouseholdRow)
        
        Private columnRespondentID As Global.System.Data.DataColumn
        
        Private columnFirstName As Global.System.Data.DataColumn
        
        Private columnLastName As Global.System.Data.DataColumn
        
        Private columnTelephone As Global.System.Data.DataColumn
        
        Private columnSurveyName As Global.System.Data.DataColumn
        
        Private columnClientName As Global.System.Data.DataColumn
        
        Private columnSurveyInstanceName As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "Household"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property RespondentIDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRespondentID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FirstNameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFirstName
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property LastNameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnLastName
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TelephoneColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTelephone
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SurveyNameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSurveyName
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ClientNameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnClientName
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SurveyInstanceNameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSurveyInstanceName
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As HouseholdRow
            Get
                Return CType(Me.Rows(index),HouseholdRow)
            End Get
        End Property
        
        Public Event HouseholdRowChanging As HouseholdRowChangeEventHandler
        
        Public Event HouseholdRowChanged As HouseholdRowChangeEventHandler
        
        Public Event HouseholdRowDeleting As HouseholdRowChangeEventHandler
        
        Public Event HouseholdRowDeleted As HouseholdRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddHouseholdRow(ByVal row As HouseholdRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddHouseholdRow(ByVal RespondentID As Integer, ByVal FirstName As String, ByVal LastName As String, ByVal Telephone As String, ByVal SurveyName As String, ByVal ClientName As String, ByVal SurveyInstanceName As String) As HouseholdRow
            Dim rowHouseholdRow As HouseholdRow = CType(Me.NewRow,HouseholdRow)
            Dim columnValuesArray() As Object = New Object() {RespondentID, FirstName, LastName, Telephone, SurveyName, ClientName, SurveyInstanceName}
            rowHouseholdRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowHouseholdRow)
            Return rowHouseholdRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As HouseholdDataTable = CType(MyBase.Clone,HouseholdDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New HouseholdDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnRespondentID = MyBase.Columns("RespondentID")
            Me.columnFirstName = MyBase.Columns("FirstName")
            Me.columnLastName = MyBase.Columns("LastName")
            Me.columnTelephone = MyBase.Columns("Telephone")
            Me.columnSurveyName = MyBase.Columns("SurveyName")
            Me.columnClientName = MyBase.Columns("ClientName")
            Me.columnSurveyInstanceName = MyBase.Columns("SurveyInstanceName")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnRespondentID = New Global.System.Data.DataColumn("RespondentID", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRespondentID)
            Me.columnFirstName = New Global.System.Data.DataColumn("FirstName", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFirstName)
            Me.columnLastName = New Global.System.Data.DataColumn("LastName", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnLastName)
            Me.columnTelephone = New Global.System.Data.DataColumn("Telephone", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTelephone)
            Me.columnSurveyName = New Global.System.Data.DataColumn("SurveyName", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSurveyName)
            Me.columnClientName = New Global.System.Data.DataColumn("ClientName", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnClientName)
            Me.columnSurveyInstanceName = New Global.System.Data.DataColumn("SurveyInstanceName", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSurveyInstanceName)
            Me.columnRespondentID.AllowDBNull = false
            Me.columnLastName.AllowDBNull = false
            Me.columnSurveyName.AllowDBNull = false
            Me.columnClientName.AllowDBNull = false
            Me.columnSurveyInstanceName.AllowDBNull = false
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewHouseholdRow() As HouseholdRow
            Return CType(Me.NewRow,HouseholdRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New HouseholdRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(HouseholdRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.HouseholdRowChangedEvent) Is Nothing) Then
                RaiseEvent HouseholdRowChanged(Me, New HouseholdRowChangeEvent(CType(e.Row,HouseholdRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.HouseholdRowChangingEvent) Is Nothing) Then
                RaiseEvent HouseholdRowChanging(Me, New HouseholdRowChangeEvent(CType(e.Row,HouseholdRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.HouseholdRowDeletedEvent) Is Nothing) Then
                RaiseEvent HouseholdRowDeleted(Me, New HouseholdRowChangeEvent(CType(e.Row,HouseholdRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.HouseholdRowDeletingEvent) Is Nothing) Then
                RaiseEvent HouseholdRowDeleting(Me, New HouseholdRowChangeEvent(CType(e.Row,HouseholdRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveHouseholdRow(ByVal row As HouseholdRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As dsRespondentDetails = New dsRespondentDetails
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "HouseholdDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class RespondentPropertiesRow
        Inherits Global.System.Data.DataRow
        
        Private tableRespondentProperties As RespondentPropertiesDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableRespondentProperties = CType(Me.Table,RespondentPropertiesDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property RespondentPropertyID() As Integer
            Get
                Return CType(Me(Me.tableRespondentProperties.RespondentPropertyIDColumn),Integer)
            End Get
            Set
                Me(Me.tableRespondentProperties.RespondentPropertyIDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property RespondentID() As Integer
            Get
                Return CType(Me(Me.tableRespondentProperties.RespondentIDColumn),Integer)
            End Get
            Set
                Me(Me.tableRespondentProperties.RespondentIDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PropertyName() As String
            Get
                Return CType(Me(Me.tableRespondentProperties.PropertyNameColumn),String)
            End Get
            Set
                Me(Me.tableRespondentProperties.PropertyNameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PropertyValue() As String
            Get
                Return CType(Me(Me.tableRespondentProperties.PropertyValueColumn),String)
            End Get
            Set
                Me(Me.tableRespondentProperties.PropertyValueColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PropertyLevel() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableRespondentProperties.PropertyLevelColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PropertyLevel' in table 'RespondentProperties' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableRespondentProperties.PropertyLevelColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property RespondentsRow() As RespondentsRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("RespondentsRespondentProperties")),RespondentsRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("RespondentsRespondentProperties"))
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPropertyLevelNull() As Boolean
            Return Me.IsNull(Me.tableRespondentProperties.PropertyLevelColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPropertyLevelNull()
            Me(Me.tableRespondentProperties.PropertyLevelColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class EventLogRow
        Inherits Global.System.Data.DataRow
        
        Private tableEventLog As EventLogDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableEventLog = CType(Me.Table,EventLogDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property EventLogID() As Integer
            Get
                Return CType(Me(Me.tableEventLog.EventLogIDColumn),Integer)
            End Get
            Set
                Me(Me.tableEventLog.EventLogIDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property EventDate() As Date
            Get
                Return CType(Me(Me.tableEventLog.EventDateColumn),Date)
            End Get
            Set
                Me(Me.tableEventLog.EventDateColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property EventID() As Integer
            Get
                Return CType(Me(Me.tableEventLog.EventIDColumn),Integer)
            End Get
            Set
                Me(Me.tableEventLog.EventIDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property UserID() As Integer
            Get
                Return CType(Me(Me.tableEventLog.UserIDColumn),Integer)
            End Get
            Set
                Me(Me.tableEventLog.UserIDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property RespondentID() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableEventLog.RespondentIDColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'RespondentID' in table 'EventLog' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEventLog.RespondentIDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property EventParameters() As String
            Get
                Try 
                    Return CType(Me(Me.tableEventLog.EventParametersColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'EventParameters' in table 'EventLog' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEventLog.EventParametersColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property UsersRow() As UsersRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("UsersEventLog")),UsersRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("UsersEventLog"))
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property tblEventsRow() As tblEventsRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("tblEventsEventLog")),tblEventsRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("tblEventsEventLog"))
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property RespondentsRow() As RespondentsRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("RespondentsEventLog")),RespondentsRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("RespondentsEventLog"))
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsRespondentIDNull() As Boolean
            Return Me.IsNull(Me.tableEventLog.RespondentIDColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetRespondentIDNull()
            Me(Me.tableEventLog.RespondentIDColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsEventParametersNull() As Boolean
            Return Me.IsNull(Me.tableEventLog.EventParametersColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetEventParametersNull()
            Me(Me.tableEventLog.EventParametersColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class tblEventsRow
        Inherits Global.System.Data.DataRow
        
        Private tabletblEvents As tblEventsDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tabletblEvents = CType(Me.Table,tblEventsDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property EventID() As Integer
            Get
                Return CType(Me(Me.tabletblEvents.EventIDColumn),Integer)
            End Get
            Set
                Me(Me.tabletblEvents.EventIDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Name() As String
            Get
                Return CType(Me(Me.tabletblEvents.NameColumn),String)
            End Get
            Set
                Me(Me.tabletblEvents.NameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Description() As String
            Get
                Return CType(Me(Me.tabletblEvents.DescriptionColumn),String)
            End Get
            Set
                Me(Me.tabletblEvents.DescriptionColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property EventTypeID() As Integer
            Get
                Return CType(Me(Me.tabletblEvents.EventTypeIDColumn),Integer)
            End Get
            Set
                Me(Me.tabletblEvents.EventTypeIDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FinalCode() As Byte
            Get
                Return CType(Me(Me.tabletblEvents.FinalCodeColumn),Byte)
            End Get
            Set
                Me(Me.tabletblEvents.FinalCodeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property UserCreated() As Byte
            Get
                Return CType(Me(Me.tabletblEvents.UserCreatedColumn),Byte)
            End Get
            Set
                Me(Me.tabletblEvents.UserCreatedColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DefaultNonContact() As Integer
            Get
                Return CType(Me(Me.tabletblEvents.DefaultNonContactColumn),Integer)
            End Get
            Set
                Me(Me.tabletblEvents.DefaultNonContactColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function GetEventLogRows() As EventLogRow()
            If (Me.Table.ChildRelations("tblEventsEventLog") Is Nothing) Then
                Return New EventLogRow(-1) {}
            Else
                Return CType(MyBase.GetChildRows(Me.Table.ChildRelations("tblEventsEventLog")),EventLogRow())
            End If
        End Function
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class UsersRow
        Inherits Global.System.Data.DataRow
        
        Private tableUsers As UsersDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableUsers = CType(Me.Table,UsersDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property UserID() As Integer
            Get
                Return CType(Me(Me.tableUsers.UserIDColumn),Integer)
            End Get
            Set
                Me(Me.tableUsers.UserIDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Username() As String
            Get
                Return CType(Me(Me.tableUsers.UsernameColumn),String)
            End Get
            Set
                Me(Me.tableUsers.UsernameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FirstName() As String
            Get
                Return CType(Me(Me.tableUsers.FirstNameColumn),String)
            End Get
            Set
                Me(Me.tableUsers.FirstNameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property LastName() As String
            Get
                Return CType(Me(Me.tableUsers.LastNameColumn),String)
            End Get
            Set
                Me(Me.tableUsers.LastNameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Password() As String
            Get
                Return CType(Me(Me.tableUsers.PasswordColumn),String)
            End Get
            Set
                Me(Me.tableUsers.PasswordColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Email() As String
            Get
                Return CType(Me(Me.tableUsers.EmailColumn),String)
            End Get
            Set
                Me(Me.tableUsers.EmailColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property GroupID() As Integer
            Get
                Return CType(Me(Me.tableUsers.GroupIDColumn),Integer)
            End Get
            Set
                Me(Me.tableUsers.GroupIDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Active() As Byte
            Get
                Return CType(Me(Me.tableUsers.ActiveColumn),Byte)
            End Get
            Set
                Me(Me.tableUsers.ActiveColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function GetEventLogRows() As EventLogRow()
            If (Me.Table.ChildRelations("UsersEventLog") Is Nothing) Then
                Return New EventLogRow(-1) {}
            Else
                Return CType(MyBase.GetChildRows(Me.Table.ChildRelations("UsersEventLog")),EventLogRow())
            End If
        End Function
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class RespondentsRow
        Inherits Global.System.Data.DataRow
        
        Private tableRespondents As RespondentsDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableRespondents = CType(Me.Table,RespondentsDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property RespondentID() As Integer
            Get
                Return CType(Me(Me.tableRespondents.RespondentIDColumn),Integer)
            End Get
            Set
                Me(Me.tableRespondents.RespondentIDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SurveyInstanceID() As Integer
            Get
                Return CType(Me(Me.tableRespondents.SurveyInstanceIDColumn),Integer)
            End Get
            Set
                Me(Me.tableRespondents.SurveyInstanceIDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FirstName() As String
            Get
                Try 
                    Return CType(Me(Me.tableRespondents.FirstNameColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'FirstName' in table 'Respondents' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableRespondents.FirstNameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property MiddleInitial() As String
            Get
                Try 
                    Return CType(Me(Me.tableRespondents.MiddleInitialColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'MiddleInitial' in table 'Respondents' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableRespondents.MiddleInitialColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property LastName() As String
            Get
                Return CType(Me(Me.tableRespondents.LastNameColumn),String)
            End Get
            Set
                Me(Me.tableRespondents.LastNameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Address1() As String
            Get
                Try 
                    Return CType(Me(Me.tableRespondents.Address1Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Address1' in table 'Respondents' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableRespondents.Address1Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Address2() As String
            Get
                Try 
                    Return CType(Me(Me.tableRespondents.Address2Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Address2' in table 'Respondents' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableRespondents.Address2Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property City() As String
            Get
                Try 
                    Return CType(Me(Me.tableRespondents.CityColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'City' in table 'Respondents' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableRespondents.CityColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property State() As String
            Get
                Try 
                    Return CType(Me(Me.tableRespondents.StateColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'State' in table 'Respondents' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableRespondents.StateColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PostalCode() As String
            Get
                Try 
                    Return CType(Me(Me.tableRespondents.PostalCodeColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PostalCode' in table 'Respondents' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableRespondents.PostalCodeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TelephoneDay() As String
            Get
                Try 
                    Return CType(Me(Me.tableRespondents.TelephoneDayColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'TelephoneDay' in table 'Respondents' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableRespondents.TelephoneDayColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TelephoneEvening() As String
            Get
                Try 
                    Return CType(Me(Me.tableRespondents.TelephoneEveningColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'TelephoneEvening' in table 'Respondents' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableRespondents.TelephoneEveningColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Email() As String
            Get
                Try 
                    Return CType(Me(Me.tableRespondents.EmailColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Email' in table 'Respondents' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableRespondents.EmailColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DOB() As Date
            Get
                Try 
                    Return CType(Me(Me.tableRespondents.DOBColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'DOB' in table 'Respondents' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableRespondents.DOBColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Gender() As String
            Get
                Try 
                    Return CType(Me(Me.tableRespondents.GenderColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Gender' in table 'Respondents' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableRespondents.GenderColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClientRespondentID() As String
            Get
                Try 
                    Return CType(Me(Me.tableRespondents.ClientRespondentIDColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ClientRespondentID' in table 'Respondents' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableRespondents.ClientRespondentIDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SSN() As String
            Get
                Try 
                    Return CType(Me(Me.tableRespondents.SSNColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'SSN' in table 'Respondents' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableRespondents.SSNColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property BatchID() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableRespondents.BatchIDColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'BatchID' in table 'Respondents' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableRespondents.BatchIDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SurveyInstanceName() As String
            Get
                Return CType(Me(Me.tableRespondents.SurveyInstanceNameColumn),String)
            End Get
            Set
                Me(Me.tableRespondents.SurveyInstanceNameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClientName() As String
            Get
                Return CType(Me(Me.tableRespondents.ClientNameColumn),String)
            End Get
            Set
                Me(Me.tableRespondents.ClientNameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SurveyName() As String
            Get
                Return CType(Me(Me.tableRespondents.SurveyNameColumn),String)
            End Get
            Set
                Me(Me.tableRespondents.SurveyNameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClientID() As Integer
            Get
                Return CType(Me(Me.tableRespondents.ClientIDColumn),Integer)
            End Get
            Set
                Me(Me.tableRespondents.ClientIDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SurveyID() As Integer
            Get
                Return CType(Me(Me.tableRespondents.SurveyIDColumn),Integer)
            End Get
            Set
                Me(Me.tableRespondents.SurveyIDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CallsMade() As Integer
            Get
                Return CType(Me(Me.tableRespondents.CallsMadeColumn),Integer)
            End Get
            Set
                Me(Me.tableRespondents.CallsMadeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Final() As Byte
            Get
                Try 
                    Return CType(Me(Me.tableRespondents.FinalColumn),Byte)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Final' in table 'Respondents' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableRespondents.FinalColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property NextContact() As Date
            Get
                Try 
                    Return CType(Me(Me.tableRespondents.NextContactColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'NextContact' in table 'Respondents' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableRespondents.NextContactColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PostalCodeExt() As String
            Get
                Try 
                    Return CType(Me(Me.tableRespondents.PostalCodeExtColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PostalCodeExt' in table 'Respondents' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableRespondents.PostalCodeExtColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property RespondentKey() As String
            Get
                Try 
                    Return CType(Me(Me.tableRespondents.RespondentKeyColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'RespondentKey' in table 'Respondents' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableRespondents.RespondentKeyColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFirstNameNull() As Boolean
            Return Me.IsNull(Me.tableRespondents.FirstNameColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFirstNameNull()
            Me(Me.tableRespondents.FirstNameColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsMiddleInitialNull() As Boolean
            Return Me.IsNull(Me.tableRespondents.MiddleInitialColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetMiddleInitialNull()
            Me(Me.tableRespondents.MiddleInitialColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsAddress1Null() As Boolean
            Return Me.IsNull(Me.tableRespondents.Address1Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetAddress1Null()
            Me(Me.tableRespondents.Address1Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsAddress2Null() As Boolean
            Return Me.IsNull(Me.tableRespondents.Address2Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetAddress2Null()
            Me(Me.tableRespondents.Address2Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCityNull() As Boolean
            Return Me.IsNull(Me.tableRespondents.CityColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCityNull()
            Me(Me.tableRespondents.CityColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsStateNull() As Boolean
            Return Me.IsNull(Me.tableRespondents.StateColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetStateNull()
            Me(Me.tableRespondents.StateColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPostalCodeNull() As Boolean
            Return Me.IsNull(Me.tableRespondents.PostalCodeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPostalCodeNull()
            Me(Me.tableRespondents.PostalCodeColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTelephoneDayNull() As Boolean
            Return Me.IsNull(Me.tableRespondents.TelephoneDayColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTelephoneDayNull()
            Me(Me.tableRespondents.TelephoneDayColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTelephoneEveningNull() As Boolean
            Return Me.IsNull(Me.tableRespondents.TelephoneEveningColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTelephoneEveningNull()
            Me(Me.tableRespondents.TelephoneEveningColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsEmailNull() As Boolean
            Return Me.IsNull(Me.tableRespondents.EmailColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetEmailNull()
            Me(Me.tableRespondents.EmailColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDOBNull() As Boolean
            Return Me.IsNull(Me.tableRespondents.DOBColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDOBNull()
            Me(Me.tableRespondents.DOBColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsGenderNull() As Boolean
            Return Me.IsNull(Me.tableRespondents.GenderColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetGenderNull()
            Me(Me.tableRespondents.GenderColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsClientRespondentIDNull() As Boolean
            Return Me.IsNull(Me.tableRespondents.ClientRespondentIDColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetClientRespondentIDNull()
            Me(Me.tableRespondents.ClientRespondentIDColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSSNNull() As Boolean
            Return Me.IsNull(Me.tableRespondents.SSNColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSSNNull()
            Me(Me.tableRespondents.SSNColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsBatchIDNull() As Boolean
            Return Me.IsNull(Me.tableRespondents.BatchIDColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetBatchIDNull()
            Me(Me.tableRespondents.BatchIDColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFinalNull() As Boolean
            Return Me.IsNull(Me.tableRespondents.FinalColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFinalNull()
            Me(Me.tableRespondents.FinalColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsNextContactNull() As Boolean
            Return Me.IsNull(Me.tableRespondents.NextContactColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetNextContactNull()
            Me(Me.tableRespondents.NextContactColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPostalCodeExtNull() As Boolean
            Return Me.IsNull(Me.tableRespondents.PostalCodeExtColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPostalCodeExtNull()
            Me(Me.tableRespondents.PostalCodeExtColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsRespondentKeyNull() As Boolean
            Return Me.IsNull(Me.tableRespondents.RespondentKeyColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetRespondentKeyNull()
            Me(Me.tableRespondents.RespondentKeyColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function GetRespondentPropertiesRows() As RespondentPropertiesRow()
            If (Me.Table.ChildRelations("RespondentsRespondentProperties") Is Nothing) Then
                Return New RespondentPropertiesRow(-1) {}
            Else
                Return CType(MyBase.GetChildRows(Me.Table.ChildRelations("RespondentsRespondentProperties")),RespondentPropertiesRow())
            End If
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function GetEventLogRows() As EventLogRow()
            If (Me.Table.ChildRelations("RespondentsEventLog") Is Nothing) Then
                Return New EventLogRow(-1) {}
            Else
                Return CType(MyBase.GetChildRows(Me.Table.ChildRelations("RespondentsEventLog")),EventLogRow())
            End If
        End Function
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class HouseholdRow
        Inherits Global.System.Data.DataRow
        
        Private tableHousehold As HouseholdDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableHousehold = CType(Me.Table,HouseholdDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property RespondentID() As Integer
            Get
                Return CType(Me(Me.tableHousehold.RespondentIDColumn),Integer)
            End Get
            Set
                Me(Me.tableHousehold.RespondentIDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FirstName() As String
            Get
                Try 
                    Return CType(Me(Me.tableHousehold.FirstNameColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'FirstName' in table 'Household' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableHousehold.FirstNameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property LastName() As String
            Get
                Return CType(Me(Me.tableHousehold.LastNameColumn),String)
            End Get
            Set
                Me(Me.tableHousehold.LastNameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Telephone() As String
            Get
                Try 
                    Return CType(Me(Me.tableHousehold.TelephoneColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Telephone' in table 'Household' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableHousehold.TelephoneColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SurveyName() As String
            Get
                Return CType(Me(Me.tableHousehold.SurveyNameColumn),String)
            End Get
            Set
                Me(Me.tableHousehold.SurveyNameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClientName() As String
            Get
                Return CType(Me(Me.tableHousehold.ClientNameColumn),String)
            End Get
            Set
                Me(Me.tableHousehold.ClientNameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SurveyInstanceName() As String
            Get
                Return CType(Me(Me.tableHousehold.SurveyInstanceNameColumn),String)
            End Get
            Set
                Me(Me.tableHousehold.SurveyInstanceNameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFirstNameNull() As Boolean
            Return Me.IsNull(Me.tableHousehold.FirstNameColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFirstNameNull()
            Me(Me.tableHousehold.FirstNameColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTelephoneNull() As Boolean
            Return Me.IsNull(Me.tableHousehold.TelephoneColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTelephoneNull()
            Me(Me.tableHousehold.TelephoneColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class RespondentPropertiesRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As RespondentPropertiesRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As RespondentPropertiesRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As RespondentPropertiesRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class EventLogRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As EventLogRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As EventLogRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As EventLogRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class tblEventsRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As tblEventsRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As tblEventsRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As tblEventsRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class UsersRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As UsersRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As UsersRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As UsersRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class RespondentsRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As RespondentsRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As RespondentsRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As RespondentsRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class HouseholdRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As HouseholdRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As HouseholdRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As HouseholdRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
End Class

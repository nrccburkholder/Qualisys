'------------------------------------------------------------------------------
' <auto-generated>
'     This code was generated by a tool.
'     Runtime Version:2.0.50727.1433
'
'     Changes to this file may cause incorrect behavior and will be lost if
'     the code is regenerated.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On



'''<summary>
'''Represents a strongly typed in-memory cache of data.
'''</summary>
<Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
 Global.System.Serializable(),  _
 Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
 Global.System.ComponentModel.ToolboxItem(true),  _
 Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema"),  _
 Global.System.Xml.Serialization.XmlRootAttribute("dsProtocolStepParameters"),  _
 Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")>  _
Partial Public Class dsProtocolStepParameters
    Inherits Global.System.Data.DataSet
    
    Private tableProtocolStepParameters As ProtocolStepParametersDataTable
    
    Private tableProtocolStepTypeParameters As ProtocolStepTypeParametersDataTable
    
    Private tableControlTypes As ControlTypesDataTable
    
    Private tableSearch As SearchDataTable
    
    Private relationProtocolStepTypeParametersProtocolStepParameters As Global.System.Data.DataRelation
    
    Private relationControlTypesProtocolStepTypeParameters As Global.System.Data.DataRelation
    
    Private _schemaSerializationMode As Global.System.Data.SchemaSerializationMode = Global.System.Data.SchemaSerializationMode.IncludeSchema
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Sub New()
        MyBase.New
        Me.BeginInit
        Me.InitClass
        Dim schemaChangedHandler As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler MyBase.Relations.CollectionChanged, schemaChangedHandler
        Me.EndInit
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
        MyBase.New(info, context, false)
        If (Me.IsBinarySerialized(info, context) = true) Then
            Me.InitVars(false)
            Dim schemaChangedHandler1 As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
            AddHandler Me.Tables.CollectionChanged, schemaChangedHandler1
            AddHandler Me.Relations.CollectionChanged, schemaChangedHandler1
            Return
        End If
        Dim strSchema As String = CType(info.GetValue("XmlSchema", GetType(String)),String)
        If (Me.DetermineSchemaSerializationMode(info, context) = Global.System.Data.SchemaSerializationMode.IncludeSchema) Then
            Dim ds As Global.System.Data.DataSet = New Global.System.Data.DataSet
            ds.ReadXmlSchema(New Global.System.Xml.XmlTextReader(New Global.System.IO.StringReader(strSchema)))
            If (Not (ds.Tables("ProtocolStepParameters")) Is Nothing) Then
                MyBase.Tables.Add(New ProtocolStepParametersDataTable(ds.Tables("ProtocolStepParameters")))
            End If
            If (Not (ds.Tables("ProtocolStepTypeParameters")) Is Nothing) Then
                MyBase.Tables.Add(New ProtocolStepTypeParametersDataTable(ds.Tables("ProtocolStepTypeParameters")))
            End If
            If (Not (ds.Tables("ControlTypes")) Is Nothing) Then
                MyBase.Tables.Add(New ControlTypesDataTable(ds.Tables("ControlTypes")))
            End If
            If (Not (ds.Tables("Search")) Is Nothing) Then
                MyBase.Tables.Add(New SearchDataTable(ds.Tables("Search")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, Global.System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.ReadXmlSchema(New Global.System.Xml.XmlTextReader(New Global.System.IO.StringReader(strSchema)))
        End If
        Me.GetSerializationData(info, context)
        Dim schemaChangedHandler As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property ProtocolStepParameters() As ProtocolStepParametersDataTable
        Get
            Return Me.tableProtocolStepParameters
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property ProtocolStepTypeParameters() As ProtocolStepTypeParametersDataTable
        Get
            Return Me.tableProtocolStepTypeParameters
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property ControlTypes() As ControlTypesDataTable
        Get
            Return Me.tableControlTypes
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property Search() As SearchDataTable
        Get
            Return Me.tableSearch
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.BrowsableAttribute(true),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Visible)>  _
    Public Overrides Property SchemaSerializationMode() As Global.System.Data.SchemaSerializationMode
        Get
            Return Me._schemaSerializationMode
        End Get
        Set
            Me._schemaSerializationMode = value
        End Set
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Hidden)>  _
    Public Shadows ReadOnly Property Tables() As Global.System.Data.DataTableCollection
        Get
            Return MyBase.Tables
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Hidden)>  _
    Public Shadows ReadOnly Property Relations() As Global.System.Data.DataRelationCollection
        Get
            Return MyBase.Relations
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Sub InitializeDerivedDataSet()
        Me.BeginInit
        Me.InitClass
        Me.EndInit
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Overrides Function Clone() As Global.System.Data.DataSet
        Dim cln As dsProtocolStepParameters = CType(MyBase.Clone,dsProtocolStepParameters)
        cln.InitVars
        cln.SchemaSerializationMode = Me.SchemaSerializationMode
        Return cln
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function ShouldSerializeTables() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function ShouldSerializeRelations() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Sub ReadXmlSerializable(ByVal reader As Global.System.Xml.XmlReader)
        If (Me.DetermineSchemaSerializationMode(reader) = Global.System.Data.SchemaSerializationMode.IncludeSchema) Then
            Me.Reset
            Dim ds As Global.System.Data.DataSet = New Global.System.Data.DataSet
            ds.ReadXml(reader)
            If (Not (ds.Tables("ProtocolStepParameters")) Is Nothing) Then
                MyBase.Tables.Add(New ProtocolStepParametersDataTable(ds.Tables("ProtocolStepParameters")))
            End If
            If (Not (ds.Tables("ProtocolStepTypeParameters")) Is Nothing) Then
                MyBase.Tables.Add(New ProtocolStepTypeParametersDataTable(ds.Tables("ProtocolStepTypeParameters")))
            End If
            If (Not (ds.Tables("ControlTypes")) Is Nothing) Then
                MyBase.Tables.Add(New ControlTypesDataTable(ds.Tables("ControlTypes")))
            End If
            If (Not (ds.Tables("Search")) Is Nothing) Then
                MyBase.Tables.Add(New SearchDataTable(ds.Tables("Search")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, Global.System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.ReadXml(reader)
            Me.InitVars
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function GetSchemaSerializable() As Global.System.Xml.Schema.XmlSchema
        Dim stream As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
        Me.WriteXmlSchema(New Global.System.Xml.XmlTextWriter(stream, Nothing))
        stream.Position = 0
        Return Global.System.Xml.Schema.XmlSchema.Read(New Global.System.Xml.XmlTextReader(stream), Nothing)
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Friend Overloads Sub InitVars()
        Me.InitVars(true)
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Friend Overloads Sub InitVars(ByVal initTable As Boolean)
        Me.tableProtocolStepParameters = CType(MyBase.Tables("ProtocolStepParameters"),ProtocolStepParametersDataTable)
        If (initTable = true) Then
            If (Not (Me.tableProtocolStepParameters) Is Nothing) Then
                Me.tableProtocolStepParameters.InitVars
            End If
        End If
        Me.tableProtocolStepTypeParameters = CType(MyBase.Tables("ProtocolStepTypeParameters"),ProtocolStepTypeParametersDataTable)
        If (initTable = true) Then
            If (Not (Me.tableProtocolStepTypeParameters) Is Nothing) Then
                Me.tableProtocolStepTypeParameters.InitVars
            End If
        End If
        Me.tableControlTypes = CType(MyBase.Tables("ControlTypes"),ControlTypesDataTable)
        If (initTable = true) Then
            If (Not (Me.tableControlTypes) Is Nothing) Then
                Me.tableControlTypes.InitVars
            End If
        End If
        Me.tableSearch = CType(MyBase.Tables("Search"),SearchDataTable)
        If (initTable = true) Then
            If (Not (Me.tableSearch) Is Nothing) Then
                Me.tableSearch.InitVars
            End If
        End If
        Me.relationProtocolStepTypeParametersProtocolStepParameters = Me.Relations("ProtocolStepTypeParametersProtocolStepParameters")
        Me.relationControlTypesProtocolStepTypeParameters = Me.Relations("ControlTypesProtocolStepTypeParameters")
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Sub InitClass()
        Me.DataSetName = "dsProtocolStepParameters"
        Me.Prefix = ""
        Me.Namespace = "http://tempuri.org/dsProtocolStepParameters.xsd"
        Me.EnforceConstraints = true
        Me.SchemaSerializationMode = Global.System.Data.SchemaSerializationMode.IncludeSchema
        Me.tableProtocolStepParameters = New ProtocolStepParametersDataTable
        MyBase.Tables.Add(Me.tableProtocolStepParameters)
        Me.tableProtocolStepTypeParameters = New ProtocolStepTypeParametersDataTable
        MyBase.Tables.Add(Me.tableProtocolStepTypeParameters)
        Me.tableControlTypes = New ControlTypesDataTable
        MyBase.Tables.Add(Me.tableControlTypes)
        Me.tableSearch = New SearchDataTable
        MyBase.Tables.Add(Me.tableSearch)
        Dim fkc As Global.System.Data.ForeignKeyConstraint
        fkc = New Global.System.Data.ForeignKeyConstraint("ProtocolStepTypeParametersProtocolStepParameters", New Global.System.Data.DataColumn() {Me.tableProtocolStepTypeParameters.ProtocolStepTypeParamIDColumn}, New Global.System.Data.DataColumn() {Me.tableProtocolStepParameters.ProtocolStepTypeParamIDColumn})
        Me.tableProtocolStepParameters.Constraints.Add(fkc)
        fkc.AcceptRejectRule = Global.System.Data.AcceptRejectRule.None
        fkc.DeleteRule = Global.System.Data.Rule.Cascade
        fkc.UpdateRule = Global.System.Data.Rule.Cascade
        fkc = New Global.System.Data.ForeignKeyConstraint("ControlTypesProtocolStepTypeParameters", New Global.System.Data.DataColumn() {Me.tableControlTypes.ControlTypeIDColumn}, New Global.System.Data.DataColumn() {Me.tableProtocolStepTypeParameters.ControlTypeIDColumn})
        Me.tableProtocolStepTypeParameters.Constraints.Add(fkc)
        fkc.AcceptRejectRule = Global.System.Data.AcceptRejectRule.None
        fkc.DeleteRule = Global.System.Data.Rule.Cascade
        fkc.UpdateRule = Global.System.Data.Rule.Cascade
        Me.relationProtocolStepTypeParametersProtocolStepParameters = New Global.System.Data.DataRelation("ProtocolStepTypeParametersProtocolStepParameters", New Global.System.Data.DataColumn() {Me.tableProtocolStepTypeParameters.ProtocolStepTypeParamIDColumn}, New Global.System.Data.DataColumn() {Me.tableProtocolStepParameters.ProtocolStepTypeParamIDColumn}, false)
        Me.Relations.Add(Me.relationProtocolStepTypeParametersProtocolStepParameters)
        Me.relationControlTypesProtocolStepTypeParameters = New Global.System.Data.DataRelation("ControlTypesProtocolStepTypeParameters", New Global.System.Data.DataColumn() {Me.tableControlTypes.ControlTypeIDColumn}, New Global.System.Data.DataColumn() {Me.tableProtocolStepTypeParameters.ControlTypeIDColumn}, false)
        Me.Relations.Add(Me.relationControlTypesProtocolStepTypeParameters)
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeProtocolStepParameters() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeProtocolStepTypeParameters() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeControlTypes() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeSearch() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Sub SchemaChanged(ByVal sender As Object, ByVal e As Global.System.ComponentModel.CollectionChangeEventArgs)
        If (e.Action = Global.System.ComponentModel.CollectionChangeAction.Remove) Then
            Me.InitVars
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Shared Function GetTypedDataSetSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
        Dim ds As dsProtocolStepParameters = New dsProtocolStepParameters
        Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
        Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
        Dim any As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
        any.Namespace = ds.Namespace
        sequence.Items.Add(any)
        type.Particle = sequence
        Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
        If xs.Contains(dsSchema.TargetNamespace) Then
            Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
            Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
            Try 
                Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                dsSchema.Write(s1)
                Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                Do While schemas.MoveNext
                    schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                    s2.SetLength(0)
                    schema.Write(s2)
                    If (s1.Length = s2.Length) Then
                        s1.Position = 0
                        s2.Position = 0
                        
                        Do While ((s1.Position <> s1.Length)  _
                                    AndAlso (s1.ReadByte = s2.ReadByte))
                            
                            
                        Loop
                        If (s1.Position = s1.Length) Then
                            Return type
                        End If
                    End If
                    
                Loop
            Finally
                If (Not (s1) Is Nothing) Then
                    s1.Close
                End If
                If (Not (s2) Is Nothing) Then
                    s2.Close
                End If
            End Try
        End If
        xs.Add(dsSchema)
        Return type
    End Function
    
    Public Delegate Sub ProtocolStepParametersRowChangeEventHandler(ByVal sender As Object, ByVal e As ProtocolStepParametersRowChangeEvent)
    
    Public Delegate Sub ProtocolStepTypeParametersRowChangeEventHandler(ByVal sender As Object, ByVal e As ProtocolStepTypeParametersRowChangeEvent)
    
    Public Delegate Sub ControlTypesRowChangeEventHandler(ByVal sender As Object, ByVal e As ControlTypesRowChangeEvent)
    
    Public Delegate Sub SearchRowChangeEventHandler(ByVal sender As Object, ByVal e As SearchRowChangeEvent)
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class ProtocolStepParametersDataTable
        Inherits Global.System.Data.TypedTableBase(Of ProtocolStepParametersRow)
        
        Private columnProtocolStepParamID As Global.System.Data.DataColumn
        
        Private columnProtocolStepID As Global.System.Data.DataColumn
        
        Private columnProtocolStepTypeParamID As Global.System.Data.DataColumn
        
        Private columnProtocolStepParamValue As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "ProtocolStepParameters"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ProtocolStepParamIDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnProtocolStepParamID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ProtocolStepIDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnProtocolStepID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ProtocolStepTypeParamIDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnProtocolStepTypeParamID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ProtocolStepParamValueColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnProtocolStepParamValue
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As ProtocolStepParametersRow
            Get
                Return CType(Me.Rows(index),ProtocolStepParametersRow)
            End Get
        End Property
        
        Public Event ProtocolStepParametersRowChanging As ProtocolStepParametersRowChangeEventHandler
        
        Public Event ProtocolStepParametersRowChanged As ProtocolStepParametersRowChangeEventHandler
        
        Public Event ProtocolStepParametersRowDeleting As ProtocolStepParametersRowChangeEventHandler
        
        Public Event ProtocolStepParametersRowDeleted As ProtocolStepParametersRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddProtocolStepParametersRow(ByVal row As ProtocolStepParametersRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddProtocolStepParametersRow(ByVal ProtocolStepID As Integer, ByVal parentProtocolStepTypeParametersRowByProtocolStepTypeParametersProtocolStepParameters As ProtocolStepTypeParametersRow, ByVal ProtocolStepParamValue As String) As ProtocolStepParametersRow
            Dim rowProtocolStepParametersRow As ProtocolStepParametersRow = CType(Me.NewRow,ProtocolStepParametersRow)
            Dim columnValuesArray() As Object = New Object() {Nothing, ProtocolStepID, Nothing, ProtocolStepParamValue}
            If (Not (parentProtocolStepTypeParametersRowByProtocolStepTypeParametersProtocolStepParameters) Is Nothing) Then
                columnValuesArray(2) = parentProtocolStepTypeParametersRowByProtocolStepTypeParametersProtocolStepParameters(0)
            End If
            rowProtocolStepParametersRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowProtocolStepParametersRow)
            Return rowProtocolStepParametersRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByProtocolStepParamID(ByVal ProtocolStepParamID As Integer) As ProtocolStepParametersRow
            Return CType(Me.Rows.Find(New Object() {ProtocolStepParamID}),ProtocolStepParametersRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As ProtocolStepParametersDataTable = CType(MyBase.Clone,ProtocolStepParametersDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New ProtocolStepParametersDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnProtocolStepParamID = MyBase.Columns("ProtocolStepParamID")
            Me.columnProtocolStepID = MyBase.Columns("ProtocolStepID")
            Me.columnProtocolStepTypeParamID = MyBase.Columns("ProtocolStepTypeParamID")
            Me.columnProtocolStepParamValue = MyBase.Columns("ProtocolStepParamValue")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnProtocolStepParamID = New Global.System.Data.DataColumn("ProtocolStepParamID", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnProtocolStepParamID)
            Me.columnProtocolStepID = New Global.System.Data.DataColumn("ProtocolStepID", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnProtocolStepID)
            Me.columnProtocolStepTypeParamID = New Global.System.Data.DataColumn("ProtocolStepTypeParamID", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnProtocolStepTypeParamID)
            Me.columnProtocolStepParamValue = New Global.System.Data.DataColumn("ProtocolStepParamValue", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnProtocolStepParamValue)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("dsProtocolStepParametersKey1", New Global.System.Data.DataColumn() {Me.columnProtocolStepParamID}, true))
            Me.columnProtocolStepParamID.AutoIncrement = true
            Me.columnProtocolStepParamID.AllowDBNull = false
            Me.columnProtocolStepParamID.ReadOnly = true
            Me.columnProtocolStepParamID.Unique = true
            Me.columnProtocolStepID.AllowDBNull = false
            Me.columnProtocolStepTypeParamID.AllowDBNull = false
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewProtocolStepParametersRow() As ProtocolStepParametersRow
            Return CType(Me.NewRow,ProtocolStepParametersRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New ProtocolStepParametersRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(ProtocolStepParametersRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.ProtocolStepParametersRowChangedEvent) Is Nothing) Then
                RaiseEvent ProtocolStepParametersRowChanged(Me, New ProtocolStepParametersRowChangeEvent(CType(e.Row,ProtocolStepParametersRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.ProtocolStepParametersRowChangingEvent) Is Nothing) Then
                RaiseEvent ProtocolStepParametersRowChanging(Me, New ProtocolStepParametersRowChangeEvent(CType(e.Row,ProtocolStepParametersRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.ProtocolStepParametersRowDeletedEvent) Is Nothing) Then
                RaiseEvent ProtocolStepParametersRowDeleted(Me, New ProtocolStepParametersRowChangeEvent(CType(e.Row,ProtocolStepParametersRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.ProtocolStepParametersRowDeletingEvent) Is Nothing) Then
                RaiseEvent ProtocolStepParametersRowDeleting(Me, New ProtocolStepParametersRowChangeEvent(CType(e.Row,ProtocolStepParametersRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveProtocolStepParametersRow(ByVal row As ProtocolStepParametersRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As dsProtocolStepParameters = New dsProtocolStepParameters
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "ProtocolStepParametersDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class ProtocolStepTypeParametersDataTable
        Inherits Global.System.Data.TypedTableBase(Of ProtocolStepTypeParametersRow)
        
        Private columnProtocolStepTypeParamID As Global.System.Data.DataColumn
        
        Private columnProtocolStepTypeID As Global.System.Data.DataColumn
        
        Private columnProtocolStepParamDesc As Global.System.Data.DataColumn
        
        Private columnDefaults As Global.System.Data.DataColumn
        
        Private columnControlTypeID As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "ProtocolStepTypeParameters"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ProtocolStepTypeParamIDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnProtocolStepTypeParamID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ProtocolStepTypeIDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnProtocolStepTypeID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ProtocolStepParamDescColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnProtocolStepParamDesc
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DefaultsColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDefaults
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ControlTypeIDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnControlTypeID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As ProtocolStepTypeParametersRow
            Get
                Return CType(Me.Rows(index),ProtocolStepTypeParametersRow)
            End Get
        End Property
        
        Public Event ProtocolStepTypeParametersRowChanging As ProtocolStepTypeParametersRowChangeEventHandler
        
        Public Event ProtocolStepTypeParametersRowChanged As ProtocolStepTypeParametersRowChangeEventHandler
        
        Public Event ProtocolStepTypeParametersRowDeleting As ProtocolStepTypeParametersRowChangeEventHandler
        
        Public Event ProtocolStepTypeParametersRowDeleted As ProtocolStepTypeParametersRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddProtocolStepTypeParametersRow(ByVal row As ProtocolStepTypeParametersRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddProtocolStepTypeParametersRow(ByVal ProtocolStepTypeParamID As Integer, ByVal ProtocolStepTypeID As Integer, ByVal ProtocolStepParamDesc As String, ByVal Defaults As String, ByVal parentControlTypesRowByControlTypesProtocolStepTypeParameters As ControlTypesRow) As ProtocolStepTypeParametersRow
            Dim rowProtocolStepTypeParametersRow As ProtocolStepTypeParametersRow = CType(Me.NewRow,ProtocolStepTypeParametersRow)
            Dim columnValuesArray() As Object = New Object() {ProtocolStepTypeParamID, ProtocolStepTypeID, ProtocolStepParamDesc, Defaults, Nothing}
            If (Not (parentControlTypesRowByControlTypesProtocolStepTypeParameters) Is Nothing) Then
                columnValuesArray(4) = parentControlTypesRowByControlTypesProtocolStepTypeParameters(0)
            End If
            rowProtocolStepTypeParametersRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowProtocolStepTypeParametersRow)
            Return rowProtocolStepTypeParametersRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByProtocolStepTypeParamID(ByVal ProtocolStepTypeParamID As Integer) As ProtocolStepTypeParametersRow
            Return CType(Me.Rows.Find(New Object() {ProtocolStepTypeParamID}),ProtocolStepTypeParametersRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As ProtocolStepTypeParametersDataTable = CType(MyBase.Clone,ProtocolStepTypeParametersDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New ProtocolStepTypeParametersDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnProtocolStepTypeParamID = MyBase.Columns("ProtocolStepTypeParamID")
            Me.columnProtocolStepTypeID = MyBase.Columns("ProtocolStepTypeID")
            Me.columnProtocolStepParamDesc = MyBase.Columns("ProtocolStepParamDesc")
            Me.columnDefaults = MyBase.Columns("Defaults")
            Me.columnControlTypeID = MyBase.Columns("ControlTypeID")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnProtocolStepTypeParamID = New Global.System.Data.DataColumn("ProtocolStepTypeParamID", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnProtocolStepTypeParamID)
            Me.columnProtocolStepTypeID = New Global.System.Data.DataColumn("ProtocolStepTypeID", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnProtocolStepTypeID)
            Me.columnProtocolStepParamDesc = New Global.System.Data.DataColumn("ProtocolStepParamDesc", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnProtocolStepParamDesc)
            Me.columnDefaults = New Global.System.Data.DataColumn("Defaults", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDefaults)
            Me.columnControlTypeID = New Global.System.Data.DataColumn("ControlTypeID", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnControlTypeID)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("dsProtocolStepParametersKey2", New Global.System.Data.DataColumn() {Me.columnProtocolStepTypeParamID}, true))
            Me.columnProtocolStepTypeParamID.AllowDBNull = false
            Me.columnProtocolStepTypeParamID.Unique = true
            Me.columnProtocolStepTypeID.AllowDBNull = false
            Me.columnProtocolStepParamDesc.AllowDBNull = false
            Me.columnControlTypeID.AllowDBNull = false
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewProtocolStepTypeParametersRow() As ProtocolStepTypeParametersRow
            Return CType(Me.NewRow,ProtocolStepTypeParametersRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New ProtocolStepTypeParametersRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(ProtocolStepTypeParametersRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.ProtocolStepTypeParametersRowChangedEvent) Is Nothing) Then
                RaiseEvent ProtocolStepTypeParametersRowChanged(Me, New ProtocolStepTypeParametersRowChangeEvent(CType(e.Row,ProtocolStepTypeParametersRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.ProtocolStepTypeParametersRowChangingEvent) Is Nothing) Then
                RaiseEvent ProtocolStepTypeParametersRowChanging(Me, New ProtocolStepTypeParametersRowChangeEvent(CType(e.Row,ProtocolStepTypeParametersRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.ProtocolStepTypeParametersRowDeletedEvent) Is Nothing) Then
                RaiseEvent ProtocolStepTypeParametersRowDeleted(Me, New ProtocolStepTypeParametersRowChangeEvent(CType(e.Row,ProtocolStepTypeParametersRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.ProtocolStepTypeParametersRowDeletingEvent) Is Nothing) Then
                RaiseEvent ProtocolStepTypeParametersRowDeleting(Me, New ProtocolStepTypeParametersRowChangeEvent(CType(e.Row,ProtocolStepTypeParametersRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveProtocolStepTypeParametersRow(ByVal row As ProtocolStepTypeParametersRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As dsProtocolStepParameters = New dsProtocolStepParameters
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "ProtocolStepTypeParametersDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class ControlTypesDataTable
        Inherits Global.System.Data.TypedTableBase(Of ControlTypesRow)
        
        Private columnControlTypeID As Global.System.Data.DataColumn
        
        Private columnControlName As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "ControlTypes"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ControlTypeIDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnControlTypeID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ControlNameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnControlName
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As ControlTypesRow
            Get
                Return CType(Me.Rows(index),ControlTypesRow)
            End Get
        End Property
        
        Public Event ControlTypesRowChanging As ControlTypesRowChangeEventHandler
        
        Public Event ControlTypesRowChanged As ControlTypesRowChangeEventHandler
        
        Public Event ControlTypesRowDeleting As ControlTypesRowChangeEventHandler
        
        Public Event ControlTypesRowDeleted As ControlTypesRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddControlTypesRow(ByVal row As ControlTypesRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddControlTypesRow(ByVal ControlTypeID As Integer, ByVal ControlName As String) As ControlTypesRow
            Dim rowControlTypesRow As ControlTypesRow = CType(Me.NewRow,ControlTypesRow)
            Dim columnValuesArray() As Object = New Object() {ControlTypeID, ControlName}
            rowControlTypesRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowControlTypesRow)
            Return rowControlTypesRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByControlTypeID(ByVal ControlTypeID As Integer) As ControlTypesRow
            Return CType(Me.Rows.Find(New Object() {ControlTypeID}),ControlTypesRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As ControlTypesDataTable = CType(MyBase.Clone,ControlTypesDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New ControlTypesDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnControlTypeID = MyBase.Columns("ControlTypeID")
            Me.columnControlName = MyBase.Columns("ControlName")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnControlTypeID = New Global.System.Data.DataColumn("ControlTypeID", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnControlTypeID)
            Me.columnControlName = New Global.System.Data.DataColumn("ControlName", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnControlName)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("dsProtocolStepParametersKey3", New Global.System.Data.DataColumn() {Me.columnControlTypeID}, true))
            Me.columnControlTypeID.AllowDBNull = false
            Me.columnControlTypeID.Unique = true
            Me.columnControlName.AllowDBNull = false
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewControlTypesRow() As ControlTypesRow
            Return CType(Me.NewRow,ControlTypesRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New ControlTypesRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(ControlTypesRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.ControlTypesRowChangedEvent) Is Nothing) Then
                RaiseEvent ControlTypesRowChanged(Me, New ControlTypesRowChangeEvent(CType(e.Row,ControlTypesRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.ControlTypesRowChangingEvent) Is Nothing) Then
                RaiseEvent ControlTypesRowChanging(Me, New ControlTypesRowChangeEvent(CType(e.Row,ControlTypesRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.ControlTypesRowDeletedEvent) Is Nothing) Then
                RaiseEvent ControlTypesRowDeleted(Me, New ControlTypesRowChangeEvent(CType(e.Row,ControlTypesRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.ControlTypesRowDeletingEvent) Is Nothing) Then
                RaiseEvent ControlTypesRowDeleting(Me, New ControlTypesRowChangeEvent(CType(e.Row,ControlTypesRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveControlTypesRow(ByVal row As ControlTypesRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As dsProtocolStepParameters = New dsProtocolStepParameters
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "ControlTypesDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class SearchDataTable
        Inherits Global.System.Data.TypedTableBase(Of SearchRow)
        
        Private columnProtocolStepParamID As Global.System.Data.DataColumn
        
        Private columnProtocolStepID As Global.System.Data.DataColumn
        
        Private columnProtocolStepTypeParamID As Global.System.Data.DataColumn
        
        Private columnProtocolID As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "Search"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ProtocolStepParamIDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnProtocolStepParamID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ProtocolStepIDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnProtocolStepID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ProtocolStepTypeParamIDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnProtocolStepTypeParamID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ProtocolIDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnProtocolID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As SearchRow
            Get
                Return CType(Me.Rows(index),SearchRow)
            End Get
        End Property
        
        Public Event SearchRowChanging As SearchRowChangeEventHandler
        
        Public Event SearchRowChanged As SearchRowChangeEventHandler
        
        Public Event SearchRowDeleting As SearchRowChangeEventHandler
        
        Public Event SearchRowDeleted As SearchRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddSearchRow(ByVal row As SearchRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddSearchRow(ByVal ProtocolStepParamID As Integer, ByVal ProtocolStepID As Integer, ByVal ProtocolStepTypeParamID As Integer, ByVal ProtocolID As Integer) As SearchRow
            Dim rowSearchRow As SearchRow = CType(Me.NewRow,SearchRow)
            Dim columnValuesArray() As Object = New Object() {ProtocolStepParamID, ProtocolStepID, ProtocolStepTypeParamID, ProtocolID}
            rowSearchRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowSearchRow)
            Return rowSearchRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As SearchDataTable = CType(MyBase.Clone,SearchDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New SearchDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnProtocolStepParamID = MyBase.Columns("ProtocolStepParamID")
            Me.columnProtocolStepID = MyBase.Columns("ProtocolStepID")
            Me.columnProtocolStepTypeParamID = MyBase.Columns("ProtocolStepTypeParamID")
            Me.columnProtocolID = MyBase.Columns("ProtocolID")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnProtocolStepParamID = New Global.System.Data.DataColumn("ProtocolStepParamID", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnProtocolStepParamID)
            Me.columnProtocolStepID = New Global.System.Data.DataColumn("ProtocolStepID", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnProtocolStepID)
            Me.columnProtocolStepTypeParamID = New Global.System.Data.DataColumn("ProtocolStepTypeParamID", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnProtocolStepTypeParamID)
            Me.columnProtocolID = New Global.System.Data.DataColumn("ProtocolID", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnProtocolID)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewSearchRow() As SearchRow
            Return CType(Me.NewRow,SearchRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New SearchRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(SearchRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.SearchRowChangedEvent) Is Nothing) Then
                RaiseEvent SearchRowChanged(Me, New SearchRowChangeEvent(CType(e.Row,SearchRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.SearchRowChangingEvent) Is Nothing) Then
                RaiseEvent SearchRowChanging(Me, New SearchRowChangeEvent(CType(e.Row,SearchRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.SearchRowDeletedEvent) Is Nothing) Then
                RaiseEvent SearchRowDeleted(Me, New SearchRowChangeEvent(CType(e.Row,SearchRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.SearchRowDeletingEvent) Is Nothing) Then
                RaiseEvent SearchRowDeleting(Me, New SearchRowChangeEvent(CType(e.Row,SearchRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveSearchRow(ByVal row As SearchRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As dsProtocolStepParameters = New dsProtocolStepParameters
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "SearchDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class ProtocolStepParametersRow
        Inherits Global.System.Data.DataRow
        
        Private tableProtocolStepParameters As ProtocolStepParametersDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableProtocolStepParameters = CType(Me.Table,ProtocolStepParametersDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ProtocolStepParamID() As Integer
            Get
                Return CType(Me(Me.tableProtocolStepParameters.ProtocolStepParamIDColumn),Integer)
            End Get
            Set
                Me(Me.tableProtocolStepParameters.ProtocolStepParamIDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ProtocolStepID() As Integer
            Get
                Return CType(Me(Me.tableProtocolStepParameters.ProtocolStepIDColumn),Integer)
            End Get
            Set
                Me(Me.tableProtocolStepParameters.ProtocolStepIDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ProtocolStepTypeParamID() As Integer
            Get
                Return CType(Me(Me.tableProtocolStepParameters.ProtocolStepTypeParamIDColumn),Integer)
            End Get
            Set
                Me(Me.tableProtocolStepParameters.ProtocolStepTypeParamIDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ProtocolStepParamValue() As String
            Get
                Try 
                    Return CType(Me(Me.tableProtocolStepParameters.ProtocolStepParamValueColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ProtocolStepParamValue' in table 'ProtocolStepParameters' i"& _ 
                            "s DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableProtocolStepParameters.ProtocolStepParamValueColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ProtocolStepTypeParametersRow() As ProtocolStepTypeParametersRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("ProtocolStepTypeParametersProtocolStepParameters")),ProtocolStepTypeParametersRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("ProtocolStepTypeParametersProtocolStepParameters"))
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsProtocolStepParamValueNull() As Boolean
            Return Me.IsNull(Me.tableProtocolStepParameters.ProtocolStepParamValueColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetProtocolStepParamValueNull()
            Me(Me.tableProtocolStepParameters.ProtocolStepParamValueColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class ProtocolStepTypeParametersRow
        Inherits Global.System.Data.DataRow
        
        Private tableProtocolStepTypeParameters As ProtocolStepTypeParametersDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableProtocolStepTypeParameters = CType(Me.Table,ProtocolStepTypeParametersDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ProtocolStepTypeParamID() As Integer
            Get
                Return CType(Me(Me.tableProtocolStepTypeParameters.ProtocolStepTypeParamIDColumn),Integer)
            End Get
            Set
                Me(Me.tableProtocolStepTypeParameters.ProtocolStepTypeParamIDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ProtocolStepTypeID() As Integer
            Get
                Return CType(Me(Me.tableProtocolStepTypeParameters.ProtocolStepTypeIDColumn),Integer)
            End Get
            Set
                Me(Me.tableProtocolStepTypeParameters.ProtocolStepTypeIDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ProtocolStepParamDesc() As String
            Get
                Return CType(Me(Me.tableProtocolStepTypeParameters.ProtocolStepParamDescColumn),String)
            End Get
            Set
                Me(Me.tableProtocolStepTypeParameters.ProtocolStepParamDescColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Defaults() As String
            Get
                Try 
                    Return CType(Me(Me.tableProtocolStepTypeParameters.DefaultsColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Defaults' in table 'ProtocolStepTypeParameters' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableProtocolStepTypeParameters.DefaultsColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ControlTypeID() As Integer
            Get
                Return CType(Me(Me.tableProtocolStepTypeParameters.ControlTypeIDColumn),Integer)
            End Get
            Set
                Me(Me.tableProtocolStepTypeParameters.ControlTypeIDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ControlTypesRow() As ControlTypesRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("ControlTypesProtocolStepTypeParameters")),ControlTypesRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("ControlTypesProtocolStepTypeParameters"))
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDefaultsNull() As Boolean
            Return Me.IsNull(Me.tableProtocolStepTypeParameters.DefaultsColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDefaultsNull()
            Me(Me.tableProtocolStepTypeParameters.DefaultsColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function GetProtocolStepParametersRows() As ProtocolStepParametersRow()
            If (Me.Table.ChildRelations("ProtocolStepTypeParametersProtocolStepParameters") Is Nothing) Then
                Return New ProtocolStepParametersRow(-1) {}
            Else
                Return CType(MyBase.GetChildRows(Me.Table.ChildRelations("ProtocolStepTypeParametersProtocolStepParameters")),ProtocolStepParametersRow())
            End If
        End Function
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class ControlTypesRow
        Inherits Global.System.Data.DataRow
        
        Private tableControlTypes As ControlTypesDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableControlTypes = CType(Me.Table,ControlTypesDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ControlTypeID() As Integer
            Get
                Return CType(Me(Me.tableControlTypes.ControlTypeIDColumn),Integer)
            End Get
            Set
                Me(Me.tableControlTypes.ControlTypeIDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ControlName() As String
            Get
                Return CType(Me(Me.tableControlTypes.ControlNameColumn),String)
            End Get
            Set
                Me(Me.tableControlTypes.ControlNameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function GetProtocolStepTypeParametersRows() As ProtocolStepTypeParametersRow()
            If (Me.Table.ChildRelations("ControlTypesProtocolStepTypeParameters") Is Nothing) Then
                Return New ProtocolStepTypeParametersRow(-1) {}
            Else
                Return CType(MyBase.GetChildRows(Me.Table.ChildRelations("ControlTypesProtocolStepTypeParameters")),ProtocolStepTypeParametersRow())
            End If
        End Function
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class SearchRow
        Inherits Global.System.Data.DataRow
        
        Private tableSearch As SearchDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableSearch = CType(Me.Table,SearchDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ProtocolStepParamID() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableSearch.ProtocolStepParamIDColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ProtocolStepParamID' in table 'Search' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSearch.ProtocolStepParamIDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ProtocolStepID() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableSearch.ProtocolStepIDColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ProtocolStepID' in table 'Search' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSearch.ProtocolStepIDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ProtocolStepTypeParamID() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableSearch.ProtocolStepTypeParamIDColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ProtocolStepTypeParamID' in table 'Search' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSearch.ProtocolStepTypeParamIDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ProtocolID() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableSearch.ProtocolIDColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ProtocolID' in table 'Search' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSearch.ProtocolIDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsProtocolStepParamIDNull() As Boolean
            Return Me.IsNull(Me.tableSearch.ProtocolStepParamIDColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetProtocolStepParamIDNull()
            Me(Me.tableSearch.ProtocolStepParamIDColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsProtocolStepIDNull() As Boolean
            Return Me.IsNull(Me.tableSearch.ProtocolStepIDColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetProtocolStepIDNull()
            Me(Me.tableSearch.ProtocolStepIDColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsProtocolStepTypeParamIDNull() As Boolean
            Return Me.IsNull(Me.tableSearch.ProtocolStepTypeParamIDColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetProtocolStepTypeParamIDNull()
            Me(Me.tableSearch.ProtocolStepTypeParamIDColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsProtocolIDNull() As Boolean
            Return Me.IsNull(Me.tableSearch.ProtocolIDColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetProtocolIDNull()
            Me(Me.tableSearch.ProtocolIDColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class ProtocolStepParametersRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As ProtocolStepParametersRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As ProtocolStepParametersRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As ProtocolStepParametersRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class ProtocolStepTypeParametersRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As ProtocolStepTypeParametersRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As ProtocolStepTypeParametersRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As ProtocolStepTypeParametersRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class ControlTypesRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As ControlTypesRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As ControlTypesRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As ControlTypesRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class SearchRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As SearchRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As SearchRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As SearchRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
End Class

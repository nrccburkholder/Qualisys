//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.1433
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#pragma warning disable 1591

namespace SurveyPointDAL {
    
    
    /// <summary>
    ///Represents a strongly typed in-memory cache of data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.Serializable()]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema")]
    [global::System.Xml.Serialization.XmlRootAttribute("dsSurveyPoint")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")]
    public partial class dsSurveyPoint : global::System.Data.DataSet {
        
        private SurveysDataTable tableSurveys;
        
        private FileDefsDataTable tableFileDefs;
        
        private ClientsDataTable tableClients;
        
        private ScriptsDataTable tableScripts;
        
        private TemplatesDataTable tableTemplates;
        
        private FileDefColumnsDataTable tableFileDefColumns;
        
        private RespondentsDataTable tableRespondents;
        
        private RespondentPropertiesDataTable tableRespondentProperties;
        
        private SurveyInstancesDataTable tableSurveyInstances;
        
        private TriggerDependenciesDataTable tableTriggerDependencies;
        
        private InvocationPointsDataTable tableInvocationPoints;
        
        private TriggerTypesDataTable tableTriggerTypes;
        
        private TriggersDataTable tableTriggers;
        
        private CriteriaDataTable tableCriteria;
        
        private CriteriaTypesDataTable tableCriteriaTypes;
        
        private global::System.Data.SchemaSerializationMode _schemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public dsSurveyPoint() {
            this.BeginInit();
            this.InitClass();
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            base.Relations.CollectionChanged += schemaChangedHandler;
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected dsSurveyPoint(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                base(info, context, false) {
            if ((this.IsBinarySerialized(info, context) == true)) {
                this.InitVars(false);
                global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler1 = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
                this.Tables.CollectionChanged += schemaChangedHandler1;
                this.Relations.CollectionChanged += schemaChangedHandler1;
                return;
            }
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((this.DetermineSchemaSerializationMode(info, context) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
                if ((ds.Tables["Surveys"] != null)) {
                    base.Tables.Add(new SurveysDataTable(ds.Tables["Surveys"]));
                }
                if ((ds.Tables["FileDefs"] != null)) {
                    base.Tables.Add(new FileDefsDataTable(ds.Tables["FileDefs"]));
                }
                if ((ds.Tables["Clients"] != null)) {
                    base.Tables.Add(new ClientsDataTable(ds.Tables["Clients"]));
                }
                if ((ds.Tables["Scripts"] != null)) {
                    base.Tables.Add(new ScriptsDataTable(ds.Tables["Scripts"]));
                }
                if ((ds.Tables["Templates"] != null)) {
                    base.Tables.Add(new TemplatesDataTable(ds.Tables["Templates"]));
                }
                if ((ds.Tables["FileDefColumns"] != null)) {
                    base.Tables.Add(new FileDefColumnsDataTable(ds.Tables["FileDefColumns"]));
                }
                if ((ds.Tables["Respondents"] != null)) {
                    base.Tables.Add(new RespondentsDataTable(ds.Tables["Respondents"]));
                }
                if ((ds.Tables["RespondentProperties"] != null)) {
                    base.Tables.Add(new RespondentPropertiesDataTable(ds.Tables["RespondentProperties"]));
                }
                if ((ds.Tables["SurveyInstances"] != null)) {
                    base.Tables.Add(new SurveyInstancesDataTable(ds.Tables["SurveyInstances"]));
                }
                if ((ds.Tables["TriggerDependencies"] != null)) {
                    base.Tables.Add(new TriggerDependenciesDataTable(ds.Tables["TriggerDependencies"]));
                }
                if ((ds.Tables["InvocationPoints"] != null)) {
                    base.Tables.Add(new InvocationPointsDataTable(ds.Tables["InvocationPoints"]));
                }
                if ((ds.Tables["TriggerTypes"] != null)) {
                    base.Tables.Add(new TriggerTypesDataTable(ds.Tables["TriggerTypes"]));
                }
                if ((ds.Tables["Triggers"] != null)) {
                    base.Tables.Add(new TriggersDataTable(ds.Tables["Triggers"]));
                }
                if ((ds.Tables["Criteria"] != null)) {
                    base.Tables.Add(new CriteriaDataTable(ds.Tables["Criteria"]));
                }
                if ((ds.Tables["CriteriaTypes"] != null)) {
                    base.Tables.Add(new CriteriaTypesDataTable(ds.Tables["CriteriaTypes"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
            }
            this.GetSerializationData(info, context);
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public SurveysDataTable Surveys {
            get {
                return this.tableSurveys;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public FileDefsDataTable FileDefs {
            get {
                return this.tableFileDefs;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public ClientsDataTable Clients {
            get {
                return this.tableClients;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public ScriptsDataTable Scripts {
            get {
                return this.tableScripts;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public TemplatesDataTable Templates {
            get {
                return this.tableTemplates;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public FileDefColumnsDataTable FileDefColumns {
            get {
                return this.tableFileDefColumns;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public RespondentsDataTable Respondents {
            get {
                return this.tableRespondents;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public RespondentPropertiesDataTable RespondentProperties {
            get {
                return this.tableRespondentProperties;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public SurveyInstancesDataTable SurveyInstances {
            get {
                return this.tableSurveyInstances;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public TriggerDependenciesDataTable TriggerDependencies {
            get {
                return this.tableTriggerDependencies;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public InvocationPointsDataTable InvocationPoints {
            get {
                return this.tableInvocationPoints;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public TriggerTypesDataTable TriggerTypes {
            get {
                return this.tableTriggerTypes;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public TriggersDataTable Triggers {
            get {
                return this.tableTriggers;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public CriteriaDataTable Criteria {
            get {
                return this.tableCriteria;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public CriteriaTypesDataTable CriteriaTypes {
            get {
                return this.tableCriteriaTypes;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.BrowsableAttribute(true)]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Visible)]
        public override global::System.Data.SchemaSerializationMode SchemaSerializationMode {
            get {
                return this._schemaSerializationMode;
            }
            set {
                this._schemaSerializationMode = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataTableCollection Tables {
            get {
                return base.Tables;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataRelationCollection Relations {
            get {
                return base.Relations;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void InitializeDerivedDataSet() {
            this.BeginInit();
            this.InitClass();
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public override global::System.Data.DataSet Clone() {
            dsSurveyPoint cln = ((dsSurveyPoint)(base.Clone()));
            cln.InitVars();
            cln.SchemaSerializationMode = this.SchemaSerializationMode;
            return cln;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void ReadXmlSerializable(global::System.Xml.XmlReader reader) {
            if ((this.DetermineSchemaSerializationMode(reader) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                this.Reset();
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXml(reader);
                if ((ds.Tables["Surveys"] != null)) {
                    base.Tables.Add(new SurveysDataTable(ds.Tables["Surveys"]));
                }
                if ((ds.Tables["FileDefs"] != null)) {
                    base.Tables.Add(new FileDefsDataTable(ds.Tables["FileDefs"]));
                }
                if ((ds.Tables["Clients"] != null)) {
                    base.Tables.Add(new ClientsDataTable(ds.Tables["Clients"]));
                }
                if ((ds.Tables["Scripts"] != null)) {
                    base.Tables.Add(new ScriptsDataTable(ds.Tables["Scripts"]));
                }
                if ((ds.Tables["Templates"] != null)) {
                    base.Tables.Add(new TemplatesDataTable(ds.Tables["Templates"]));
                }
                if ((ds.Tables["FileDefColumns"] != null)) {
                    base.Tables.Add(new FileDefColumnsDataTable(ds.Tables["FileDefColumns"]));
                }
                if ((ds.Tables["Respondents"] != null)) {
                    base.Tables.Add(new RespondentsDataTable(ds.Tables["Respondents"]));
                }
                if ((ds.Tables["RespondentProperties"] != null)) {
                    base.Tables.Add(new RespondentPropertiesDataTable(ds.Tables["RespondentProperties"]));
                }
                if ((ds.Tables["SurveyInstances"] != null)) {
                    base.Tables.Add(new SurveyInstancesDataTable(ds.Tables["SurveyInstances"]));
                }
                if ((ds.Tables["TriggerDependencies"] != null)) {
                    base.Tables.Add(new TriggerDependenciesDataTable(ds.Tables["TriggerDependencies"]));
                }
                if ((ds.Tables["InvocationPoints"] != null)) {
                    base.Tables.Add(new InvocationPointsDataTable(ds.Tables["InvocationPoints"]));
                }
                if ((ds.Tables["TriggerTypes"] != null)) {
                    base.Tables.Add(new TriggerTypesDataTable(ds.Tables["TriggerTypes"]));
                }
                if ((ds.Tables["Triggers"] != null)) {
                    base.Tables.Add(new TriggersDataTable(ds.Tables["Triggers"]));
                }
                if ((ds.Tables["Criteria"] != null)) {
                    base.Tables.Add(new CriteriaDataTable(ds.Tables["Criteria"]));
                }
                if ((ds.Tables["CriteriaTypes"] != null)) {
                    base.Tables.Add(new CriteriaTypesDataTable(ds.Tables["CriteriaTypes"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXml(reader);
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override global::System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            global::System.IO.MemoryStream stream = new global::System.IO.MemoryStream();
            this.WriteXmlSchema(new global::System.Xml.XmlTextWriter(stream, null));
            stream.Position = 0;
            return global::System.Xml.Schema.XmlSchema.Read(new global::System.Xml.XmlTextReader(stream), null);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars() {
            this.InitVars(true);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars(bool initTable) {
            this.tableSurveys = ((SurveysDataTable)(base.Tables["Surveys"]));
            if ((initTable == true)) {
                if ((this.tableSurveys != null)) {
                    this.tableSurveys.InitVars();
                }
            }
            this.tableFileDefs = ((FileDefsDataTable)(base.Tables["FileDefs"]));
            if ((initTable == true)) {
                if ((this.tableFileDefs != null)) {
                    this.tableFileDefs.InitVars();
                }
            }
            this.tableClients = ((ClientsDataTable)(base.Tables["Clients"]));
            if ((initTable == true)) {
                if ((this.tableClients != null)) {
                    this.tableClients.InitVars();
                }
            }
            this.tableScripts = ((ScriptsDataTable)(base.Tables["Scripts"]));
            if ((initTable == true)) {
                if ((this.tableScripts != null)) {
                    this.tableScripts.InitVars();
                }
            }
            this.tableTemplates = ((TemplatesDataTable)(base.Tables["Templates"]));
            if ((initTable == true)) {
                if ((this.tableTemplates != null)) {
                    this.tableTemplates.InitVars();
                }
            }
            this.tableFileDefColumns = ((FileDefColumnsDataTable)(base.Tables["FileDefColumns"]));
            if ((initTable == true)) {
                if ((this.tableFileDefColumns != null)) {
                    this.tableFileDefColumns.InitVars();
                }
            }
            this.tableRespondents = ((RespondentsDataTable)(base.Tables["Respondents"]));
            if ((initTable == true)) {
                if ((this.tableRespondents != null)) {
                    this.tableRespondents.InitVars();
                }
            }
            this.tableRespondentProperties = ((RespondentPropertiesDataTable)(base.Tables["RespondentProperties"]));
            if ((initTable == true)) {
                if ((this.tableRespondentProperties != null)) {
                    this.tableRespondentProperties.InitVars();
                }
            }
            this.tableSurveyInstances = ((SurveyInstancesDataTable)(base.Tables["SurveyInstances"]));
            if ((initTable == true)) {
                if ((this.tableSurveyInstances != null)) {
                    this.tableSurveyInstances.InitVars();
                }
            }
            this.tableTriggerDependencies = ((TriggerDependenciesDataTable)(base.Tables["TriggerDependencies"]));
            if ((initTable == true)) {
                if ((this.tableTriggerDependencies != null)) {
                    this.tableTriggerDependencies.InitVars();
                }
            }
            this.tableInvocationPoints = ((InvocationPointsDataTable)(base.Tables["InvocationPoints"]));
            if ((initTable == true)) {
                if ((this.tableInvocationPoints != null)) {
                    this.tableInvocationPoints.InitVars();
                }
            }
            this.tableTriggerTypes = ((TriggerTypesDataTable)(base.Tables["TriggerTypes"]));
            if ((initTable == true)) {
                if ((this.tableTriggerTypes != null)) {
                    this.tableTriggerTypes.InitVars();
                }
            }
            this.tableTriggers = ((TriggersDataTable)(base.Tables["Triggers"]));
            if ((initTable == true)) {
                if ((this.tableTriggers != null)) {
                    this.tableTriggers.InitVars();
                }
            }
            this.tableCriteria = ((CriteriaDataTable)(base.Tables["Criteria"]));
            if ((initTable == true)) {
                if ((this.tableCriteria != null)) {
                    this.tableCriteria.InitVars();
                }
            }
            this.tableCriteriaTypes = ((CriteriaTypesDataTable)(base.Tables["CriteriaTypes"]));
            if ((initTable == true)) {
                if ((this.tableCriteriaTypes != null)) {
                    this.tableCriteriaTypes.InitVars();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitClass() {
            this.DataSetName = "dsSurveyPoint";
            this.Prefix = "";
            this.Namespace = "http://tempuri.org/dsSurveyPoint.xsd";
            this.EnforceConstraints = true;
            this.SchemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
            this.tableSurveys = new SurveysDataTable();
            base.Tables.Add(this.tableSurveys);
            this.tableFileDefs = new FileDefsDataTable();
            base.Tables.Add(this.tableFileDefs);
            this.tableClients = new ClientsDataTable();
            base.Tables.Add(this.tableClients);
            this.tableScripts = new ScriptsDataTable();
            base.Tables.Add(this.tableScripts);
            this.tableTemplates = new TemplatesDataTable();
            base.Tables.Add(this.tableTemplates);
            this.tableFileDefColumns = new FileDefColumnsDataTable();
            base.Tables.Add(this.tableFileDefColumns);
            this.tableRespondents = new RespondentsDataTable();
            base.Tables.Add(this.tableRespondents);
            this.tableRespondentProperties = new RespondentPropertiesDataTable();
            base.Tables.Add(this.tableRespondentProperties);
            this.tableSurveyInstances = new SurveyInstancesDataTable();
            base.Tables.Add(this.tableSurveyInstances);
            this.tableTriggerDependencies = new TriggerDependenciesDataTable();
            base.Tables.Add(this.tableTriggerDependencies);
            this.tableInvocationPoints = new InvocationPointsDataTable();
            base.Tables.Add(this.tableInvocationPoints);
            this.tableTriggerTypes = new TriggerTypesDataTable();
            base.Tables.Add(this.tableTriggerTypes);
            this.tableTriggers = new TriggersDataTable();
            base.Tables.Add(this.tableTriggers);
            this.tableCriteria = new CriteriaDataTable();
            base.Tables.Add(this.tableCriteria);
            this.tableCriteriaTypes = new CriteriaTypesDataTable();
            base.Tables.Add(this.tableCriteriaTypes);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeSurveys() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeFileDefs() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeClients() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeScripts() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeTemplates() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeFileDefColumns() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeRespondents() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeRespondentProperties() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeSurveyInstances() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeTriggerDependencies() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeInvocationPoints() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeTriggerTypes() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeTriggers() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeCriteria() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeCriteriaTypes() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void SchemaChanged(object sender, global::System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == global::System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedDataSetSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
            dsSurveyPoint ds = new dsSurveyPoint();
            global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
            global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
            global::System.Xml.Schema.XmlSchemaAny any = new global::System.Xml.Schema.XmlSchemaAny();
            any.Namespace = ds.Namespace;
            sequence.Items.Add(any);
            type.Particle = sequence;
            global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
            if (xs.Contains(dsSchema.TargetNamespace)) {
                global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                try {
                    global::System.Xml.Schema.XmlSchema schema = null;
                    dsSchema.Write(s1);
                    for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                        schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                        s2.SetLength(0);
                        schema.Write(s2);
                        if ((s1.Length == s2.Length)) {
                            s1.Position = 0;
                            s2.Position = 0;
                            for (; ((s1.Position != s1.Length) 
                                        && (s1.ReadByte() == s2.ReadByte())); ) {
                                ;
                            }
                            if ((s1.Position == s1.Length)) {
                                return type;
                            }
                        }
                    }
                }
                finally {
                    if ((s1 != null)) {
                        s1.Close();
                    }
                    if ((s2 != null)) {
                        s2.Close();
                    }
                }
            }
            xs.Add(dsSchema);
            return type;
        }
        
        public delegate void SurveysRowChangeEventHandler(object sender, SurveysRowChangeEvent e);
        
        public delegate void FileDefsRowChangeEventHandler(object sender, FileDefsRowChangeEvent e);
        
        public delegate void ClientsRowChangeEventHandler(object sender, ClientsRowChangeEvent e);
        
        public delegate void ScriptsRowChangeEventHandler(object sender, ScriptsRowChangeEvent e);
        
        public delegate void TemplatesRowChangeEventHandler(object sender, TemplatesRowChangeEvent e);
        
        public delegate void FileDefColumnsRowChangeEventHandler(object sender, FileDefColumnsRowChangeEvent e);
        
        public delegate void RespondentsRowChangeEventHandler(object sender, RespondentsRowChangeEvent e);
        
        public delegate void RespondentPropertiesRowChangeEventHandler(object sender, RespondentPropertiesRowChangeEvent e);
        
        public delegate void SurveyInstancesRowChangeEventHandler(object sender, SurveyInstancesRowChangeEvent e);
        
        public delegate void TriggerDependenciesRowChangeEventHandler(object sender, TriggerDependenciesRowChangeEvent e);
        
        public delegate void InvocationPointsRowChangeEventHandler(object sender, InvocationPointsRowChangeEvent e);
        
        public delegate void TriggerTypesRowChangeEventHandler(object sender, TriggerTypesRowChangeEvent e);
        
        public delegate void TriggersRowChangeEventHandler(object sender, TriggersRowChangeEvent e);
        
        public delegate void CriteriaRowChangeEventHandler(object sender, CriteriaRowChangeEvent e);
        
        public delegate void CriteriaTypesRowChangeEventHandler(object sender, CriteriaTypesRowChangeEvent e);
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class SurveysDataTable : global::System.Data.TypedTableBase<SurveysRow> {
            
            private global::System.Data.DataColumn columnSurveyID;
            
            private global::System.Data.DataColumn columnName;
            
            private global::System.Data.DataColumn columnDescription;
            
            private global::System.Data.DataColumn columnCreatedByUserID;
            
            private global::System.Data.DataColumn columnCreatedOnDate;
            
            private global::System.Data.DataColumn columnActive;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SurveysDataTable() {
                this.TableName = "Surveys";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal SurveysDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected SurveysDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SurveyIDColumn {
                get {
                    return this.columnSurveyID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn NameColumn {
                get {
                    return this.columnName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DescriptionColumn {
                get {
                    return this.columnDescription;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CreatedByUserIDColumn {
                get {
                    return this.columnCreatedByUserID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CreatedOnDateColumn {
                get {
                    return this.columnCreatedOnDate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ActiveColumn {
                get {
                    return this.columnActive;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SurveysRow this[int index] {
                get {
                    return ((SurveysRow)(this.Rows[index]));
                }
            }
            
            public event SurveysRowChangeEventHandler SurveysRowChanging;
            
            public event SurveysRowChangeEventHandler SurveysRowChanged;
            
            public event SurveysRowChangeEventHandler SurveysRowDeleting;
            
            public event SurveysRowChangeEventHandler SurveysRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddSurveysRow(SurveysRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SurveysRow AddSurveysRow(string Name, string Description, int CreatedByUserID, System.DateTime CreatedOnDate, byte Active) {
                SurveysRow rowSurveysRow = ((SurveysRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        null,
                        Name,
                        Description,
                        CreatedByUserID,
                        CreatedOnDate,
                        Active};
                rowSurveysRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowSurveysRow);
                return rowSurveysRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SurveysRow FindBySurveyID(int SurveyID) {
                return ((SurveysRow)(this.Rows.Find(new object[] {
                            SurveyID})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                SurveysDataTable cln = ((SurveysDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new SurveysDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnSurveyID = base.Columns["SurveyID"];
                this.columnName = base.Columns["Name"];
                this.columnDescription = base.Columns["Description"];
                this.columnCreatedByUserID = base.Columns["CreatedByUserID"];
                this.columnCreatedOnDate = base.Columns["CreatedOnDate"];
                this.columnActive = base.Columns["Active"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnSurveyID = new global::System.Data.DataColumn("SurveyID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSurveyID);
                this.columnName = new global::System.Data.DataColumn("Name", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnName);
                this.columnDescription = new global::System.Data.DataColumn("Description", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDescription);
                this.columnCreatedByUserID = new global::System.Data.DataColumn("CreatedByUserID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCreatedByUserID);
                this.columnCreatedOnDate = new global::System.Data.DataColumn("CreatedOnDate", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCreatedOnDate);
                this.columnActive = new global::System.Data.DataColumn("Active", typeof(byte), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnActive);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("dsSurveyPointKey2", new global::System.Data.DataColumn[] {
                                this.columnSurveyID}, true));
                this.columnSurveyID.AutoIncrement = true;
                this.columnSurveyID.AllowDBNull = false;
                this.columnSurveyID.ReadOnly = true;
                this.columnSurveyID.Unique = true;
                this.columnName.AllowDBNull = false;
                this.columnDescription.AllowDBNull = false;
                this.columnCreatedByUserID.AllowDBNull = false;
                this.columnCreatedOnDate.AllowDBNull = false;
                this.columnActive.AllowDBNull = false;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SurveysRow NewSurveysRow() {
                return ((SurveysRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new SurveysRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(SurveysRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.SurveysRowChanged != null)) {
                    this.SurveysRowChanged(this, new SurveysRowChangeEvent(((SurveysRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.SurveysRowChanging != null)) {
                    this.SurveysRowChanging(this, new SurveysRowChangeEvent(((SurveysRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.SurveysRowDeleted != null)) {
                    this.SurveysRowDeleted(this, new SurveysRowChangeEvent(((SurveysRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.SurveysRowDeleting != null)) {
                    this.SurveysRowDeleting(this, new SurveysRowChangeEvent(((SurveysRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveSurveysRow(SurveysRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                dsSurveyPoint ds = new dsSurveyPoint();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "SurveysDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class FileDefsDataTable : global::System.Data.TypedTableBase<FileDefsRow> {
            
            private global::System.Data.DataColumn columnFileDefID;
            
            private global::System.Data.DataColumn columnFileDefName;
            
            private global::System.Data.DataColumn columnFileDefDescription;
            
            private global::System.Data.DataColumn columnClientID;
            
            private global::System.Data.DataColumn columnSurveyID;
            
            private global::System.Data.DataColumn columnFileDefTypeID;
            
            private global::System.Data.DataColumn columnFileTypeID;
            
            private global::System.Data.DataColumn columnFileDefDelimiter;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public FileDefsDataTable() {
                this.TableName = "FileDefs";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal FileDefsDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected FileDefsDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn FileDefIDColumn {
                get {
                    return this.columnFileDefID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn FileDefNameColumn {
                get {
                    return this.columnFileDefName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn FileDefDescriptionColumn {
                get {
                    return this.columnFileDefDescription;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ClientIDColumn {
                get {
                    return this.columnClientID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SurveyIDColumn {
                get {
                    return this.columnSurveyID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn FileDefTypeIDColumn {
                get {
                    return this.columnFileDefTypeID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn FileTypeIDColumn {
                get {
                    return this.columnFileTypeID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn FileDefDelimiterColumn {
                get {
                    return this.columnFileDefDelimiter;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public FileDefsRow this[int index] {
                get {
                    return ((FileDefsRow)(this.Rows[index]));
                }
            }
            
            public event FileDefsRowChangeEventHandler FileDefsRowChanging;
            
            public event FileDefsRowChangeEventHandler FileDefsRowChanged;
            
            public event FileDefsRowChangeEventHandler FileDefsRowDeleting;
            
            public event FileDefsRowChangeEventHandler FileDefsRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddFileDefsRow(FileDefsRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public FileDefsRow AddFileDefsRow(string FileDefName, string FileDefDescription, int ClientID, int SurveyID, int FileDefTypeID, int FileTypeID, string FileDefDelimiter) {
                FileDefsRow rowFileDefsRow = ((FileDefsRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        null,
                        FileDefName,
                        FileDefDescription,
                        ClientID,
                        SurveyID,
                        FileDefTypeID,
                        FileTypeID,
                        FileDefDelimiter};
                rowFileDefsRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowFileDefsRow);
                return rowFileDefsRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public FileDefsRow FindByFileDefID(int FileDefID) {
                return ((FileDefsRow)(this.Rows.Find(new object[] {
                            FileDefID})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                FileDefsDataTable cln = ((FileDefsDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new FileDefsDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnFileDefID = base.Columns["FileDefID"];
                this.columnFileDefName = base.Columns["FileDefName"];
                this.columnFileDefDescription = base.Columns["FileDefDescription"];
                this.columnClientID = base.Columns["ClientID"];
                this.columnSurveyID = base.Columns["SurveyID"];
                this.columnFileDefTypeID = base.Columns["FileDefTypeID"];
                this.columnFileTypeID = base.Columns["FileTypeID"];
                this.columnFileDefDelimiter = base.Columns["FileDefDelimiter"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnFileDefID = new global::System.Data.DataColumn("FileDefID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnFileDefID);
                this.columnFileDefName = new global::System.Data.DataColumn("FileDefName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnFileDefName);
                this.columnFileDefDescription = new global::System.Data.DataColumn("FileDefDescription", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnFileDefDescription);
                this.columnClientID = new global::System.Data.DataColumn("ClientID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnClientID);
                this.columnSurveyID = new global::System.Data.DataColumn("SurveyID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSurveyID);
                this.columnFileDefTypeID = new global::System.Data.DataColumn("FileDefTypeID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnFileDefTypeID);
                this.columnFileTypeID = new global::System.Data.DataColumn("FileTypeID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnFileTypeID);
                this.columnFileDefDelimiter = new global::System.Data.DataColumn("FileDefDelimiter", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnFileDefDelimiter);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("dsSurveyPointKey3", new global::System.Data.DataColumn[] {
                                this.columnFileDefID}, true));
                this.columnFileDefID.AutoIncrement = true;
                this.columnFileDefID.AllowDBNull = false;
                this.columnFileDefID.ReadOnly = true;
                this.columnFileDefID.Unique = true;
                this.columnFileDefName.AllowDBNull = false;
                this.columnFileDefDescription.AllowDBNull = false;
                this.columnFileDefTypeID.AllowDBNull = false;
                this.columnFileTypeID.AllowDBNull = false;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public FileDefsRow NewFileDefsRow() {
                return ((FileDefsRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new FileDefsRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(FileDefsRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.FileDefsRowChanged != null)) {
                    this.FileDefsRowChanged(this, new FileDefsRowChangeEvent(((FileDefsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.FileDefsRowChanging != null)) {
                    this.FileDefsRowChanging(this, new FileDefsRowChangeEvent(((FileDefsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.FileDefsRowDeleted != null)) {
                    this.FileDefsRowDeleted(this, new FileDefsRowChangeEvent(((FileDefsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.FileDefsRowDeleting != null)) {
                    this.FileDefsRowDeleting(this, new FileDefsRowChangeEvent(((FileDefsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveFileDefsRow(FileDefsRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                dsSurveyPoint ds = new dsSurveyPoint();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "FileDefsDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class ClientsDataTable : global::System.Data.TypedTableBase<ClientsRow> {
            
            private global::System.Data.DataColumn columnClientID;
            
            private global::System.Data.DataColumn columnName;
            
            private global::System.Data.DataColumn columnAddress1;
            
            private global::System.Data.DataColumn columnAddress2;
            
            private global::System.Data.DataColumn columnCity;
            
            private global::System.Data.DataColumn columnState;
            
            private global::System.Data.DataColumn columnPostalCode;
            
            private global::System.Data.DataColumn columnTelephone;
            
            private global::System.Data.DataColumn columnFax;
            
            private global::System.Data.DataColumn columnActive;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ClientsDataTable() {
                this.TableName = "Clients";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ClientsDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected ClientsDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ClientIDColumn {
                get {
                    return this.columnClientID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn NameColumn {
                get {
                    return this.columnName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Address1Column {
                get {
                    return this.columnAddress1;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Address2Column {
                get {
                    return this.columnAddress2;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CityColumn {
                get {
                    return this.columnCity;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn StateColumn {
                get {
                    return this.columnState;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PostalCodeColumn {
                get {
                    return this.columnPostalCode;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TelephoneColumn {
                get {
                    return this.columnTelephone;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn FaxColumn {
                get {
                    return this.columnFax;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ActiveColumn {
                get {
                    return this.columnActive;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ClientsRow this[int index] {
                get {
                    return ((ClientsRow)(this.Rows[index]));
                }
            }
            
            public event ClientsRowChangeEventHandler ClientsRowChanging;
            
            public event ClientsRowChangeEventHandler ClientsRowChanged;
            
            public event ClientsRowChangeEventHandler ClientsRowDeleting;
            
            public event ClientsRowChangeEventHandler ClientsRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddClientsRow(ClientsRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ClientsRow AddClientsRow(string Name, string Address1, string Address2, string City, string State, string PostalCode, string Telephone, string Fax, byte Active) {
                ClientsRow rowClientsRow = ((ClientsRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        null,
                        Name,
                        Address1,
                        Address2,
                        City,
                        State,
                        PostalCode,
                        Telephone,
                        Fax,
                        Active};
                rowClientsRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowClientsRow);
                return rowClientsRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ClientsRow FindByClientID(int ClientID) {
                return ((ClientsRow)(this.Rows.Find(new object[] {
                            ClientID})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                ClientsDataTable cln = ((ClientsDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new ClientsDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnClientID = base.Columns["ClientID"];
                this.columnName = base.Columns["Name"];
                this.columnAddress1 = base.Columns["Address1"];
                this.columnAddress2 = base.Columns["Address2"];
                this.columnCity = base.Columns["City"];
                this.columnState = base.Columns["State"];
                this.columnPostalCode = base.Columns["PostalCode"];
                this.columnTelephone = base.Columns["Telephone"];
                this.columnFax = base.Columns["Fax"];
                this.columnActive = base.Columns["Active"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnClientID = new global::System.Data.DataColumn("ClientID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnClientID);
                this.columnName = new global::System.Data.DataColumn("Name", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnName);
                this.columnAddress1 = new global::System.Data.DataColumn("Address1", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnAddress1);
                this.columnAddress2 = new global::System.Data.DataColumn("Address2", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnAddress2);
                this.columnCity = new global::System.Data.DataColumn("City", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCity);
                this.columnState = new global::System.Data.DataColumn("State", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnState);
                this.columnPostalCode = new global::System.Data.DataColumn("PostalCode", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPostalCode);
                this.columnTelephone = new global::System.Data.DataColumn("Telephone", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTelephone);
                this.columnFax = new global::System.Data.DataColumn("Fax", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnFax);
                this.columnActive = new global::System.Data.DataColumn("Active", typeof(byte), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnActive);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("dsSurveyPointKey4", new global::System.Data.DataColumn[] {
                                this.columnClientID}, true));
                this.columnClientID.AutoIncrement = true;
                this.columnClientID.AllowDBNull = false;
                this.columnClientID.ReadOnly = true;
                this.columnClientID.Unique = true;
                this.columnName.AllowDBNull = false;
                this.columnAddress1.AllowDBNull = false;
                this.columnAddress2.AllowDBNull = false;
                this.columnCity.AllowDBNull = false;
                this.columnState.AllowDBNull = false;
                this.columnPostalCode.AllowDBNull = false;
                this.columnTelephone.AllowDBNull = false;
                this.columnFax.AllowDBNull = false;
                this.columnActive.AllowDBNull = false;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ClientsRow NewClientsRow() {
                return ((ClientsRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new ClientsRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(ClientsRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.ClientsRowChanged != null)) {
                    this.ClientsRowChanged(this, new ClientsRowChangeEvent(((ClientsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.ClientsRowChanging != null)) {
                    this.ClientsRowChanging(this, new ClientsRowChangeEvent(((ClientsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.ClientsRowDeleted != null)) {
                    this.ClientsRowDeleted(this, new ClientsRowChangeEvent(((ClientsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.ClientsRowDeleting != null)) {
                    this.ClientsRowDeleting(this, new ClientsRowChangeEvent(((ClientsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveClientsRow(ClientsRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                dsSurveyPoint ds = new dsSurveyPoint();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "ClientsDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class ScriptsDataTable : global::System.Data.TypedTableBase<ScriptsRow> {
            
            private global::System.Data.DataColumn columnScriptID;
            
            private global::System.Data.DataColumn columnSurveyID;
            
            private global::System.Data.DataColumn columnScriptTypeID;
            
            private global::System.Data.DataColumn columnName;
            
            private global::System.Data.DataColumn columnDescription;
            
            private global::System.Data.DataColumn columnCompletenessLevel;
            
            private global::System.Data.DataColumn columnFollowSkips;
            
            private global::System.Data.DataColumn columnCalcCompleteness;
            
            private global::System.Data.DataColumn columnDefaultScript;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ScriptsDataTable() {
                this.TableName = "Scripts";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ScriptsDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected ScriptsDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ScriptIDColumn {
                get {
                    return this.columnScriptID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SurveyIDColumn {
                get {
                    return this.columnSurveyID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ScriptTypeIDColumn {
                get {
                    return this.columnScriptTypeID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn NameColumn {
                get {
                    return this.columnName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DescriptionColumn {
                get {
                    return this.columnDescription;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CompletenessLevelColumn {
                get {
                    return this.columnCompletenessLevel;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn FollowSkipsColumn {
                get {
                    return this.columnFollowSkips;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CalcCompletenessColumn {
                get {
                    return this.columnCalcCompleteness;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DefaultScriptColumn {
                get {
                    return this.columnDefaultScript;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ScriptsRow this[int index] {
                get {
                    return ((ScriptsRow)(this.Rows[index]));
                }
            }
            
            public event ScriptsRowChangeEventHandler ScriptsRowChanging;
            
            public event ScriptsRowChangeEventHandler ScriptsRowChanged;
            
            public event ScriptsRowChangeEventHandler ScriptsRowDeleting;
            
            public event ScriptsRowChangeEventHandler ScriptsRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddScriptsRow(ScriptsRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ScriptsRow AddScriptsRow(int SurveyID, int ScriptTypeID, string Name, string Description, decimal CompletenessLevel, byte FollowSkips, byte CalcCompleteness, byte DefaultScript) {
                ScriptsRow rowScriptsRow = ((ScriptsRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        null,
                        SurveyID,
                        ScriptTypeID,
                        Name,
                        Description,
                        CompletenessLevel,
                        FollowSkips,
                        CalcCompleteness,
                        DefaultScript};
                rowScriptsRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowScriptsRow);
                return rowScriptsRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ScriptsRow FindByScriptID(int ScriptID) {
                return ((ScriptsRow)(this.Rows.Find(new object[] {
                            ScriptID})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                ScriptsDataTable cln = ((ScriptsDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new ScriptsDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnScriptID = base.Columns["ScriptID"];
                this.columnSurveyID = base.Columns["SurveyID"];
                this.columnScriptTypeID = base.Columns["ScriptTypeID"];
                this.columnName = base.Columns["Name"];
                this.columnDescription = base.Columns["Description"];
                this.columnCompletenessLevel = base.Columns["CompletenessLevel"];
                this.columnFollowSkips = base.Columns["FollowSkips"];
                this.columnCalcCompleteness = base.Columns["CalcCompleteness"];
                this.columnDefaultScript = base.Columns["DefaultScript"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnScriptID = new global::System.Data.DataColumn("ScriptID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnScriptID);
                this.columnSurveyID = new global::System.Data.DataColumn("SurveyID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSurveyID);
                this.columnScriptTypeID = new global::System.Data.DataColumn("ScriptTypeID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnScriptTypeID);
                this.columnName = new global::System.Data.DataColumn("Name", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnName);
                this.columnDescription = new global::System.Data.DataColumn("Description", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDescription);
                this.columnCompletenessLevel = new global::System.Data.DataColumn("CompletenessLevel", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCompletenessLevel);
                this.columnFollowSkips = new global::System.Data.DataColumn("FollowSkips", typeof(byte), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnFollowSkips);
                this.columnCalcCompleteness = new global::System.Data.DataColumn("CalcCompleteness", typeof(byte), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCalcCompleteness);
                this.columnDefaultScript = new global::System.Data.DataColumn("DefaultScript", typeof(byte), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDefaultScript);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("dsSurveyPointKey5", new global::System.Data.DataColumn[] {
                                this.columnScriptID}, true));
                this.columnScriptID.AutoIncrement = true;
                this.columnScriptID.AllowDBNull = false;
                this.columnScriptID.ReadOnly = true;
                this.columnScriptID.Unique = true;
                this.columnSurveyID.AllowDBNull = false;
                this.columnScriptTypeID.AllowDBNull = false;
                this.columnName.AllowDBNull = false;
                this.columnDescription.AllowDBNull = false;
                this.columnCompletenessLevel.AllowDBNull = false;
                this.columnFollowSkips.AllowDBNull = false;
                this.columnCalcCompleteness.AllowDBNull = false;
                this.columnDefaultScript.AllowDBNull = false;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ScriptsRow NewScriptsRow() {
                return ((ScriptsRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new ScriptsRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(ScriptsRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.ScriptsRowChanged != null)) {
                    this.ScriptsRowChanged(this, new ScriptsRowChangeEvent(((ScriptsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.ScriptsRowChanging != null)) {
                    this.ScriptsRowChanging(this, new ScriptsRowChangeEvent(((ScriptsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.ScriptsRowDeleted != null)) {
                    this.ScriptsRowDeleted(this, new ScriptsRowChangeEvent(((ScriptsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.ScriptsRowDeleting != null)) {
                    this.ScriptsRowDeleting(this, new ScriptsRowChangeEvent(((ScriptsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveScriptsRow(ScriptsRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                dsSurveyPoint ds = new dsSurveyPoint();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "ScriptsDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class TemplatesDataTable : global::System.Data.TypedTableBase<TemplatesRow> {
            
            private global::System.Data.DataColumn columnTemplateID;
            
            private global::System.Data.DataColumn columnClientID;
            
            private global::System.Data.DataColumn columnScriptID;
            
            private global::System.Data.DataColumn columnFileDefID;
            
            private global::System.Data.DataColumn columnDescription;
            
            private global::System.Data.DataColumn columnNotes;
            
            private global::System.Data.DataColumn columnClientName;
            
            private global::System.Data.DataColumn columnScriptName;
            
            private global::System.Data.DataColumn columnSurveyID;
            
            private global::System.Data.DataColumn columnSurveyName;
            
            private global::System.Data.DataColumn columnFileDefName;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TemplatesDataTable() {
                this.TableName = "Templates";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal TemplatesDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected TemplatesDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TemplateIDColumn {
                get {
                    return this.columnTemplateID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ClientIDColumn {
                get {
                    return this.columnClientID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ScriptIDColumn {
                get {
                    return this.columnScriptID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn FileDefIDColumn {
                get {
                    return this.columnFileDefID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DescriptionColumn {
                get {
                    return this.columnDescription;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn NotesColumn {
                get {
                    return this.columnNotes;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ClientNameColumn {
                get {
                    return this.columnClientName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ScriptNameColumn {
                get {
                    return this.columnScriptName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SurveyIDColumn {
                get {
                    return this.columnSurveyID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SurveyNameColumn {
                get {
                    return this.columnSurveyName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn FileDefNameColumn {
                get {
                    return this.columnFileDefName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TemplatesRow this[int index] {
                get {
                    return ((TemplatesRow)(this.Rows[index]));
                }
            }
            
            public event TemplatesRowChangeEventHandler TemplatesRowChanging;
            
            public event TemplatesRowChangeEventHandler TemplatesRowChanged;
            
            public event TemplatesRowChangeEventHandler TemplatesRowDeleting;
            
            public event TemplatesRowChangeEventHandler TemplatesRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddTemplatesRow(TemplatesRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TemplatesRow AddTemplatesRow(int ClientID, int ScriptID, int FileDefID, string Description, string Notes, string ClientName, string ScriptName, int SurveyID, string SurveyName, string FileDefName) {
                TemplatesRow rowTemplatesRow = ((TemplatesRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        null,
                        ClientID,
                        ScriptID,
                        FileDefID,
                        Description,
                        Notes,
                        ClientName,
                        ScriptName,
                        SurveyID,
                        SurveyName,
                        FileDefName};
                rowTemplatesRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowTemplatesRow);
                return rowTemplatesRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TemplatesRow FindByTemplateID(int TemplateID) {
                return ((TemplatesRow)(this.Rows.Find(new object[] {
                            TemplateID})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                TemplatesDataTable cln = ((TemplatesDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new TemplatesDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnTemplateID = base.Columns["TemplateID"];
                this.columnClientID = base.Columns["ClientID"];
                this.columnScriptID = base.Columns["ScriptID"];
                this.columnFileDefID = base.Columns["FileDefID"];
                this.columnDescription = base.Columns["Description"];
                this.columnNotes = base.Columns["Notes"];
                this.columnClientName = base.Columns["ClientName"];
                this.columnScriptName = base.Columns["ScriptName"];
                this.columnSurveyID = base.Columns["SurveyID"];
                this.columnSurveyName = base.Columns["SurveyName"];
                this.columnFileDefName = base.Columns["FileDefName"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnTemplateID = new global::System.Data.DataColumn("TemplateID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTemplateID);
                this.columnClientID = new global::System.Data.DataColumn("ClientID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnClientID);
                this.columnScriptID = new global::System.Data.DataColumn("ScriptID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnScriptID);
                this.columnFileDefID = new global::System.Data.DataColumn("FileDefID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnFileDefID);
                this.columnDescription = new global::System.Data.DataColumn("Description", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDescription);
                this.columnNotes = new global::System.Data.DataColumn("Notes", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnNotes);
                this.columnClientName = new global::System.Data.DataColumn("ClientName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnClientName);
                this.columnScriptName = new global::System.Data.DataColumn("ScriptName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnScriptName);
                this.columnSurveyID = new global::System.Data.DataColumn("SurveyID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSurveyID);
                this.columnSurveyName = new global::System.Data.DataColumn("SurveyName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSurveyName);
                this.columnFileDefName = new global::System.Data.DataColumn("FileDefName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnFileDefName);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("dsSurveyPointKey1", new global::System.Data.DataColumn[] {
                                this.columnTemplateID}, true));
                this.columnTemplateID.AutoIncrement = true;
                this.columnTemplateID.AllowDBNull = false;
                this.columnTemplateID.Unique = true;
                this.columnClientID.AllowDBNull = false;
                this.columnScriptID.AllowDBNull = false;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TemplatesRow NewTemplatesRow() {
                return ((TemplatesRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new TemplatesRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(TemplatesRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.TemplatesRowChanged != null)) {
                    this.TemplatesRowChanged(this, new TemplatesRowChangeEvent(((TemplatesRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.TemplatesRowChanging != null)) {
                    this.TemplatesRowChanging(this, new TemplatesRowChangeEvent(((TemplatesRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.TemplatesRowDeleted != null)) {
                    this.TemplatesRowDeleted(this, new TemplatesRowChangeEvent(((TemplatesRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.TemplatesRowDeleting != null)) {
                    this.TemplatesRowDeleting(this, new TemplatesRowChangeEvent(((TemplatesRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveTemplatesRow(TemplatesRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                dsSurveyPoint ds = new dsSurveyPoint();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "TemplatesDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class FileDefColumnsDataTable : global::System.Data.TypedTableBase<FileDefColumnsRow> {
            
            private global::System.Data.DataColumn columnFileDefColumnID;
            
            private global::System.Data.DataColumn columnFileDefID;
            
            private global::System.Data.DataColumn columnColumnName;
            
            private global::System.Data.DataColumn columnDisplayOrder;
            
            private global::System.Data.DataColumn columnWidth;
            
            private global::System.Data.DataColumn columnFormatString;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public FileDefColumnsDataTable() {
                this.TableName = "FileDefColumns";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal FileDefColumnsDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected FileDefColumnsDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn FileDefColumnIDColumn {
                get {
                    return this.columnFileDefColumnID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn FileDefIDColumn {
                get {
                    return this.columnFileDefID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ColumnNameColumn {
                get {
                    return this.columnColumnName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DisplayOrderColumn {
                get {
                    return this.columnDisplayOrder;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn WidthColumn {
                get {
                    return this.columnWidth;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn FormatStringColumn {
                get {
                    return this.columnFormatString;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public FileDefColumnsRow this[int index] {
                get {
                    return ((FileDefColumnsRow)(this.Rows[index]));
                }
            }
            
            public event FileDefColumnsRowChangeEventHandler FileDefColumnsRowChanging;
            
            public event FileDefColumnsRowChangeEventHandler FileDefColumnsRowChanged;
            
            public event FileDefColumnsRowChangeEventHandler FileDefColumnsRowDeleting;
            
            public event FileDefColumnsRowChangeEventHandler FileDefColumnsRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddFileDefColumnsRow(FileDefColumnsRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public FileDefColumnsRow AddFileDefColumnsRow(int FileDefID, string ColumnName, int DisplayOrder, int Width, string FormatString) {
                FileDefColumnsRow rowFileDefColumnsRow = ((FileDefColumnsRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        null,
                        FileDefID,
                        ColumnName,
                        DisplayOrder,
                        Width,
                        FormatString};
                rowFileDefColumnsRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowFileDefColumnsRow);
                return rowFileDefColumnsRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public FileDefColumnsRow FindByFileDefColumnID(int FileDefColumnID) {
                return ((FileDefColumnsRow)(this.Rows.Find(new object[] {
                            FileDefColumnID})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                FileDefColumnsDataTable cln = ((FileDefColumnsDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new FileDefColumnsDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnFileDefColumnID = base.Columns["FileDefColumnID"];
                this.columnFileDefID = base.Columns["FileDefID"];
                this.columnColumnName = base.Columns["ColumnName"];
                this.columnDisplayOrder = base.Columns["DisplayOrder"];
                this.columnWidth = base.Columns["Width"];
                this.columnFormatString = base.Columns["FormatString"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnFileDefColumnID = new global::System.Data.DataColumn("FileDefColumnID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnFileDefColumnID);
                this.columnFileDefID = new global::System.Data.DataColumn("FileDefID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnFileDefID);
                this.columnColumnName = new global::System.Data.DataColumn("ColumnName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnColumnName);
                this.columnDisplayOrder = new global::System.Data.DataColumn("DisplayOrder", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDisplayOrder);
                this.columnWidth = new global::System.Data.DataColumn("Width", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnWidth);
                this.columnFormatString = new global::System.Data.DataColumn("FormatString", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnFormatString);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("dsSurveyPointKey6", new global::System.Data.DataColumn[] {
                                this.columnFileDefColumnID}, true));
                this.columnFileDefColumnID.AutoIncrement = true;
                this.columnFileDefColumnID.AllowDBNull = false;
                this.columnFileDefColumnID.ReadOnly = true;
                this.columnFileDefColumnID.Unique = true;
                this.columnFileDefID.AllowDBNull = false;
                this.columnColumnName.AllowDBNull = false;
                this.columnDisplayOrder.AllowDBNull = false;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public FileDefColumnsRow NewFileDefColumnsRow() {
                return ((FileDefColumnsRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new FileDefColumnsRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(FileDefColumnsRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.FileDefColumnsRowChanged != null)) {
                    this.FileDefColumnsRowChanged(this, new FileDefColumnsRowChangeEvent(((FileDefColumnsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.FileDefColumnsRowChanging != null)) {
                    this.FileDefColumnsRowChanging(this, new FileDefColumnsRowChangeEvent(((FileDefColumnsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.FileDefColumnsRowDeleted != null)) {
                    this.FileDefColumnsRowDeleted(this, new FileDefColumnsRowChangeEvent(((FileDefColumnsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.FileDefColumnsRowDeleting != null)) {
                    this.FileDefColumnsRowDeleting(this, new FileDefColumnsRowChangeEvent(((FileDefColumnsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveFileDefColumnsRow(FileDefColumnsRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                dsSurveyPoint ds = new dsSurveyPoint();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "FileDefColumnsDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class RespondentsDataTable : global::System.Data.TypedTableBase<RespondentsRow> {
            
            private global::System.Data.DataColumn columnRespondentID;
            
            private global::System.Data.DataColumn columnSurveyInstanceID;
            
            private global::System.Data.DataColumn columnFirstName;
            
            private global::System.Data.DataColumn columnMiddleInitial;
            
            private global::System.Data.DataColumn columnLastName;
            
            private global::System.Data.DataColumn columnAddress1;
            
            private global::System.Data.DataColumn columnAddress2;
            
            private global::System.Data.DataColumn columnCity;
            
            private global::System.Data.DataColumn columnState;
            
            private global::System.Data.DataColumn columnPostalCode;
            
            private global::System.Data.DataColumn columnTelephoneDay;
            
            private global::System.Data.DataColumn columnTelephoneEvening;
            
            private global::System.Data.DataColumn columnEmail;
            
            private global::System.Data.DataColumn columnDOB;
            
            private global::System.Data.DataColumn columnGender;
            
            private global::System.Data.DataColumn columnClientRespondentID;
            
            private global::System.Data.DataColumn columnSSN;
            
            private global::System.Data.DataColumn columnBatchID;
            
            private global::System.Data.DataColumn columnMailingSeedFlag;
            
            private global::System.Data.DataColumn columnCallsMade;
            
            private global::System.Data.DataColumn columnFinal;
            
            private global::System.Data.DataColumn columnNextContact;
            
            private global::System.Data.DataColumn columnPostalCodeExt;
            
            private global::System.Data.DataColumn columnRespondentKey;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public RespondentsDataTable() {
                this.TableName = "Respondents";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal RespondentsDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected RespondentsDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn RespondentIDColumn {
                get {
                    return this.columnRespondentID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SurveyInstanceIDColumn {
                get {
                    return this.columnSurveyInstanceID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn FirstNameColumn {
                get {
                    return this.columnFirstName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn MiddleInitialColumn {
                get {
                    return this.columnMiddleInitial;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LastNameColumn {
                get {
                    return this.columnLastName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Address1Column {
                get {
                    return this.columnAddress1;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Address2Column {
                get {
                    return this.columnAddress2;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CityColumn {
                get {
                    return this.columnCity;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn StateColumn {
                get {
                    return this.columnState;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PostalCodeColumn {
                get {
                    return this.columnPostalCode;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TelephoneDayColumn {
                get {
                    return this.columnTelephoneDay;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TelephoneEveningColumn {
                get {
                    return this.columnTelephoneEvening;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn EmailColumn {
                get {
                    return this.columnEmail;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DOBColumn {
                get {
                    return this.columnDOB;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn GenderColumn {
                get {
                    return this.columnGender;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ClientRespondentIDColumn {
                get {
                    return this.columnClientRespondentID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SSNColumn {
                get {
                    return this.columnSSN;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn BatchIDColumn {
                get {
                    return this.columnBatchID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn MailingSeedFlagColumn {
                get {
                    return this.columnMailingSeedFlag;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CallsMadeColumn {
                get {
                    return this.columnCallsMade;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn FinalColumn {
                get {
                    return this.columnFinal;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn NextContactColumn {
                get {
                    return this.columnNextContact;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PostalCodeExtColumn {
                get {
                    return this.columnPostalCodeExt;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn RespondentKeyColumn {
                get {
                    return this.columnRespondentKey;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public RespondentsRow this[int index] {
                get {
                    return ((RespondentsRow)(this.Rows[index]));
                }
            }
            
            public event RespondentsRowChangeEventHandler RespondentsRowChanging;
            
            public event RespondentsRowChangeEventHandler RespondentsRowChanged;
            
            public event RespondentsRowChangeEventHandler RespondentsRowDeleting;
            
            public event RespondentsRowChangeEventHandler RespondentsRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddRespondentsRow(RespondentsRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public RespondentsRow AddRespondentsRow(
                        int SurveyInstanceID, 
                        string FirstName, 
                        string MiddleInitial, 
                        string LastName, 
                        string Address1, 
                        string Address2, 
                        string City, 
                        string State, 
                        string PostalCode, 
                        string TelephoneDay, 
                        string TelephoneEvening, 
                        string Email, 
                        System.DateTime DOB, 
                        string Gender, 
                        string ClientRespondentID, 
                        string SSN, 
                        int BatchID, 
                        byte MailingSeedFlag, 
                        int CallsMade, 
                        int Final, 
                        System.DateTime NextContact, 
                        string PostalCodeExt, 
                        string RespondentKey) {
                RespondentsRow rowRespondentsRow = ((RespondentsRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        null,
                        SurveyInstanceID,
                        FirstName,
                        MiddleInitial,
                        LastName,
                        Address1,
                        Address2,
                        City,
                        State,
                        PostalCode,
                        TelephoneDay,
                        TelephoneEvening,
                        Email,
                        DOB,
                        Gender,
                        ClientRespondentID,
                        SSN,
                        BatchID,
                        MailingSeedFlag,
                        CallsMade,
                        Final,
                        NextContact,
                        PostalCodeExt,
                        RespondentKey};
                rowRespondentsRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowRespondentsRow);
                return rowRespondentsRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public RespondentsRow FindByRespondentID(int RespondentID) {
                return ((RespondentsRow)(this.Rows.Find(new object[] {
                            RespondentID})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                RespondentsDataTable cln = ((RespondentsDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new RespondentsDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnRespondentID = base.Columns["RespondentID"];
                this.columnSurveyInstanceID = base.Columns["SurveyInstanceID"];
                this.columnFirstName = base.Columns["FirstName"];
                this.columnMiddleInitial = base.Columns["MiddleInitial"];
                this.columnLastName = base.Columns["LastName"];
                this.columnAddress1 = base.Columns["Address1"];
                this.columnAddress2 = base.Columns["Address2"];
                this.columnCity = base.Columns["City"];
                this.columnState = base.Columns["State"];
                this.columnPostalCode = base.Columns["PostalCode"];
                this.columnTelephoneDay = base.Columns["TelephoneDay"];
                this.columnTelephoneEvening = base.Columns["TelephoneEvening"];
                this.columnEmail = base.Columns["Email"];
                this.columnDOB = base.Columns["DOB"];
                this.columnGender = base.Columns["Gender"];
                this.columnClientRespondentID = base.Columns["ClientRespondentID"];
                this.columnSSN = base.Columns["SSN"];
                this.columnBatchID = base.Columns["BatchID"];
                this.columnMailingSeedFlag = base.Columns["MailingSeedFlag"];
                this.columnCallsMade = base.Columns["CallsMade"];
                this.columnFinal = base.Columns["Final"];
                this.columnNextContact = base.Columns["NextContact"];
                this.columnPostalCodeExt = base.Columns["PostalCodeExt"];
                this.columnRespondentKey = base.Columns["RespondentKey"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnRespondentID = new global::System.Data.DataColumn("RespondentID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnRespondentID);
                this.columnSurveyInstanceID = new global::System.Data.DataColumn("SurveyInstanceID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSurveyInstanceID);
                this.columnFirstName = new global::System.Data.DataColumn("FirstName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnFirstName);
                this.columnMiddleInitial = new global::System.Data.DataColumn("MiddleInitial", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMiddleInitial);
                this.columnLastName = new global::System.Data.DataColumn("LastName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLastName);
                this.columnAddress1 = new global::System.Data.DataColumn("Address1", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnAddress1);
                this.columnAddress2 = new global::System.Data.DataColumn("Address2", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnAddress2);
                this.columnCity = new global::System.Data.DataColumn("City", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCity);
                this.columnState = new global::System.Data.DataColumn("State", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnState);
                this.columnPostalCode = new global::System.Data.DataColumn("PostalCode", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPostalCode);
                this.columnTelephoneDay = new global::System.Data.DataColumn("TelephoneDay", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTelephoneDay);
                this.columnTelephoneEvening = new global::System.Data.DataColumn("TelephoneEvening", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTelephoneEvening);
                this.columnEmail = new global::System.Data.DataColumn("Email", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnEmail);
                this.columnDOB = new global::System.Data.DataColumn("DOB", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDOB);
                this.columnGender = new global::System.Data.DataColumn("Gender", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnGender);
                this.columnClientRespondentID = new global::System.Data.DataColumn("ClientRespondentID", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnClientRespondentID);
                this.columnSSN = new global::System.Data.DataColumn("SSN", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSSN);
                this.columnBatchID = new global::System.Data.DataColumn("BatchID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnBatchID);
                this.columnMailingSeedFlag = new global::System.Data.DataColumn("MailingSeedFlag", typeof(byte), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMailingSeedFlag);
                this.columnCallsMade = new global::System.Data.DataColumn("CallsMade", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCallsMade);
                this.columnFinal = new global::System.Data.DataColumn("Final", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnFinal);
                this.columnNextContact = new global::System.Data.DataColumn("NextContact", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnNextContact);
                this.columnPostalCodeExt = new global::System.Data.DataColumn("PostalCodeExt", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPostalCodeExt);
                this.columnRespondentKey = new global::System.Data.DataColumn("RespondentKey", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnRespondentKey);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("dsSurveyPointKey7", new global::System.Data.DataColumn[] {
                                this.columnRespondentID}, true));
                this.columnRespondentID.AutoIncrement = true;
                this.columnRespondentID.AllowDBNull = false;
                this.columnRespondentID.ReadOnly = true;
                this.columnRespondentID.Unique = true;
                this.columnSurveyInstanceID.AllowDBNull = false;
                this.columnLastName.AllowDBNull = false;
                this.columnCallsMade.AllowDBNull = false;
                this.columnFinal.AllowDBNull = false;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public RespondentsRow NewRespondentsRow() {
                return ((RespondentsRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new RespondentsRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(RespondentsRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.RespondentsRowChanged != null)) {
                    this.RespondentsRowChanged(this, new RespondentsRowChangeEvent(((RespondentsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.RespondentsRowChanging != null)) {
                    this.RespondentsRowChanging(this, new RespondentsRowChangeEvent(((RespondentsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.RespondentsRowDeleted != null)) {
                    this.RespondentsRowDeleted(this, new RespondentsRowChangeEvent(((RespondentsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.RespondentsRowDeleting != null)) {
                    this.RespondentsRowDeleting(this, new RespondentsRowChangeEvent(((RespondentsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveRespondentsRow(RespondentsRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                dsSurveyPoint ds = new dsSurveyPoint();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "RespondentsDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class RespondentPropertiesDataTable : global::System.Data.TypedTableBase<RespondentPropertiesRow> {
            
            private global::System.Data.DataColumn columnRespondentPropertyID;
            
            private global::System.Data.DataColumn columnRespondentID;
            
            private global::System.Data.DataColumn columnPropertyName;
            
            private global::System.Data.DataColumn columnPropertyValue;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public RespondentPropertiesDataTable() {
                this.TableName = "RespondentProperties";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal RespondentPropertiesDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected RespondentPropertiesDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn RespondentPropertyIDColumn {
                get {
                    return this.columnRespondentPropertyID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn RespondentIDColumn {
                get {
                    return this.columnRespondentID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PropertyNameColumn {
                get {
                    return this.columnPropertyName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PropertyValueColumn {
                get {
                    return this.columnPropertyValue;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public RespondentPropertiesRow this[int index] {
                get {
                    return ((RespondentPropertiesRow)(this.Rows[index]));
                }
            }
            
            public event RespondentPropertiesRowChangeEventHandler RespondentPropertiesRowChanging;
            
            public event RespondentPropertiesRowChangeEventHandler RespondentPropertiesRowChanged;
            
            public event RespondentPropertiesRowChangeEventHandler RespondentPropertiesRowDeleting;
            
            public event RespondentPropertiesRowChangeEventHandler RespondentPropertiesRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddRespondentPropertiesRow(RespondentPropertiesRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public RespondentPropertiesRow AddRespondentPropertiesRow(int RespondentID, string PropertyName, string PropertyValue) {
                RespondentPropertiesRow rowRespondentPropertiesRow = ((RespondentPropertiesRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        null,
                        RespondentID,
                        PropertyName,
                        PropertyValue};
                rowRespondentPropertiesRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowRespondentPropertiesRow);
                return rowRespondentPropertiesRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public RespondentPropertiesRow FindByRespondentPropertyID(int RespondentPropertyID) {
                return ((RespondentPropertiesRow)(this.Rows.Find(new object[] {
                            RespondentPropertyID})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                RespondentPropertiesDataTable cln = ((RespondentPropertiesDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new RespondentPropertiesDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnRespondentPropertyID = base.Columns["RespondentPropertyID"];
                this.columnRespondentID = base.Columns["RespondentID"];
                this.columnPropertyName = base.Columns["PropertyName"];
                this.columnPropertyValue = base.Columns["PropertyValue"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnRespondentPropertyID = new global::System.Data.DataColumn("RespondentPropertyID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnRespondentPropertyID);
                this.columnRespondentID = new global::System.Data.DataColumn("RespondentID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnRespondentID);
                this.columnPropertyName = new global::System.Data.DataColumn("PropertyName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPropertyName);
                this.columnPropertyValue = new global::System.Data.DataColumn("PropertyValue", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPropertyValue);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("dsSurveyPointKey8", new global::System.Data.DataColumn[] {
                                this.columnRespondentPropertyID}, true));
                this.columnRespondentPropertyID.AutoIncrement = true;
                this.columnRespondentPropertyID.AllowDBNull = false;
                this.columnRespondentPropertyID.ReadOnly = true;
                this.columnRespondentPropertyID.Unique = true;
                this.columnRespondentID.AllowDBNull = false;
                this.columnPropertyName.AllowDBNull = false;
                this.columnPropertyValue.AllowDBNull = false;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public RespondentPropertiesRow NewRespondentPropertiesRow() {
                return ((RespondentPropertiesRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new RespondentPropertiesRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(RespondentPropertiesRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.RespondentPropertiesRowChanged != null)) {
                    this.RespondentPropertiesRowChanged(this, new RespondentPropertiesRowChangeEvent(((RespondentPropertiesRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.RespondentPropertiesRowChanging != null)) {
                    this.RespondentPropertiesRowChanging(this, new RespondentPropertiesRowChangeEvent(((RespondentPropertiesRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.RespondentPropertiesRowDeleted != null)) {
                    this.RespondentPropertiesRowDeleted(this, new RespondentPropertiesRowChangeEvent(((RespondentPropertiesRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.RespondentPropertiesRowDeleting != null)) {
                    this.RespondentPropertiesRowDeleting(this, new RespondentPropertiesRowChangeEvent(((RespondentPropertiesRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveRespondentPropertiesRow(RespondentPropertiesRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                dsSurveyPoint ds = new dsSurveyPoint();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "RespondentPropertiesDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class SurveyInstancesDataTable : global::System.Data.TypedTableBase<SurveyInstancesRow> {
            
            private global::System.Data.DataColumn columnSurveyInstanceID;
            
            private global::System.Data.DataColumn columnClientID;
            
            private global::System.Data.DataColumn columnSurveyID;
            
            private global::System.Data.DataColumn columnClientName;
            
            private global::System.Data.DataColumn columnSurveyName;
            
            private global::System.Data.DataColumn columnSurveyInstanceName;
            
            private global::System.Data.DataColumn columnDescription;
            
            private global::System.Data.DataColumn columnActive;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SurveyInstancesDataTable() {
                this.TableName = "SurveyInstances";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal SurveyInstancesDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected SurveyInstancesDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SurveyInstanceIDColumn {
                get {
                    return this.columnSurveyInstanceID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ClientIDColumn {
                get {
                    return this.columnClientID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SurveyIDColumn {
                get {
                    return this.columnSurveyID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ClientNameColumn {
                get {
                    return this.columnClientName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SurveyNameColumn {
                get {
                    return this.columnSurveyName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SurveyInstanceNameColumn {
                get {
                    return this.columnSurveyInstanceName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DescriptionColumn {
                get {
                    return this.columnDescription;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ActiveColumn {
                get {
                    return this.columnActive;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SurveyInstancesRow this[int index] {
                get {
                    return ((SurveyInstancesRow)(this.Rows[index]));
                }
            }
            
            public event SurveyInstancesRowChangeEventHandler SurveyInstancesRowChanging;
            
            public event SurveyInstancesRowChangeEventHandler SurveyInstancesRowChanged;
            
            public event SurveyInstancesRowChangeEventHandler SurveyInstancesRowDeleting;
            
            public event SurveyInstancesRowChangeEventHandler SurveyInstancesRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddSurveyInstancesRow(SurveyInstancesRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SurveyInstancesRow AddSurveyInstancesRow(int ClientID, int SurveyID, string ClientName, string SurveyName, string SurveyInstanceName, string Description, byte Active) {
                SurveyInstancesRow rowSurveyInstancesRow = ((SurveyInstancesRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        null,
                        ClientID,
                        SurveyID,
                        ClientName,
                        SurveyName,
                        SurveyInstanceName,
                        Description,
                        Active};
                rowSurveyInstancesRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowSurveyInstancesRow);
                return rowSurveyInstancesRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SurveyInstancesRow FindBySurveyInstanceID(int SurveyInstanceID) {
                return ((SurveyInstancesRow)(this.Rows.Find(new object[] {
                            SurveyInstanceID})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                SurveyInstancesDataTable cln = ((SurveyInstancesDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new SurveyInstancesDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnSurveyInstanceID = base.Columns["SurveyInstanceID"];
                this.columnClientID = base.Columns["ClientID"];
                this.columnSurveyID = base.Columns["SurveyID"];
                this.columnClientName = base.Columns["ClientName"];
                this.columnSurveyName = base.Columns["SurveyName"];
                this.columnSurveyInstanceName = base.Columns["SurveyInstanceName"];
                this.columnDescription = base.Columns["Description"];
                this.columnActive = base.Columns["Active"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnSurveyInstanceID = new global::System.Data.DataColumn("SurveyInstanceID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSurveyInstanceID);
                this.columnClientID = new global::System.Data.DataColumn("ClientID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnClientID);
                this.columnSurveyID = new global::System.Data.DataColumn("SurveyID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSurveyID);
                this.columnClientName = new global::System.Data.DataColumn("ClientName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnClientName);
                this.columnSurveyName = new global::System.Data.DataColumn("SurveyName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSurveyName);
                this.columnSurveyInstanceName = new global::System.Data.DataColumn("SurveyInstanceName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSurveyInstanceName);
                this.columnDescription = new global::System.Data.DataColumn("Description", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDescription);
                this.columnActive = new global::System.Data.DataColumn("Active", typeof(byte), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnActive);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("dsSurveyPointKey9", new global::System.Data.DataColumn[] {
                                this.columnSurveyInstanceID}, true));
                this.columnSurveyInstanceID.AutoIncrement = true;
                this.columnSurveyInstanceID.AllowDBNull = false;
                this.columnSurveyInstanceID.ReadOnly = true;
                this.columnSurveyInstanceID.Unique = true;
                this.columnClientID.AllowDBNull = false;
                this.columnSurveyID.AllowDBNull = false;
                this.columnClientName.AllowDBNull = false;
                this.columnSurveyName.AllowDBNull = false;
                this.columnSurveyInstanceName.AllowDBNull = false;
                this.columnDescription.ReadOnly = true;
                this.columnActive.AllowDBNull = false;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SurveyInstancesRow NewSurveyInstancesRow() {
                return ((SurveyInstancesRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new SurveyInstancesRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(SurveyInstancesRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.SurveyInstancesRowChanged != null)) {
                    this.SurveyInstancesRowChanged(this, new SurveyInstancesRowChangeEvent(((SurveyInstancesRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.SurveyInstancesRowChanging != null)) {
                    this.SurveyInstancesRowChanging(this, new SurveyInstancesRowChangeEvent(((SurveyInstancesRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.SurveyInstancesRowDeleted != null)) {
                    this.SurveyInstancesRowDeleted(this, new SurveyInstancesRowChangeEvent(((SurveyInstancesRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.SurveyInstancesRowDeleting != null)) {
                    this.SurveyInstancesRowDeleting(this, new SurveyInstancesRowChangeEvent(((SurveyInstancesRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveSurveyInstancesRow(SurveyInstancesRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                dsSurveyPoint ds = new dsSurveyPoint();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "SurveyInstancesDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class TriggerDependenciesDataTable : global::System.Data.TypedTableBase<TriggerDependenciesRow> {
            
            private global::System.Data.DataColumn columnTriggerDependencyID;
            
            private global::System.Data.DataColumn columnTriggerID;
            
            private global::System.Data.DataColumn columnDependsOnTriggerID;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TriggerDependenciesDataTable() {
                this.TableName = "TriggerDependencies";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal TriggerDependenciesDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected TriggerDependenciesDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TriggerDependencyIDColumn {
                get {
                    return this.columnTriggerDependencyID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TriggerIDColumn {
                get {
                    return this.columnTriggerID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DependsOnTriggerIDColumn {
                get {
                    return this.columnDependsOnTriggerID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TriggerDependenciesRow this[int index] {
                get {
                    return ((TriggerDependenciesRow)(this.Rows[index]));
                }
            }
            
            public event TriggerDependenciesRowChangeEventHandler TriggerDependenciesRowChanging;
            
            public event TriggerDependenciesRowChangeEventHandler TriggerDependenciesRowChanged;
            
            public event TriggerDependenciesRowChangeEventHandler TriggerDependenciesRowDeleting;
            
            public event TriggerDependenciesRowChangeEventHandler TriggerDependenciesRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddTriggerDependenciesRow(TriggerDependenciesRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TriggerDependenciesRow AddTriggerDependenciesRow(int TriggerID, int DependsOnTriggerID) {
                TriggerDependenciesRow rowTriggerDependenciesRow = ((TriggerDependenciesRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        null,
                        TriggerID,
                        DependsOnTriggerID};
                rowTriggerDependenciesRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowTriggerDependenciesRow);
                return rowTriggerDependenciesRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TriggerDependenciesRow FindByTriggerDependencyID(int TriggerDependencyID) {
                return ((TriggerDependenciesRow)(this.Rows.Find(new object[] {
                            TriggerDependencyID})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                TriggerDependenciesDataTable cln = ((TriggerDependenciesDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new TriggerDependenciesDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnTriggerDependencyID = base.Columns["TriggerDependencyID"];
                this.columnTriggerID = base.Columns["TriggerID"];
                this.columnDependsOnTriggerID = base.Columns["DependsOnTriggerID"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnTriggerDependencyID = new global::System.Data.DataColumn("TriggerDependencyID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTriggerDependencyID);
                this.columnTriggerID = new global::System.Data.DataColumn("TriggerID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTriggerID);
                this.columnDependsOnTriggerID = new global::System.Data.DataColumn("DependsOnTriggerID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDependsOnTriggerID);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("dsSurveyPointKey11", new global::System.Data.DataColumn[] {
                                this.columnTriggerDependencyID}, true));
                this.columnTriggerDependencyID.AutoIncrement = true;
                this.columnTriggerDependencyID.AllowDBNull = false;
                this.columnTriggerDependencyID.ReadOnly = true;
                this.columnTriggerDependencyID.Unique = true;
                this.columnTriggerID.AllowDBNull = false;
                this.columnDependsOnTriggerID.AllowDBNull = false;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TriggerDependenciesRow NewTriggerDependenciesRow() {
                return ((TriggerDependenciesRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new TriggerDependenciesRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(TriggerDependenciesRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.TriggerDependenciesRowChanged != null)) {
                    this.TriggerDependenciesRowChanged(this, new TriggerDependenciesRowChangeEvent(((TriggerDependenciesRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.TriggerDependenciesRowChanging != null)) {
                    this.TriggerDependenciesRowChanging(this, new TriggerDependenciesRowChangeEvent(((TriggerDependenciesRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.TriggerDependenciesRowDeleted != null)) {
                    this.TriggerDependenciesRowDeleted(this, new TriggerDependenciesRowChangeEvent(((TriggerDependenciesRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.TriggerDependenciesRowDeleting != null)) {
                    this.TriggerDependenciesRowDeleting(this, new TriggerDependenciesRowChangeEvent(((TriggerDependenciesRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveTriggerDependenciesRow(TriggerDependenciesRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                dsSurveyPoint ds = new dsSurveyPoint();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "TriggerDependenciesDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class InvocationPointsDataTable : global::System.Data.TypedTableBase<InvocationPointsRow> {
            
            private global::System.Data.DataColumn columnInvocationPointID;
            
            private global::System.Data.DataColumn columnInvocationPointName;
            
            private global::System.Data.DataColumn columnDescription;
            
            private global::System.Data.DataColumn columnNotes;
            
            private global::System.Data.DataColumn columnEventID;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public InvocationPointsDataTable() {
                this.TableName = "InvocationPoints";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal InvocationPointsDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected InvocationPointsDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn InvocationPointIDColumn {
                get {
                    return this.columnInvocationPointID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn InvocationPointNameColumn {
                get {
                    return this.columnInvocationPointName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DescriptionColumn {
                get {
                    return this.columnDescription;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn NotesColumn {
                get {
                    return this.columnNotes;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn EventIDColumn {
                get {
                    return this.columnEventID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public InvocationPointsRow this[int index] {
                get {
                    return ((InvocationPointsRow)(this.Rows[index]));
                }
            }
            
            public event InvocationPointsRowChangeEventHandler InvocationPointsRowChanging;
            
            public event InvocationPointsRowChangeEventHandler InvocationPointsRowChanged;
            
            public event InvocationPointsRowChangeEventHandler InvocationPointsRowDeleting;
            
            public event InvocationPointsRowChangeEventHandler InvocationPointsRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddInvocationPointsRow(InvocationPointsRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public InvocationPointsRow AddInvocationPointsRow(string InvocationPointName, string Description, string Notes, int EventID) {
                InvocationPointsRow rowInvocationPointsRow = ((InvocationPointsRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        null,
                        InvocationPointName,
                        Description,
                        Notes,
                        EventID};
                rowInvocationPointsRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowInvocationPointsRow);
                return rowInvocationPointsRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public InvocationPointsRow FindByInvocationPointID(int InvocationPointID) {
                return ((InvocationPointsRow)(this.Rows.Find(new object[] {
                            InvocationPointID})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                InvocationPointsDataTable cln = ((InvocationPointsDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new InvocationPointsDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnInvocationPointID = base.Columns["InvocationPointID"];
                this.columnInvocationPointName = base.Columns["InvocationPointName"];
                this.columnDescription = base.Columns["Description"];
                this.columnNotes = base.Columns["Notes"];
                this.columnEventID = base.Columns["EventID"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnInvocationPointID = new global::System.Data.DataColumn("InvocationPointID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnInvocationPointID);
                this.columnInvocationPointName = new global::System.Data.DataColumn("InvocationPointName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnInvocationPointName);
                this.columnDescription = new global::System.Data.DataColumn("Description", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDescription);
                this.columnNotes = new global::System.Data.DataColumn("Notes", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnNotes);
                this.columnEventID = new global::System.Data.DataColumn("EventID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnEventID);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("dsSurveyPointKey12", new global::System.Data.DataColumn[] {
                                this.columnInvocationPointID}, true));
                this.columnInvocationPointID.AutoIncrement = true;
                this.columnInvocationPointID.AllowDBNull = false;
                this.columnInvocationPointID.ReadOnly = true;
                this.columnInvocationPointID.Unique = true;
                this.columnInvocationPointName.AllowDBNull = false;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public InvocationPointsRow NewInvocationPointsRow() {
                return ((InvocationPointsRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new InvocationPointsRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(InvocationPointsRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.InvocationPointsRowChanged != null)) {
                    this.InvocationPointsRowChanged(this, new InvocationPointsRowChangeEvent(((InvocationPointsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.InvocationPointsRowChanging != null)) {
                    this.InvocationPointsRowChanging(this, new InvocationPointsRowChangeEvent(((InvocationPointsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.InvocationPointsRowDeleted != null)) {
                    this.InvocationPointsRowDeleted(this, new InvocationPointsRowChangeEvent(((InvocationPointsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.InvocationPointsRowDeleting != null)) {
                    this.InvocationPointsRowDeleting(this, new InvocationPointsRowChangeEvent(((InvocationPointsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveInvocationPointsRow(InvocationPointsRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                dsSurveyPoint ds = new dsSurveyPoint();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "InvocationPointsDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class TriggerTypesDataTable : global::System.Data.TypedTableBase<TriggerTypesRow> {
            
            private global::System.Data.DataColumn columnTriggerTypeID;
            
            private global::System.Data.DataColumn columnTriggerTypeName;
            
            private global::System.Data.DataColumn columnIntroCode;
            
            private global::System.Data.DataColumn columnExitCode;
            
            private global::System.Data.DataColumn columnDescription;
            
            private global::System.Data.DataColumn columnDevDescription;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TriggerTypesDataTable() {
                this.TableName = "TriggerTypes";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal TriggerTypesDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected TriggerTypesDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TriggerTypeIDColumn {
                get {
                    return this.columnTriggerTypeID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TriggerTypeNameColumn {
                get {
                    return this.columnTriggerTypeName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IntroCodeColumn {
                get {
                    return this.columnIntroCode;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ExitCodeColumn {
                get {
                    return this.columnExitCode;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DescriptionColumn {
                get {
                    return this.columnDescription;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DevDescriptionColumn {
                get {
                    return this.columnDevDescription;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TriggerTypesRow this[int index] {
                get {
                    return ((TriggerTypesRow)(this.Rows[index]));
                }
            }
            
            public event TriggerTypesRowChangeEventHandler TriggerTypesRowChanging;
            
            public event TriggerTypesRowChangeEventHandler TriggerTypesRowChanged;
            
            public event TriggerTypesRowChangeEventHandler TriggerTypesRowDeleting;
            
            public event TriggerTypesRowChangeEventHandler TriggerTypesRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddTriggerTypesRow(TriggerTypesRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TriggerTypesRow AddTriggerTypesRow(string TriggerTypeName, string IntroCode, string ExitCode, string Description, string DevDescription) {
                TriggerTypesRow rowTriggerTypesRow = ((TriggerTypesRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        null,
                        TriggerTypeName,
                        IntroCode,
                        ExitCode,
                        Description,
                        DevDescription};
                rowTriggerTypesRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowTriggerTypesRow);
                return rowTriggerTypesRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TriggerTypesRow FindByTriggerTypeID(int TriggerTypeID) {
                return ((TriggerTypesRow)(this.Rows.Find(new object[] {
                            TriggerTypeID})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                TriggerTypesDataTable cln = ((TriggerTypesDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new TriggerTypesDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnTriggerTypeID = base.Columns["TriggerTypeID"];
                this.columnTriggerTypeName = base.Columns["TriggerTypeName"];
                this.columnIntroCode = base.Columns["IntroCode"];
                this.columnExitCode = base.Columns["ExitCode"];
                this.columnDescription = base.Columns["Description"];
                this.columnDevDescription = base.Columns["DevDescription"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnTriggerTypeID = new global::System.Data.DataColumn("TriggerTypeID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTriggerTypeID);
                this.columnTriggerTypeName = new global::System.Data.DataColumn("TriggerTypeName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTriggerTypeName);
                this.columnIntroCode = new global::System.Data.DataColumn("IntroCode", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnIntroCode);
                this.columnExitCode = new global::System.Data.DataColumn("ExitCode", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnExitCode);
                this.columnDescription = new global::System.Data.DataColumn("Description", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDescription);
                this.columnDevDescription = new global::System.Data.DataColumn("DevDescription", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDevDescription);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("dsSurveyPointKey13", new global::System.Data.DataColumn[] {
                                this.columnTriggerTypeID}, true));
                this.columnTriggerTypeID.AutoIncrement = true;
                this.columnTriggerTypeID.AllowDBNull = false;
                this.columnTriggerTypeID.ReadOnly = true;
                this.columnTriggerTypeID.Unique = true;
                this.columnTriggerTypeName.AllowDBNull = false;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TriggerTypesRow NewTriggerTypesRow() {
                return ((TriggerTypesRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new TriggerTypesRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(TriggerTypesRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.TriggerTypesRowChanged != null)) {
                    this.TriggerTypesRowChanged(this, new TriggerTypesRowChangeEvent(((TriggerTypesRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.TriggerTypesRowChanging != null)) {
                    this.TriggerTypesRowChanging(this, new TriggerTypesRowChangeEvent(((TriggerTypesRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.TriggerTypesRowDeleted != null)) {
                    this.TriggerTypesRowDeleted(this, new TriggerTypesRowChangeEvent(((TriggerTypesRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.TriggerTypesRowDeleting != null)) {
                    this.TriggerTypesRowDeleting(this, new TriggerTypesRowChangeEvent(((TriggerTypesRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveTriggerTypesRow(TriggerTypesRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                dsSurveyPoint ds = new dsSurveyPoint();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "TriggerTypesDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class TriggersDataTable : global::System.Data.TypedTableBase<TriggersRow> {
            
            private global::System.Data.DataColumn columnTriggerID;
            
            private global::System.Data.DataColumn columnTriggerTypeID;
            
            private global::System.Data.DataColumn columnSurveyID;
            
            private global::System.Data.DataColumn columnTriggerName;
            
            private global::System.Data.DataColumn columnCriteriaID;
            
            private global::System.Data.DataColumn columnTheCode;
            
            private global::System.Data.DataColumn columnPerodicyDate;
            
            private global::System.Data.DataColumn columnPerodicyNextDate;
            
            private global::System.Data.DataColumn columnInvocationPointID;
            
            private global::System.Data.DataColumn columnTriggerTypeName;
            
            private global::System.Data.DataColumn columnSurveyName;
            
            private global::System.Data.DataColumn columnInvocationPointName;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TriggersDataTable() {
                this.TableName = "Triggers";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal TriggersDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected TriggersDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TriggerIDColumn {
                get {
                    return this.columnTriggerID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TriggerTypeIDColumn {
                get {
                    return this.columnTriggerTypeID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SurveyIDColumn {
                get {
                    return this.columnSurveyID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TriggerNameColumn {
                get {
                    return this.columnTriggerName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CriteriaIDColumn {
                get {
                    return this.columnCriteriaID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TheCodeColumn {
                get {
                    return this.columnTheCode;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PerodicyDateColumn {
                get {
                    return this.columnPerodicyDate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PerodicyNextDateColumn {
                get {
                    return this.columnPerodicyNextDate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn InvocationPointIDColumn {
                get {
                    return this.columnInvocationPointID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TriggerTypeNameColumn {
                get {
                    return this.columnTriggerTypeName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SurveyNameColumn {
                get {
                    return this.columnSurveyName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn InvocationPointNameColumn {
                get {
                    return this.columnInvocationPointName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TriggersRow this[int index] {
                get {
                    return ((TriggersRow)(this.Rows[index]));
                }
            }
            
            public event TriggersRowChangeEventHandler TriggersRowChanging;
            
            public event TriggersRowChangeEventHandler TriggersRowChanged;
            
            public event TriggersRowChangeEventHandler TriggersRowDeleting;
            
            public event TriggersRowChangeEventHandler TriggersRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddTriggersRow(TriggersRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TriggersRow AddTriggersRow(int TriggerTypeID, int SurveyID, string TriggerName, int CriteriaID, string TheCode, System.DateTime PerodicyDate, System.DateTime PerodicyNextDate, int InvocationPointID, string TriggerTypeName, string SurveyName, string InvocationPointName) {
                TriggersRow rowTriggersRow = ((TriggersRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        null,
                        TriggerTypeID,
                        SurveyID,
                        TriggerName,
                        CriteriaID,
                        TheCode,
                        PerodicyDate,
                        PerodicyNextDate,
                        InvocationPointID,
                        TriggerTypeName,
                        SurveyName,
                        InvocationPointName};
                rowTriggersRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowTriggersRow);
                return rowTriggersRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TriggersRow FindByTriggerID(int TriggerID) {
                return ((TriggersRow)(this.Rows.Find(new object[] {
                            TriggerID})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                TriggersDataTable cln = ((TriggersDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new TriggersDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnTriggerID = base.Columns["TriggerID"];
                this.columnTriggerTypeID = base.Columns["TriggerTypeID"];
                this.columnSurveyID = base.Columns["SurveyID"];
                this.columnTriggerName = base.Columns["TriggerName"];
                this.columnCriteriaID = base.Columns["CriteriaID"];
                this.columnTheCode = base.Columns["TheCode"];
                this.columnPerodicyDate = base.Columns["PerodicyDate"];
                this.columnPerodicyNextDate = base.Columns["PerodicyNextDate"];
                this.columnInvocationPointID = base.Columns["InvocationPointID"];
                this.columnTriggerTypeName = base.Columns["TriggerTypeName"];
                this.columnSurveyName = base.Columns["SurveyName"];
                this.columnInvocationPointName = base.Columns["InvocationPointName"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnTriggerID = new global::System.Data.DataColumn("TriggerID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTriggerID);
                this.columnTriggerTypeID = new global::System.Data.DataColumn("TriggerTypeID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTriggerTypeID);
                this.columnSurveyID = new global::System.Data.DataColumn("SurveyID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSurveyID);
                this.columnTriggerName = new global::System.Data.DataColumn("TriggerName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTriggerName);
                this.columnCriteriaID = new global::System.Data.DataColumn("CriteriaID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCriteriaID);
                this.columnTheCode = new global::System.Data.DataColumn("TheCode", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTheCode);
                this.columnPerodicyDate = new global::System.Data.DataColumn("PerodicyDate", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPerodicyDate);
                this.columnPerodicyNextDate = new global::System.Data.DataColumn("PerodicyNextDate", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPerodicyNextDate);
                this.columnInvocationPointID = new global::System.Data.DataColumn("InvocationPointID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnInvocationPointID);
                this.columnTriggerTypeName = new global::System.Data.DataColumn("TriggerTypeName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTriggerTypeName);
                this.columnSurveyName = new global::System.Data.DataColumn("SurveyName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSurveyName);
                this.columnInvocationPointName = new global::System.Data.DataColumn("InvocationPointName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnInvocationPointName);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("dsSurveyPointKey10", new global::System.Data.DataColumn[] {
                                this.columnTriggerID}, true));
                this.columnTriggerID.AutoIncrement = true;
                this.columnTriggerID.AllowDBNull = false;
                this.columnTriggerID.ReadOnly = true;
                this.columnTriggerID.Unique = true;
                this.columnTriggerTypeID.AllowDBNull = false;
                this.columnTriggerTypeName.AllowDBNull = false;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TriggersRow NewTriggersRow() {
                return ((TriggersRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new TriggersRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(TriggersRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.TriggersRowChanged != null)) {
                    this.TriggersRowChanged(this, new TriggersRowChangeEvent(((TriggersRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.TriggersRowChanging != null)) {
                    this.TriggersRowChanging(this, new TriggersRowChangeEvent(((TriggersRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.TriggersRowDeleted != null)) {
                    this.TriggersRowDeleted(this, new TriggersRowChangeEvent(((TriggersRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.TriggersRowDeleting != null)) {
                    this.TriggersRowDeleting(this, new TriggersRowChangeEvent(((TriggersRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveTriggersRow(TriggersRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                dsSurveyPoint ds = new dsSurveyPoint();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "TriggersDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class CriteriaDataTable : global::System.Data.TypedTableBase<CriteriaRow> {
            
            private global::System.Data.DataColumn columnCriteriaID;
            
            private global::System.Data.DataColumn columnCriteriaName;
            
            private global::System.Data.DataColumn columnSurveyID;
            
            private global::System.Data.DataColumn columnCriteriaTypeID;
            
            private global::System.Data.DataColumn columnAnswerCategoryID;
            
            private global::System.Data.DataColumn columnCriteriaDataTypeID;
            
            private global::System.Data.DataColumn columnParameterName;
            
            private global::System.Data.DataColumn columnTextValue;
            
            private global::System.Data.DataColumn columnReferenceCriteriaID;
            
            private global::System.Data.DataColumn columnReferenceCriteriaSequence;
            
            private global::System.Data.DataColumn columnFlag;
            
            private global::System.Data.DataColumn columnLvl;
            
            private global::System.Data.DataColumn columnHierarchy;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CriteriaDataTable() {
                this.TableName = "Criteria";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal CriteriaDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected CriteriaDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CriteriaIDColumn {
                get {
                    return this.columnCriteriaID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CriteriaNameColumn {
                get {
                    return this.columnCriteriaName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SurveyIDColumn {
                get {
                    return this.columnSurveyID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CriteriaTypeIDColumn {
                get {
                    return this.columnCriteriaTypeID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn AnswerCategoryIDColumn {
                get {
                    return this.columnAnswerCategoryID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CriteriaDataTypeIDColumn {
                get {
                    return this.columnCriteriaDataTypeID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ParameterNameColumn {
                get {
                    return this.columnParameterName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TextValueColumn {
                get {
                    return this.columnTextValue;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ReferenceCriteriaIDColumn {
                get {
                    return this.columnReferenceCriteriaID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ReferenceCriteriaSequenceColumn {
                get {
                    return this.columnReferenceCriteriaSequence;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn FlagColumn {
                get {
                    return this.columnFlag;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LvlColumn {
                get {
                    return this.columnLvl;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn HierarchyColumn {
                get {
                    return this.columnHierarchy;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CriteriaRow this[int index] {
                get {
                    return ((CriteriaRow)(this.Rows[index]));
                }
            }
            
            public event CriteriaRowChangeEventHandler CriteriaRowChanging;
            
            public event CriteriaRowChangeEventHandler CriteriaRowChanged;
            
            public event CriteriaRowChangeEventHandler CriteriaRowDeleting;
            
            public event CriteriaRowChangeEventHandler CriteriaRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddCriteriaRow(CriteriaRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CriteriaRow AddCriteriaRow(string CriteriaName, int SurveyID, int CriteriaTypeID, int AnswerCategoryID, short CriteriaDataTypeID, string ParameterName, string TextValue, int ReferenceCriteriaID, int ReferenceCriteriaSequence, int Flag, int Lvl, string Hierarchy) {
                CriteriaRow rowCriteriaRow = ((CriteriaRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        null,
                        CriteriaName,
                        SurveyID,
                        CriteriaTypeID,
                        AnswerCategoryID,
                        CriteriaDataTypeID,
                        ParameterName,
                        TextValue,
                        ReferenceCriteriaID,
                        ReferenceCriteriaSequence,
                        Flag,
                        Lvl,
                        Hierarchy};
                rowCriteriaRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowCriteriaRow);
                return rowCriteriaRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CriteriaRow FindByCriteriaID(int CriteriaID) {
                return ((CriteriaRow)(this.Rows.Find(new object[] {
                            CriteriaID})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                CriteriaDataTable cln = ((CriteriaDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new CriteriaDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnCriteriaID = base.Columns["CriteriaID"];
                this.columnCriteriaName = base.Columns["CriteriaName"];
                this.columnSurveyID = base.Columns["SurveyID"];
                this.columnCriteriaTypeID = base.Columns["CriteriaTypeID"];
                this.columnAnswerCategoryID = base.Columns["AnswerCategoryID"];
                this.columnCriteriaDataTypeID = base.Columns["CriteriaDataTypeID"];
                this.columnParameterName = base.Columns["ParameterName"];
                this.columnTextValue = base.Columns["TextValue"];
                this.columnReferenceCriteriaID = base.Columns["ReferenceCriteriaID"];
                this.columnReferenceCriteriaSequence = base.Columns["ReferenceCriteriaSequence"];
                this.columnFlag = base.Columns["Flag"];
                this.columnLvl = base.Columns["Lvl"];
                this.columnHierarchy = base.Columns["Hierarchy"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnCriteriaID = new global::System.Data.DataColumn("CriteriaID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCriteriaID);
                this.columnCriteriaName = new global::System.Data.DataColumn("CriteriaName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCriteriaName);
                this.columnSurveyID = new global::System.Data.DataColumn("SurveyID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSurveyID);
                this.columnCriteriaTypeID = new global::System.Data.DataColumn("CriteriaTypeID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCriteriaTypeID);
                this.columnAnswerCategoryID = new global::System.Data.DataColumn("AnswerCategoryID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnAnswerCategoryID);
                this.columnCriteriaDataTypeID = new global::System.Data.DataColumn("CriteriaDataTypeID", typeof(short), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCriteriaDataTypeID);
                this.columnParameterName = new global::System.Data.DataColumn("ParameterName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnParameterName);
                this.columnTextValue = new global::System.Data.DataColumn("TextValue", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTextValue);
                this.columnReferenceCriteriaID = new global::System.Data.DataColumn("ReferenceCriteriaID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnReferenceCriteriaID);
                this.columnReferenceCriteriaSequence = new global::System.Data.DataColumn("ReferenceCriteriaSequence", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnReferenceCriteriaSequence);
                this.columnFlag = new global::System.Data.DataColumn("Flag", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnFlag);
                this.columnLvl = new global::System.Data.DataColumn("Lvl", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLvl);
                this.columnHierarchy = new global::System.Data.DataColumn("Hierarchy", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnHierarchy);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("dsSurveyPointKey14", new global::System.Data.DataColumn[] {
                                this.columnCriteriaID}, true));
                this.columnCriteriaID.AutoIncrement = true;
                this.columnCriteriaID.AllowDBNull = false;
                this.columnCriteriaID.ReadOnly = true;
                this.columnCriteriaID.Unique = true;
                this.columnSurveyID.AllowDBNull = false;
                this.columnCriteriaTypeID.AllowDBNull = false;
                this.columnFlag.AllowDBNull = false;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CriteriaRow NewCriteriaRow() {
                return ((CriteriaRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new CriteriaRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(CriteriaRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.CriteriaRowChanged != null)) {
                    this.CriteriaRowChanged(this, new CriteriaRowChangeEvent(((CriteriaRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.CriteriaRowChanging != null)) {
                    this.CriteriaRowChanging(this, new CriteriaRowChangeEvent(((CriteriaRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.CriteriaRowDeleted != null)) {
                    this.CriteriaRowDeleted(this, new CriteriaRowChangeEvent(((CriteriaRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.CriteriaRowDeleting != null)) {
                    this.CriteriaRowDeleting(this, new CriteriaRowChangeEvent(((CriteriaRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveCriteriaRow(CriteriaRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                dsSurveyPoint ds = new dsSurveyPoint();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "CriteriaDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class CriteriaTypesDataTable : global::System.Data.TypedTableBase<CriteriaTypesRow> {
            
            private global::System.Data.DataColumn columnCriteriaTypeID;
            
            private global::System.Data.DataColumn columnName;
            
            private global::System.Data.DataColumn columnDescription;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CriteriaTypesDataTable() {
                this.TableName = "CriteriaTypes";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal CriteriaTypesDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected CriteriaTypesDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CriteriaTypeIDColumn {
                get {
                    return this.columnCriteriaTypeID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn NameColumn {
                get {
                    return this.columnName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DescriptionColumn {
                get {
                    return this.columnDescription;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CriteriaTypesRow this[int index] {
                get {
                    return ((CriteriaTypesRow)(this.Rows[index]));
                }
            }
            
            public event CriteriaTypesRowChangeEventHandler CriteriaTypesRowChanging;
            
            public event CriteriaTypesRowChangeEventHandler CriteriaTypesRowChanged;
            
            public event CriteriaTypesRowChangeEventHandler CriteriaTypesRowDeleting;
            
            public event CriteriaTypesRowChangeEventHandler CriteriaTypesRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddCriteriaTypesRow(CriteriaTypesRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CriteriaTypesRow AddCriteriaTypesRow(int CriteriaTypeID, string Name, string Description) {
                CriteriaTypesRow rowCriteriaTypesRow = ((CriteriaTypesRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        CriteriaTypeID,
                        Name,
                        Description};
                rowCriteriaTypesRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowCriteriaTypesRow);
                return rowCriteriaTypesRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CriteriaTypesRow FindByCriteriaTypeID(int CriteriaTypeID) {
                return ((CriteriaTypesRow)(this.Rows.Find(new object[] {
                            CriteriaTypeID})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                CriteriaTypesDataTable cln = ((CriteriaTypesDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new CriteriaTypesDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnCriteriaTypeID = base.Columns["CriteriaTypeID"];
                this.columnName = base.Columns["Name"];
                this.columnDescription = base.Columns["Description"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnCriteriaTypeID = new global::System.Data.DataColumn("CriteriaTypeID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCriteriaTypeID);
                this.columnName = new global::System.Data.DataColumn("Name", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnName);
                this.columnDescription = new global::System.Data.DataColumn("Description", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDescription);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("dsSurveyPointKey15", new global::System.Data.DataColumn[] {
                                this.columnCriteriaTypeID}, true));
                this.columnCriteriaTypeID.AllowDBNull = false;
                this.columnCriteriaTypeID.Unique = true;
                this.columnName.AllowDBNull = false;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CriteriaTypesRow NewCriteriaTypesRow() {
                return ((CriteriaTypesRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new CriteriaTypesRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(CriteriaTypesRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.CriteriaTypesRowChanged != null)) {
                    this.CriteriaTypesRowChanged(this, new CriteriaTypesRowChangeEvent(((CriteriaTypesRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.CriteriaTypesRowChanging != null)) {
                    this.CriteriaTypesRowChanging(this, new CriteriaTypesRowChangeEvent(((CriteriaTypesRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.CriteriaTypesRowDeleted != null)) {
                    this.CriteriaTypesRowDeleted(this, new CriteriaTypesRowChangeEvent(((CriteriaTypesRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.CriteriaTypesRowDeleting != null)) {
                    this.CriteriaTypesRowDeleting(this, new CriteriaTypesRowChangeEvent(((CriteriaTypesRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveCriteriaTypesRow(CriteriaTypesRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                dsSurveyPoint ds = new dsSurveyPoint();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "CriteriaTypesDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class SurveysRow : global::System.Data.DataRow {
            
            private SurveysDataTable tableSurveys;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal SurveysRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableSurveys = ((SurveysDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int SurveyID {
                get {
                    return ((int)(this[this.tableSurveys.SurveyIDColumn]));
                }
                set {
                    this[this.tableSurveys.SurveyIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Name {
                get {
                    return ((string)(this[this.tableSurveys.NameColumn]));
                }
                set {
                    this[this.tableSurveys.NameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Description {
                get {
                    return ((string)(this[this.tableSurveys.DescriptionColumn]));
                }
                set {
                    this[this.tableSurveys.DescriptionColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int CreatedByUserID {
                get {
                    return ((int)(this[this.tableSurveys.CreatedByUserIDColumn]));
                }
                set {
                    this[this.tableSurveys.CreatedByUserIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime CreatedOnDate {
                get {
                    return ((global::System.DateTime)(this[this.tableSurveys.CreatedOnDateColumn]));
                }
                set {
                    this[this.tableSurveys.CreatedOnDateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public byte Active {
                get {
                    return ((byte)(this[this.tableSurveys.ActiveColumn]));
                }
                set {
                    this[this.tableSurveys.ActiveColumn] = value;
                }
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class FileDefsRow : global::System.Data.DataRow {
            
            private FileDefsDataTable tableFileDefs;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal FileDefsRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableFileDefs = ((FileDefsDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int FileDefID {
                get {
                    return ((int)(this[this.tableFileDefs.FileDefIDColumn]));
                }
                set {
                    this[this.tableFileDefs.FileDefIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string FileDefName {
                get {
                    return ((string)(this[this.tableFileDefs.FileDefNameColumn]));
                }
                set {
                    this[this.tableFileDefs.FileDefNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string FileDefDescription {
                get {
                    return ((string)(this[this.tableFileDefs.FileDefDescriptionColumn]));
                }
                set {
                    this[this.tableFileDefs.FileDefDescriptionColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ClientID {
                get {
                    try {
                        return ((int)(this[this.tableFileDefs.ClientIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ClientID\' in table \'FileDefs\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableFileDefs.ClientIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int SurveyID {
                get {
                    try {
                        return ((int)(this[this.tableFileDefs.SurveyIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'SurveyID\' in table \'FileDefs\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableFileDefs.SurveyIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int FileDefTypeID {
                get {
                    return ((int)(this[this.tableFileDefs.FileDefTypeIDColumn]));
                }
                set {
                    this[this.tableFileDefs.FileDefTypeIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int FileTypeID {
                get {
                    return ((int)(this[this.tableFileDefs.FileTypeIDColumn]));
                }
                set {
                    this[this.tableFileDefs.FileTypeIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string FileDefDelimiter {
                get {
                    try {
                        return ((string)(this[this.tableFileDefs.FileDefDelimiterColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'FileDefDelimiter\' in table \'FileDefs\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableFileDefs.FileDefDelimiterColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsClientIDNull() {
                return this.IsNull(this.tableFileDefs.ClientIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetClientIDNull() {
                this[this.tableFileDefs.ClientIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSurveyIDNull() {
                return this.IsNull(this.tableFileDefs.SurveyIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSurveyIDNull() {
                this[this.tableFileDefs.SurveyIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsFileDefDelimiterNull() {
                return this.IsNull(this.tableFileDefs.FileDefDelimiterColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetFileDefDelimiterNull() {
                this[this.tableFileDefs.FileDefDelimiterColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class ClientsRow : global::System.Data.DataRow {
            
            private ClientsDataTable tableClients;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ClientsRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableClients = ((ClientsDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ClientID {
                get {
                    return ((int)(this[this.tableClients.ClientIDColumn]));
                }
                set {
                    this[this.tableClients.ClientIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Name {
                get {
                    return ((string)(this[this.tableClients.NameColumn]));
                }
                set {
                    this[this.tableClients.NameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Address1 {
                get {
                    return ((string)(this[this.tableClients.Address1Column]));
                }
                set {
                    this[this.tableClients.Address1Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Address2 {
                get {
                    return ((string)(this[this.tableClients.Address2Column]));
                }
                set {
                    this[this.tableClients.Address2Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string City {
                get {
                    return ((string)(this[this.tableClients.CityColumn]));
                }
                set {
                    this[this.tableClients.CityColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string State {
                get {
                    return ((string)(this[this.tableClients.StateColumn]));
                }
                set {
                    this[this.tableClients.StateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string PostalCode {
                get {
                    return ((string)(this[this.tableClients.PostalCodeColumn]));
                }
                set {
                    this[this.tableClients.PostalCodeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Telephone {
                get {
                    return ((string)(this[this.tableClients.TelephoneColumn]));
                }
                set {
                    this[this.tableClients.TelephoneColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Fax {
                get {
                    return ((string)(this[this.tableClients.FaxColumn]));
                }
                set {
                    this[this.tableClients.FaxColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public byte Active {
                get {
                    return ((byte)(this[this.tableClients.ActiveColumn]));
                }
                set {
                    this[this.tableClients.ActiveColumn] = value;
                }
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class ScriptsRow : global::System.Data.DataRow {
            
            private ScriptsDataTable tableScripts;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ScriptsRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableScripts = ((ScriptsDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ScriptID {
                get {
                    return ((int)(this[this.tableScripts.ScriptIDColumn]));
                }
                set {
                    this[this.tableScripts.ScriptIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int SurveyID {
                get {
                    return ((int)(this[this.tableScripts.SurveyIDColumn]));
                }
                set {
                    this[this.tableScripts.SurveyIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ScriptTypeID {
                get {
                    return ((int)(this[this.tableScripts.ScriptTypeIDColumn]));
                }
                set {
                    this[this.tableScripts.ScriptTypeIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Name {
                get {
                    return ((string)(this[this.tableScripts.NameColumn]));
                }
                set {
                    this[this.tableScripts.NameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Description {
                get {
                    return ((string)(this[this.tableScripts.DescriptionColumn]));
                }
                set {
                    this[this.tableScripts.DescriptionColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal CompletenessLevel {
                get {
                    return ((decimal)(this[this.tableScripts.CompletenessLevelColumn]));
                }
                set {
                    this[this.tableScripts.CompletenessLevelColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public byte FollowSkips {
                get {
                    return ((byte)(this[this.tableScripts.FollowSkipsColumn]));
                }
                set {
                    this[this.tableScripts.FollowSkipsColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public byte CalcCompleteness {
                get {
                    return ((byte)(this[this.tableScripts.CalcCompletenessColumn]));
                }
                set {
                    this[this.tableScripts.CalcCompletenessColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public byte DefaultScript {
                get {
                    return ((byte)(this[this.tableScripts.DefaultScriptColumn]));
                }
                set {
                    this[this.tableScripts.DefaultScriptColumn] = value;
                }
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class TemplatesRow : global::System.Data.DataRow {
            
            private TemplatesDataTable tableTemplates;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal TemplatesRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableTemplates = ((TemplatesDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int TemplateID {
                get {
                    return ((int)(this[this.tableTemplates.TemplateIDColumn]));
                }
                set {
                    this[this.tableTemplates.TemplateIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ClientID {
                get {
                    return ((int)(this[this.tableTemplates.ClientIDColumn]));
                }
                set {
                    this[this.tableTemplates.ClientIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ScriptID {
                get {
                    return ((int)(this[this.tableTemplates.ScriptIDColumn]));
                }
                set {
                    this[this.tableTemplates.ScriptIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int FileDefID {
                get {
                    try {
                        return ((int)(this[this.tableTemplates.FileDefIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'FileDefID\' in table \'Templates\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTemplates.FileDefIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Description {
                get {
                    try {
                        return ((string)(this[this.tableTemplates.DescriptionColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Description\' in table \'Templates\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTemplates.DescriptionColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Notes {
                get {
                    try {
                        return ((string)(this[this.tableTemplates.NotesColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Notes\' in table \'Templates\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTemplates.NotesColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ClientName {
                get {
                    try {
                        return ((string)(this[this.tableTemplates.ClientNameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ClientName\' in table \'Templates\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTemplates.ClientNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ScriptName {
                get {
                    try {
                        return ((string)(this[this.tableTemplates.ScriptNameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ScriptName\' in table \'Templates\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTemplates.ScriptNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int SurveyID {
                get {
                    try {
                        return ((int)(this[this.tableTemplates.SurveyIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'SurveyID\' in table \'Templates\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTemplates.SurveyIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string SurveyName {
                get {
                    try {
                        return ((string)(this[this.tableTemplates.SurveyNameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'SurveyName\' in table \'Templates\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTemplates.SurveyNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string FileDefName {
                get {
                    try {
                        return ((string)(this[this.tableTemplates.FileDefNameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'FileDefName\' in table \'Templates\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTemplates.FileDefNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsFileDefIDNull() {
                return this.IsNull(this.tableTemplates.FileDefIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetFileDefIDNull() {
                this[this.tableTemplates.FileDefIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDescriptionNull() {
                return this.IsNull(this.tableTemplates.DescriptionColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDescriptionNull() {
                this[this.tableTemplates.DescriptionColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsNotesNull() {
                return this.IsNull(this.tableTemplates.NotesColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetNotesNull() {
                this[this.tableTemplates.NotesColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsClientNameNull() {
                return this.IsNull(this.tableTemplates.ClientNameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetClientNameNull() {
                this[this.tableTemplates.ClientNameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsScriptNameNull() {
                return this.IsNull(this.tableTemplates.ScriptNameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetScriptNameNull() {
                this[this.tableTemplates.ScriptNameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSurveyIDNull() {
                return this.IsNull(this.tableTemplates.SurveyIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSurveyIDNull() {
                this[this.tableTemplates.SurveyIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSurveyNameNull() {
                return this.IsNull(this.tableTemplates.SurveyNameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSurveyNameNull() {
                this[this.tableTemplates.SurveyNameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsFileDefNameNull() {
                return this.IsNull(this.tableTemplates.FileDefNameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetFileDefNameNull() {
                this[this.tableTemplates.FileDefNameColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class FileDefColumnsRow : global::System.Data.DataRow {
            
            private FileDefColumnsDataTable tableFileDefColumns;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal FileDefColumnsRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableFileDefColumns = ((FileDefColumnsDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int FileDefColumnID {
                get {
                    return ((int)(this[this.tableFileDefColumns.FileDefColumnIDColumn]));
                }
                set {
                    this[this.tableFileDefColumns.FileDefColumnIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int FileDefID {
                get {
                    return ((int)(this[this.tableFileDefColumns.FileDefIDColumn]));
                }
                set {
                    this[this.tableFileDefColumns.FileDefIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ColumnName {
                get {
                    return ((string)(this[this.tableFileDefColumns.ColumnNameColumn]));
                }
                set {
                    this[this.tableFileDefColumns.ColumnNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int DisplayOrder {
                get {
                    return ((int)(this[this.tableFileDefColumns.DisplayOrderColumn]));
                }
                set {
                    this[this.tableFileDefColumns.DisplayOrderColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Width {
                get {
                    try {
                        return ((int)(this[this.tableFileDefColumns.WidthColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Width\' in table \'FileDefColumns\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableFileDefColumns.WidthColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string FormatString {
                get {
                    try {
                        return ((string)(this[this.tableFileDefColumns.FormatStringColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'FormatString\' in table \'FileDefColumns\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableFileDefColumns.FormatStringColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsWidthNull() {
                return this.IsNull(this.tableFileDefColumns.WidthColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetWidthNull() {
                this[this.tableFileDefColumns.WidthColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsFormatStringNull() {
                return this.IsNull(this.tableFileDefColumns.FormatStringColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetFormatStringNull() {
                this[this.tableFileDefColumns.FormatStringColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class RespondentsRow : global::System.Data.DataRow {
            
            private RespondentsDataTable tableRespondents;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal RespondentsRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableRespondents = ((RespondentsDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int RespondentID {
                get {
                    return ((int)(this[this.tableRespondents.RespondentIDColumn]));
                }
                set {
                    this[this.tableRespondents.RespondentIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int SurveyInstanceID {
                get {
                    return ((int)(this[this.tableRespondents.SurveyInstanceIDColumn]));
                }
                set {
                    this[this.tableRespondents.SurveyInstanceIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string FirstName {
                get {
                    try {
                        return ((string)(this[this.tableRespondents.FirstNameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'FirstName\' in table \'Respondents\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableRespondents.FirstNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string MiddleInitial {
                get {
                    try {
                        return ((string)(this[this.tableRespondents.MiddleInitialColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'MiddleInitial\' in table \'Respondents\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableRespondents.MiddleInitialColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string LastName {
                get {
                    return ((string)(this[this.tableRespondents.LastNameColumn]));
                }
                set {
                    this[this.tableRespondents.LastNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Address1 {
                get {
                    try {
                        return ((string)(this[this.tableRespondents.Address1Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Address1\' in table \'Respondents\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableRespondents.Address1Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Address2 {
                get {
                    try {
                        return ((string)(this[this.tableRespondents.Address2Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Address2\' in table \'Respondents\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableRespondents.Address2Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string City {
                get {
                    try {
                        return ((string)(this[this.tableRespondents.CityColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'City\' in table \'Respondents\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableRespondents.CityColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string State {
                get {
                    try {
                        return ((string)(this[this.tableRespondents.StateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'State\' in table \'Respondents\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableRespondents.StateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string PostalCode {
                get {
                    try {
                        return ((string)(this[this.tableRespondents.PostalCodeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'PostalCode\' in table \'Respondents\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableRespondents.PostalCodeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string TelephoneDay {
                get {
                    try {
                        return ((string)(this[this.tableRespondents.TelephoneDayColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'TelephoneDay\' in table \'Respondents\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableRespondents.TelephoneDayColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string TelephoneEvening {
                get {
                    try {
                        return ((string)(this[this.tableRespondents.TelephoneEveningColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'TelephoneEvening\' in table \'Respondents\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableRespondents.TelephoneEveningColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Email {
                get {
                    try {
                        return ((string)(this[this.tableRespondents.EmailColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Email\' in table \'Respondents\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableRespondents.EmailColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime DOB {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableRespondents.DOBColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'DOB\' in table \'Respondents\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableRespondents.DOBColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Gender {
                get {
                    try {
                        return ((string)(this[this.tableRespondents.GenderColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Gender\' in table \'Respondents\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableRespondents.GenderColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ClientRespondentID {
                get {
                    try {
                        return ((string)(this[this.tableRespondents.ClientRespondentIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ClientRespondentID\' in table \'Respondents\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableRespondents.ClientRespondentIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string SSN {
                get {
                    try {
                        return ((string)(this[this.tableRespondents.SSNColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'SSN\' in table \'Respondents\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableRespondents.SSNColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int BatchID {
                get {
                    try {
                        return ((int)(this[this.tableRespondents.BatchIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'BatchID\' in table \'Respondents\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableRespondents.BatchIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public byte MailingSeedFlag {
                get {
                    try {
                        return ((byte)(this[this.tableRespondents.MailingSeedFlagColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'MailingSeedFlag\' in table \'Respondents\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableRespondents.MailingSeedFlagColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int CallsMade {
                get {
                    return ((int)(this[this.tableRespondents.CallsMadeColumn]));
                }
                set {
                    this[this.tableRespondents.CallsMadeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Final {
                get {
                    return ((int)(this[this.tableRespondents.FinalColumn]));
                }
                set {
                    this[this.tableRespondents.FinalColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime NextContact {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableRespondents.NextContactColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'NextContact\' in table \'Respondents\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableRespondents.NextContactColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string PostalCodeExt {
                get {
                    try {
                        return ((string)(this[this.tableRespondents.PostalCodeExtColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'PostalCodeExt\' in table \'Respondents\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableRespondents.PostalCodeExtColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string RespondentKey {
                get {
                    try {
                        return ((string)(this[this.tableRespondents.RespondentKeyColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'RespondentKey\' in table \'Respondents\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableRespondents.RespondentKeyColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsFirstNameNull() {
                return this.IsNull(this.tableRespondents.FirstNameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetFirstNameNull() {
                this[this.tableRespondents.FirstNameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsMiddleInitialNull() {
                return this.IsNull(this.tableRespondents.MiddleInitialColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetMiddleInitialNull() {
                this[this.tableRespondents.MiddleInitialColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsAddress1Null() {
                return this.IsNull(this.tableRespondents.Address1Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetAddress1Null() {
                this[this.tableRespondents.Address1Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsAddress2Null() {
                return this.IsNull(this.tableRespondents.Address2Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetAddress2Null() {
                this[this.tableRespondents.Address2Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCityNull() {
                return this.IsNull(this.tableRespondents.CityColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCityNull() {
                this[this.tableRespondents.CityColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsStateNull() {
                return this.IsNull(this.tableRespondents.StateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetStateNull() {
                this[this.tableRespondents.StateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPostalCodeNull() {
                return this.IsNull(this.tableRespondents.PostalCodeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPostalCodeNull() {
                this[this.tableRespondents.PostalCodeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTelephoneDayNull() {
                return this.IsNull(this.tableRespondents.TelephoneDayColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTelephoneDayNull() {
                this[this.tableRespondents.TelephoneDayColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTelephoneEveningNull() {
                return this.IsNull(this.tableRespondents.TelephoneEveningColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTelephoneEveningNull() {
                this[this.tableRespondents.TelephoneEveningColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsEmailNull() {
                return this.IsNull(this.tableRespondents.EmailColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetEmailNull() {
                this[this.tableRespondents.EmailColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDOBNull() {
                return this.IsNull(this.tableRespondents.DOBColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDOBNull() {
                this[this.tableRespondents.DOBColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsGenderNull() {
                return this.IsNull(this.tableRespondents.GenderColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetGenderNull() {
                this[this.tableRespondents.GenderColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsClientRespondentIDNull() {
                return this.IsNull(this.tableRespondents.ClientRespondentIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetClientRespondentIDNull() {
                this[this.tableRespondents.ClientRespondentIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSSNNull() {
                return this.IsNull(this.tableRespondents.SSNColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSSNNull() {
                this[this.tableRespondents.SSNColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsBatchIDNull() {
                return this.IsNull(this.tableRespondents.BatchIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetBatchIDNull() {
                this[this.tableRespondents.BatchIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsMailingSeedFlagNull() {
                return this.IsNull(this.tableRespondents.MailingSeedFlagColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetMailingSeedFlagNull() {
                this[this.tableRespondents.MailingSeedFlagColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsNextContactNull() {
                return this.IsNull(this.tableRespondents.NextContactColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetNextContactNull() {
                this[this.tableRespondents.NextContactColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPostalCodeExtNull() {
                return this.IsNull(this.tableRespondents.PostalCodeExtColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPostalCodeExtNull() {
                this[this.tableRespondents.PostalCodeExtColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsRespondentKeyNull() {
                return this.IsNull(this.tableRespondents.RespondentKeyColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetRespondentKeyNull() {
                this[this.tableRespondents.RespondentKeyColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class RespondentPropertiesRow : global::System.Data.DataRow {
            
            private RespondentPropertiesDataTable tableRespondentProperties;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal RespondentPropertiesRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableRespondentProperties = ((RespondentPropertiesDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int RespondentPropertyID {
                get {
                    return ((int)(this[this.tableRespondentProperties.RespondentPropertyIDColumn]));
                }
                set {
                    this[this.tableRespondentProperties.RespondentPropertyIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int RespondentID {
                get {
                    return ((int)(this[this.tableRespondentProperties.RespondentIDColumn]));
                }
                set {
                    this[this.tableRespondentProperties.RespondentIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string PropertyName {
                get {
                    return ((string)(this[this.tableRespondentProperties.PropertyNameColumn]));
                }
                set {
                    this[this.tableRespondentProperties.PropertyNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string PropertyValue {
                get {
                    return ((string)(this[this.tableRespondentProperties.PropertyValueColumn]));
                }
                set {
                    this[this.tableRespondentProperties.PropertyValueColumn] = value;
                }
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class SurveyInstancesRow : global::System.Data.DataRow {
            
            private SurveyInstancesDataTable tableSurveyInstances;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal SurveyInstancesRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableSurveyInstances = ((SurveyInstancesDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int SurveyInstanceID {
                get {
                    return ((int)(this[this.tableSurveyInstances.SurveyInstanceIDColumn]));
                }
                set {
                    this[this.tableSurveyInstances.SurveyInstanceIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ClientID {
                get {
                    return ((int)(this[this.tableSurveyInstances.ClientIDColumn]));
                }
                set {
                    this[this.tableSurveyInstances.ClientIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int SurveyID {
                get {
                    return ((int)(this[this.tableSurveyInstances.SurveyIDColumn]));
                }
                set {
                    this[this.tableSurveyInstances.SurveyIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ClientName {
                get {
                    return ((string)(this[this.tableSurveyInstances.ClientNameColumn]));
                }
                set {
                    this[this.tableSurveyInstances.ClientNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string SurveyName {
                get {
                    return ((string)(this[this.tableSurveyInstances.SurveyNameColumn]));
                }
                set {
                    this[this.tableSurveyInstances.SurveyNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string SurveyInstanceName {
                get {
                    return ((string)(this[this.tableSurveyInstances.SurveyInstanceNameColumn]));
                }
                set {
                    this[this.tableSurveyInstances.SurveyInstanceNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Description {
                get {
                    try {
                        return ((string)(this[this.tableSurveyInstances.DescriptionColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Description\' in table \'SurveyInstances\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSurveyInstances.DescriptionColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public byte Active {
                get {
                    return ((byte)(this[this.tableSurveyInstances.ActiveColumn]));
                }
                set {
                    this[this.tableSurveyInstances.ActiveColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDescriptionNull() {
                return this.IsNull(this.tableSurveyInstances.DescriptionColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDescriptionNull() {
                this[this.tableSurveyInstances.DescriptionColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class TriggerDependenciesRow : global::System.Data.DataRow {
            
            private TriggerDependenciesDataTable tableTriggerDependencies;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal TriggerDependenciesRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableTriggerDependencies = ((TriggerDependenciesDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int TriggerDependencyID {
                get {
                    return ((int)(this[this.tableTriggerDependencies.TriggerDependencyIDColumn]));
                }
                set {
                    this[this.tableTriggerDependencies.TriggerDependencyIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int TriggerID {
                get {
                    return ((int)(this[this.tableTriggerDependencies.TriggerIDColumn]));
                }
                set {
                    this[this.tableTriggerDependencies.TriggerIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int DependsOnTriggerID {
                get {
                    return ((int)(this[this.tableTriggerDependencies.DependsOnTriggerIDColumn]));
                }
                set {
                    this[this.tableTriggerDependencies.DependsOnTriggerIDColumn] = value;
                }
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class InvocationPointsRow : global::System.Data.DataRow {
            
            private InvocationPointsDataTable tableInvocationPoints;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal InvocationPointsRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableInvocationPoints = ((InvocationPointsDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int InvocationPointID {
                get {
                    return ((int)(this[this.tableInvocationPoints.InvocationPointIDColumn]));
                }
                set {
                    this[this.tableInvocationPoints.InvocationPointIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string InvocationPointName {
                get {
                    return ((string)(this[this.tableInvocationPoints.InvocationPointNameColumn]));
                }
                set {
                    this[this.tableInvocationPoints.InvocationPointNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Description {
                get {
                    try {
                        return ((string)(this[this.tableInvocationPoints.DescriptionColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Description\' in table \'InvocationPoints\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableInvocationPoints.DescriptionColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Notes {
                get {
                    try {
                        return ((string)(this[this.tableInvocationPoints.NotesColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Notes\' in table \'InvocationPoints\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableInvocationPoints.NotesColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int EventID {
                get {
                    try {
                        return ((int)(this[this.tableInvocationPoints.EventIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'EventID\' in table \'InvocationPoints\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableInvocationPoints.EventIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDescriptionNull() {
                return this.IsNull(this.tableInvocationPoints.DescriptionColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDescriptionNull() {
                this[this.tableInvocationPoints.DescriptionColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsNotesNull() {
                return this.IsNull(this.tableInvocationPoints.NotesColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetNotesNull() {
                this[this.tableInvocationPoints.NotesColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsEventIDNull() {
                return this.IsNull(this.tableInvocationPoints.EventIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetEventIDNull() {
                this[this.tableInvocationPoints.EventIDColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class TriggerTypesRow : global::System.Data.DataRow {
            
            private TriggerTypesDataTable tableTriggerTypes;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal TriggerTypesRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableTriggerTypes = ((TriggerTypesDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int TriggerTypeID {
                get {
                    return ((int)(this[this.tableTriggerTypes.TriggerTypeIDColumn]));
                }
                set {
                    this[this.tableTriggerTypes.TriggerTypeIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string TriggerTypeName {
                get {
                    return ((string)(this[this.tableTriggerTypes.TriggerTypeNameColumn]));
                }
                set {
                    this[this.tableTriggerTypes.TriggerTypeNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string IntroCode {
                get {
                    try {
                        return ((string)(this[this.tableTriggerTypes.IntroCodeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'IntroCode\' in table \'TriggerTypes\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTriggerTypes.IntroCodeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ExitCode {
                get {
                    try {
                        return ((string)(this[this.tableTriggerTypes.ExitCodeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ExitCode\' in table \'TriggerTypes\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTriggerTypes.ExitCodeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Description {
                get {
                    try {
                        return ((string)(this[this.tableTriggerTypes.DescriptionColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Description\' in table \'TriggerTypes\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTriggerTypes.DescriptionColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string DevDescription {
                get {
                    try {
                        return ((string)(this[this.tableTriggerTypes.DevDescriptionColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'DevDescription\' in table \'TriggerTypes\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTriggerTypes.DevDescriptionColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsIntroCodeNull() {
                return this.IsNull(this.tableTriggerTypes.IntroCodeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetIntroCodeNull() {
                this[this.tableTriggerTypes.IntroCodeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsExitCodeNull() {
                return this.IsNull(this.tableTriggerTypes.ExitCodeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetExitCodeNull() {
                this[this.tableTriggerTypes.ExitCodeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDescriptionNull() {
                return this.IsNull(this.tableTriggerTypes.DescriptionColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDescriptionNull() {
                this[this.tableTriggerTypes.DescriptionColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDevDescriptionNull() {
                return this.IsNull(this.tableTriggerTypes.DevDescriptionColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDevDescriptionNull() {
                this[this.tableTriggerTypes.DevDescriptionColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class TriggersRow : global::System.Data.DataRow {
            
            private TriggersDataTable tableTriggers;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal TriggersRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableTriggers = ((TriggersDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int TriggerID {
                get {
                    return ((int)(this[this.tableTriggers.TriggerIDColumn]));
                }
                set {
                    this[this.tableTriggers.TriggerIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int TriggerTypeID {
                get {
                    return ((int)(this[this.tableTriggers.TriggerTypeIDColumn]));
                }
                set {
                    this[this.tableTriggers.TriggerTypeIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int SurveyID {
                get {
                    try {
                        return ((int)(this[this.tableTriggers.SurveyIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'SurveyID\' in table \'Triggers\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTriggers.SurveyIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string TriggerName {
                get {
                    try {
                        return ((string)(this[this.tableTriggers.TriggerNameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'TriggerName\' in table \'Triggers\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTriggers.TriggerNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int CriteriaID {
                get {
                    try {
                        return ((int)(this[this.tableTriggers.CriteriaIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'CriteriaID\' in table \'Triggers\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTriggers.CriteriaIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string TheCode {
                get {
                    try {
                        return ((string)(this[this.tableTriggers.TheCodeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'TheCode\' in table \'Triggers\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTriggers.TheCodeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime PerodicyDate {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableTriggers.PerodicyDateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'PerodicyDate\' in table \'Triggers\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTriggers.PerodicyDateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime PerodicyNextDate {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableTriggers.PerodicyNextDateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'PerodicyNextDate\' in table \'Triggers\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTriggers.PerodicyNextDateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int InvocationPointID {
                get {
                    try {
                        return ((int)(this[this.tableTriggers.InvocationPointIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'InvocationPointID\' in table \'Triggers\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTriggers.InvocationPointIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string TriggerTypeName {
                get {
                    return ((string)(this[this.tableTriggers.TriggerTypeNameColumn]));
                }
                set {
                    this[this.tableTriggers.TriggerTypeNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string SurveyName {
                get {
                    try {
                        return ((string)(this[this.tableTriggers.SurveyNameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'SurveyName\' in table \'Triggers\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTriggers.SurveyNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string InvocationPointName {
                get {
                    try {
                        return ((string)(this[this.tableTriggers.InvocationPointNameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'InvocationPointName\' in table \'Triggers\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTriggers.InvocationPointNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSurveyIDNull() {
                return this.IsNull(this.tableTriggers.SurveyIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSurveyIDNull() {
                this[this.tableTriggers.SurveyIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTriggerNameNull() {
                return this.IsNull(this.tableTriggers.TriggerNameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTriggerNameNull() {
                this[this.tableTriggers.TriggerNameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCriteriaIDNull() {
                return this.IsNull(this.tableTriggers.CriteriaIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCriteriaIDNull() {
                this[this.tableTriggers.CriteriaIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTheCodeNull() {
                return this.IsNull(this.tableTriggers.TheCodeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTheCodeNull() {
                this[this.tableTriggers.TheCodeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPerodicyDateNull() {
                return this.IsNull(this.tableTriggers.PerodicyDateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPerodicyDateNull() {
                this[this.tableTriggers.PerodicyDateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPerodicyNextDateNull() {
                return this.IsNull(this.tableTriggers.PerodicyNextDateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPerodicyNextDateNull() {
                this[this.tableTriggers.PerodicyNextDateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsInvocationPointIDNull() {
                return this.IsNull(this.tableTriggers.InvocationPointIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetInvocationPointIDNull() {
                this[this.tableTriggers.InvocationPointIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSurveyNameNull() {
                return this.IsNull(this.tableTriggers.SurveyNameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSurveyNameNull() {
                this[this.tableTriggers.SurveyNameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsInvocationPointNameNull() {
                return this.IsNull(this.tableTriggers.InvocationPointNameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetInvocationPointNameNull() {
                this[this.tableTriggers.InvocationPointNameColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class CriteriaRow : global::System.Data.DataRow {
            
            private CriteriaDataTable tableCriteria;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal CriteriaRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableCriteria = ((CriteriaDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int CriteriaID {
                get {
                    return ((int)(this[this.tableCriteria.CriteriaIDColumn]));
                }
                set {
                    this[this.tableCriteria.CriteriaIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string CriteriaName {
                get {
                    try {
                        return ((string)(this[this.tableCriteria.CriteriaNameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'CriteriaName\' in table \'Criteria\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableCriteria.CriteriaNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int SurveyID {
                get {
                    return ((int)(this[this.tableCriteria.SurveyIDColumn]));
                }
                set {
                    this[this.tableCriteria.SurveyIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int CriteriaTypeID {
                get {
                    return ((int)(this[this.tableCriteria.CriteriaTypeIDColumn]));
                }
                set {
                    this[this.tableCriteria.CriteriaTypeIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int AnswerCategoryID {
                get {
                    try {
                        return ((int)(this[this.tableCriteria.AnswerCategoryIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'AnswerCategoryID\' in table \'Criteria\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableCriteria.AnswerCategoryIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public short CriteriaDataTypeID {
                get {
                    try {
                        return ((short)(this[this.tableCriteria.CriteriaDataTypeIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'CriteriaDataTypeID\' in table \'Criteria\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableCriteria.CriteriaDataTypeIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ParameterName {
                get {
                    try {
                        return ((string)(this[this.tableCriteria.ParameterNameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ParameterName\' in table \'Criteria\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableCriteria.ParameterNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string TextValue {
                get {
                    try {
                        return ((string)(this[this.tableCriteria.TextValueColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'TextValue\' in table \'Criteria\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableCriteria.TextValueColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ReferenceCriteriaID {
                get {
                    try {
                        return ((int)(this[this.tableCriteria.ReferenceCriteriaIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ReferenceCriteriaID\' in table \'Criteria\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableCriteria.ReferenceCriteriaIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ReferenceCriteriaSequence {
                get {
                    try {
                        return ((int)(this[this.tableCriteria.ReferenceCriteriaSequenceColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ReferenceCriteriaSequence\' in table \'Criteria\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableCriteria.ReferenceCriteriaSequenceColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Flag {
                get {
                    return ((int)(this[this.tableCriteria.FlagColumn]));
                }
                set {
                    this[this.tableCriteria.FlagColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Lvl {
                get {
                    try {
                        return ((int)(this[this.tableCriteria.LvlColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Lvl\' in table \'Criteria\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableCriteria.LvlColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Hierarchy {
                get {
                    try {
                        return ((string)(this[this.tableCriteria.HierarchyColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Hierarchy\' in table \'Criteria\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableCriteria.HierarchyColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCriteriaNameNull() {
                return this.IsNull(this.tableCriteria.CriteriaNameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCriteriaNameNull() {
                this[this.tableCriteria.CriteriaNameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsAnswerCategoryIDNull() {
                return this.IsNull(this.tableCriteria.AnswerCategoryIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetAnswerCategoryIDNull() {
                this[this.tableCriteria.AnswerCategoryIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCriteriaDataTypeIDNull() {
                return this.IsNull(this.tableCriteria.CriteriaDataTypeIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCriteriaDataTypeIDNull() {
                this[this.tableCriteria.CriteriaDataTypeIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsParameterNameNull() {
                return this.IsNull(this.tableCriteria.ParameterNameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetParameterNameNull() {
                this[this.tableCriteria.ParameterNameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTextValueNull() {
                return this.IsNull(this.tableCriteria.TextValueColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTextValueNull() {
                this[this.tableCriteria.TextValueColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsReferenceCriteriaIDNull() {
                return this.IsNull(this.tableCriteria.ReferenceCriteriaIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetReferenceCriteriaIDNull() {
                this[this.tableCriteria.ReferenceCriteriaIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsReferenceCriteriaSequenceNull() {
                return this.IsNull(this.tableCriteria.ReferenceCriteriaSequenceColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetReferenceCriteriaSequenceNull() {
                this[this.tableCriteria.ReferenceCriteriaSequenceColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsLvlNull() {
                return this.IsNull(this.tableCriteria.LvlColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetLvlNull() {
                this[this.tableCriteria.LvlColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsHierarchyNull() {
                return this.IsNull(this.tableCriteria.HierarchyColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetHierarchyNull() {
                this[this.tableCriteria.HierarchyColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class CriteriaTypesRow : global::System.Data.DataRow {
            
            private CriteriaTypesDataTable tableCriteriaTypes;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal CriteriaTypesRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableCriteriaTypes = ((CriteriaTypesDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int CriteriaTypeID {
                get {
                    return ((int)(this[this.tableCriteriaTypes.CriteriaTypeIDColumn]));
                }
                set {
                    this[this.tableCriteriaTypes.CriteriaTypeIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Name {
                get {
                    return ((string)(this[this.tableCriteriaTypes.NameColumn]));
                }
                set {
                    this[this.tableCriteriaTypes.NameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Description {
                get {
                    try {
                        return ((string)(this[this.tableCriteriaTypes.DescriptionColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Description\' in table \'CriteriaTypes\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableCriteriaTypes.DescriptionColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDescriptionNull() {
                return this.IsNull(this.tableCriteriaTypes.DescriptionColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDescriptionNull() {
                this[this.tableCriteriaTypes.DescriptionColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class SurveysRowChangeEvent : global::System.EventArgs {
            
            private SurveysRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SurveysRowChangeEvent(SurveysRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SurveysRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class FileDefsRowChangeEvent : global::System.EventArgs {
            
            private FileDefsRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public FileDefsRowChangeEvent(FileDefsRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public FileDefsRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class ClientsRowChangeEvent : global::System.EventArgs {
            
            private ClientsRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ClientsRowChangeEvent(ClientsRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ClientsRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class ScriptsRowChangeEvent : global::System.EventArgs {
            
            private ScriptsRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ScriptsRowChangeEvent(ScriptsRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ScriptsRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class TemplatesRowChangeEvent : global::System.EventArgs {
            
            private TemplatesRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TemplatesRowChangeEvent(TemplatesRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TemplatesRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class FileDefColumnsRowChangeEvent : global::System.EventArgs {
            
            private FileDefColumnsRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public FileDefColumnsRowChangeEvent(FileDefColumnsRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public FileDefColumnsRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class RespondentsRowChangeEvent : global::System.EventArgs {
            
            private RespondentsRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public RespondentsRowChangeEvent(RespondentsRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public RespondentsRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class RespondentPropertiesRowChangeEvent : global::System.EventArgs {
            
            private RespondentPropertiesRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public RespondentPropertiesRowChangeEvent(RespondentPropertiesRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public RespondentPropertiesRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class SurveyInstancesRowChangeEvent : global::System.EventArgs {
            
            private SurveyInstancesRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SurveyInstancesRowChangeEvent(SurveyInstancesRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SurveyInstancesRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class TriggerDependenciesRowChangeEvent : global::System.EventArgs {
            
            private TriggerDependenciesRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TriggerDependenciesRowChangeEvent(TriggerDependenciesRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TriggerDependenciesRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class InvocationPointsRowChangeEvent : global::System.EventArgs {
            
            private InvocationPointsRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public InvocationPointsRowChangeEvent(InvocationPointsRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public InvocationPointsRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class TriggerTypesRowChangeEvent : global::System.EventArgs {
            
            private TriggerTypesRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TriggerTypesRowChangeEvent(TriggerTypesRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TriggerTypesRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class TriggersRowChangeEvent : global::System.EventArgs {
            
            private TriggersRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TriggersRowChangeEvent(TriggersRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TriggersRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class CriteriaRowChangeEvent : global::System.EventArgs {
            
            private CriteriaRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CriteriaRowChangeEvent(CriteriaRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CriteriaRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class CriteriaTypesRowChangeEvent : global::System.EventArgs {
            
            private CriteriaTypesRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CriteriaTypesRowChangeEvent(CriteriaTypesRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CriteriaTypesRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}

#pragma warning restore 1591
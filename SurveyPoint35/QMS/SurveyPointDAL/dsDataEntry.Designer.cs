//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.1433
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#pragma warning disable 1591

namespace SurveyPointDAL {
    
    
    /// <summary>
    ///Represents a strongly typed in-memory cache of data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.Serializable()]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema")]
    [global::System.Xml.Serialization.XmlRootAttribute("dsDataEntry")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")]
    public partial class dsDataEntry : global::System.Data.DataSet {
        
        private EventLogDataTable tableEventLog;
        
        private RespondentPropertiesDataTable tableRespondentProperties;
        
        private RespondentsDataTable tableRespondents;
        
        private ScriptsDataTable tableScripts;
        
        private ScriptScreenCategoriesDataTable tableScriptScreenCategories;
        
        private ScriptScreensDataTable tableScriptScreens;
        
        private SurveyInstancesDataTable tableSurveyInstances;
        
        private SurveysDataTable tableSurveys;
        
        private ResponsesDataTable tableResponses;
        
        private ClientsDataTable tableClients;
        
        private global::System.Data.SchemaSerializationMode _schemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public dsDataEntry() {
            this.BeginInit();
            this.InitClass();
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            base.Relations.CollectionChanged += schemaChangedHandler;
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected dsDataEntry(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                base(info, context, false) {
            if ((this.IsBinarySerialized(info, context) == true)) {
                this.InitVars(false);
                global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler1 = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
                this.Tables.CollectionChanged += schemaChangedHandler1;
                this.Relations.CollectionChanged += schemaChangedHandler1;
                return;
            }
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((this.DetermineSchemaSerializationMode(info, context) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
                if ((ds.Tables["EventLog"] != null)) {
                    base.Tables.Add(new EventLogDataTable(ds.Tables["EventLog"]));
                }
                if ((ds.Tables["RespondentProperties"] != null)) {
                    base.Tables.Add(new RespondentPropertiesDataTable(ds.Tables["RespondentProperties"]));
                }
                if ((ds.Tables["Respondents"] != null)) {
                    base.Tables.Add(new RespondentsDataTable(ds.Tables["Respondents"]));
                }
                if ((ds.Tables["Scripts"] != null)) {
                    base.Tables.Add(new ScriptsDataTable(ds.Tables["Scripts"]));
                }
                if ((ds.Tables["ScriptScreenCategories"] != null)) {
                    base.Tables.Add(new ScriptScreenCategoriesDataTable(ds.Tables["ScriptScreenCategories"]));
                }
                if ((ds.Tables["ScriptScreens"] != null)) {
                    base.Tables.Add(new ScriptScreensDataTable(ds.Tables["ScriptScreens"]));
                }
                if ((ds.Tables["SurveyInstances"] != null)) {
                    base.Tables.Add(new SurveyInstancesDataTable(ds.Tables["SurveyInstances"]));
                }
                if ((ds.Tables["Surveys"] != null)) {
                    base.Tables.Add(new SurveysDataTable(ds.Tables["Surveys"]));
                }
                if ((ds.Tables["Responses"] != null)) {
                    base.Tables.Add(new ResponsesDataTable(ds.Tables["Responses"]));
                }
                if ((ds.Tables["Clients"] != null)) {
                    base.Tables.Add(new ClientsDataTable(ds.Tables["Clients"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
            }
            this.GetSerializationData(info, context);
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public EventLogDataTable EventLog {
            get {
                return this.tableEventLog;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public RespondentPropertiesDataTable RespondentProperties {
            get {
                return this.tableRespondentProperties;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public RespondentsDataTable Respondents {
            get {
                return this.tableRespondents;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public ScriptsDataTable Scripts {
            get {
                return this.tableScripts;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public ScriptScreenCategoriesDataTable ScriptScreenCategories {
            get {
                return this.tableScriptScreenCategories;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public ScriptScreensDataTable ScriptScreens {
            get {
                return this.tableScriptScreens;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public SurveyInstancesDataTable SurveyInstances {
            get {
                return this.tableSurveyInstances;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public SurveysDataTable Surveys {
            get {
                return this.tableSurveys;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public ResponsesDataTable Responses {
            get {
                return this.tableResponses;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public ClientsDataTable Clients {
            get {
                return this.tableClients;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.BrowsableAttribute(true)]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Visible)]
        public override global::System.Data.SchemaSerializationMode SchemaSerializationMode {
            get {
                return this._schemaSerializationMode;
            }
            set {
                this._schemaSerializationMode = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataTableCollection Tables {
            get {
                return base.Tables;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataRelationCollection Relations {
            get {
                return base.Relations;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void InitializeDerivedDataSet() {
            this.BeginInit();
            this.InitClass();
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public override global::System.Data.DataSet Clone() {
            dsDataEntry cln = ((dsDataEntry)(base.Clone()));
            cln.InitVars();
            cln.SchemaSerializationMode = this.SchemaSerializationMode;
            return cln;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void ReadXmlSerializable(global::System.Xml.XmlReader reader) {
            if ((this.DetermineSchemaSerializationMode(reader) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                this.Reset();
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXml(reader);
                if ((ds.Tables["EventLog"] != null)) {
                    base.Tables.Add(new EventLogDataTable(ds.Tables["EventLog"]));
                }
                if ((ds.Tables["RespondentProperties"] != null)) {
                    base.Tables.Add(new RespondentPropertiesDataTable(ds.Tables["RespondentProperties"]));
                }
                if ((ds.Tables["Respondents"] != null)) {
                    base.Tables.Add(new RespondentsDataTable(ds.Tables["Respondents"]));
                }
                if ((ds.Tables["Scripts"] != null)) {
                    base.Tables.Add(new ScriptsDataTable(ds.Tables["Scripts"]));
                }
                if ((ds.Tables["ScriptScreenCategories"] != null)) {
                    base.Tables.Add(new ScriptScreenCategoriesDataTable(ds.Tables["ScriptScreenCategories"]));
                }
                if ((ds.Tables["ScriptScreens"] != null)) {
                    base.Tables.Add(new ScriptScreensDataTable(ds.Tables["ScriptScreens"]));
                }
                if ((ds.Tables["SurveyInstances"] != null)) {
                    base.Tables.Add(new SurveyInstancesDataTable(ds.Tables["SurveyInstances"]));
                }
                if ((ds.Tables["Surveys"] != null)) {
                    base.Tables.Add(new SurveysDataTable(ds.Tables["Surveys"]));
                }
                if ((ds.Tables["Responses"] != null)) {
                    base.Tables.Add(new ResponsesDataTable(ds.Tables["Responses"]));
                }
                if ((ds.Tables["Clients"] != null)) {
                    base.Tables.Add(new ClientsDataTable(ds.Tables["Clients"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXml(reader);
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override global::System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            global::System.IO.MemoryStream stream = new global::System.IO.MemoryStream();
            this.WriteXmlSchema(new global::System.Xml.XmlTextWriter(stream, null));
            stream.Position = 0;
            return global::System.Xml.Schema.XmlSchema.Read(new global::System.Xml.XmlTextReader(stream), null);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars() {
            this.InitVars(true);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars(bool initTable) {
            this.tableEventLog = ((EventLogDataTable)(base.Tables["EventLog"]));
            if ((initTable == true)) {
                if ((this.tableEventLog != null)) {
                    this.tableEventLog.InitVars();
                }
            }
            this.tableRespondentProperties = ((RespondentPropertiesDataTable)(base.Tables["RespondentProperties"]));
            if ((initTable == true)) {
                if ((this.tableRespondentProperties != null)) {
                    this.tableRespondentProperties.InitVars();
                }
            }
            this.tableRespondents = ((RespondentsDataTable)(base.Tables["Respondents"]));
            if ((initTable == true)) {
                if ((this.tableRespondents != null)) {
                    this.tableRespondents.InitVars();
                }
            }
            this.tableScripts = ((ScriptsDataTable)(base.Tables["Scripts"]));
            if ((initTable == true)) {
                if ((this.tableScripts != null)) {
                    this.tableScripts.InitVars();
                }
            }
            this.tableScriptScreenCategories = ((ScriptScreenCategoriesDataTable)(base.Tables["ScriptScreenCategories"]));
            if ((initTable == true)) {
                if ((this.tableScriptScreenCategories != null)) {
                    this.tableScriptScreenCategories.InitVars();
                }
            }
            this.tableScriptScreens = ((ScriptScreensDataTable)(base.Tables["ScriptScreens"]));
            if ((initTable == true)) {
                if ((this.tableScriptScreens != null)) {
                    this.tableScriptScreens.InitVars();
                }
            }
            this.tableSurveyInstances = ((SurveyInstancesDataTable)(base.Tables["SurveyInstances"]));
            if ((initTable == true)) {
                if ((this.tableSurveyInstances != null)) {
                    this.tableSurveyInstances.InitVars();
                }
            }
            this.tableSurveys = ((SurveysDataTable)(base.Tables["Surveys"]));
            if ((initTable == true)) {
                if ((this.tableSurveys != null)) {
                    this.tableSurveys.InitVars();
                }
            }
            this.tableResponses = ((ResponsesDataTable)(base.Tables["Responses"]));
            if ((initTable == true)) {
                if ((this.tableResponses != null)) {
                    this.tableResponses.InitVars();
                }
            }
            this.tableClients = ((ClientsDataTable)(base.Tables["Clients"]));
            if ((initTable == true)) {
                if ((this.tableClients != null)) {
                    this.tableClients.InitVars();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitClass() {
            this.DataSetName = "dsDataEntry";
            this.Prefix = "";
            this.Namespace = "http://tempuri.org/dsDataEntry.xsd";
            this.EnforceConstraints = true;
            this.SchemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
            this.tableEventLog = new EventLogDataTable();
            base.Tables.Add(this.tableEventLog);
            this.tableRespondentProperties = new RespondentPropertiesDataTable();
            base.Tables.Add(this.tableRespondentProperties);
            this.tableRespondents = new RespondentsDataTable();
            base.Tables.Add(this.tableRespondents);
            this.tableScripts = new ScriptsDataTable();
            base.Tables.Add(this.tableScripts);
            this.tableScriptScreenCategories = new ScriptScreenCategoriesDataTable();
            base.Tables.Add(this.tableScriptScreenCategories);
            this.tableScriptScreens = new ScriptScreensDataTable();
            base.Tables.Add(this.tableScriptScreens);
            this.tableSurveyInstances = new SurveyInstancesDataTable();
            base.Tables.Add(this.tableSurveyInstances);
            this.tableSurveys = new SurveysDataTable();
            base.Tables.Add(this.tableSurveys);
            this.tableResponses = new ResponsesDataTable();
            base.Tables.Add(this.tableResponses);
            this.tableClients = new ClientsDataTable();
            base.Tables.Add(this.tableClients);
            global::System.Data.ForeignKeyConstraint fkc;
            fkc = new global::System.Data.ForeignKeyConstraint("ScriptScreensScriptScreenCategories", new global::System.Data.DataColumn[] {
                        this.tableScriptScreens.ScriptScreenIDColumn}, new global::System.Data.DataColumn[] {
                        this.tableScriptScreenCategories.ScriptScreenIDColumn});
            this.tableScriptScreenCategories.Constraints.Add(fkc);
            fkc.AcceptRejectRule = global::System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = global::System.Data.Rule.Cascade;
            fkc.UpdateRule = global::System.Data.Rule.Cascade;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeEventLog() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeRespondentProperties() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeRespondents() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeScripts() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeScriptScreenCategories() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeScriptScreens() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeSurveyInstances() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeSurveys() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeResponses() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeClients() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void SchemaChanged(object sender, global::System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == global::System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedDataSetSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
            dsDataEntry ds = new dsDataEntry();
            global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
            global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
            global::System.Xml.Schema.XmlSchemaAny any = new global::System.Xml.Schema.XmlSchemaAny();
            any.Namespace = ds.Namespace;
            sequence.Items.Add(any);
            type.Particle = sequence;
            global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
            if (xs.Contains(dsSchema.TargetNamespace)) {
                global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                try {
                    global::System.Xml.Schema.XmlSchema schema = null;
                    dsSchema.Write(s1);
                    for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                        schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                        s2.SetLength(0);
                        schema.Write(s2);
                        if ((s1.Length == s2.Length)) {
                            s1.Position = 0;
                            s2.Position = 0;
                            for (; ((s1.Position != s1.Length) 
                                        && (s1.ReadByte() == s2.ReadByte())); ) {
                                ;
                            }
                            if ((s1.Position == s1.Length)) {
                                return type;
                            }
                        }
                    }
                }
                finally {
                    if ((s1 != null)) {
                        s1.Close();
                    }
                    if ((s2 != null)) {
                        s2.Close();
                    }
                }
            }
            xs.Add(dsSchema);
            return type;
        }
        
        public delegate void EventLogRowChangeEventHandler(object sender, EventLogRowChangeEvent e);
        
        public delegate void RespondentPropertiesRowChangeEventHandler(object sender, RespondentPropertiesRowChangeEvent e);
        
        public delegate void RespondentsRowChangeEventHandler(object sender, RespondentsRowChangeEvent e);
        
        public delegate void ScriptsRowChangeEventHandler(object sender, ScriptsRowChangeEvent e);
        
        public delegate void ScriptScreenCategoriesRowChangeEventHandler(object sender, ScriptScreenCategoriesRowChangeEvent e);
        
        public delegate void ScriptScreensRowChangeEventHandler(object sender, ScriptScreensRowChangeEvent e);
        
        public delegate void SurveyInstancesRowChangeEventHandler(object sender, SurveyInstancesRowChangeEvent e);
        
        public delegate void SurveysRowChangeEventHandler(object sender, SurveysRowChangeEvent e);
        
        public delegate void ResponsesRowChangeEventHandler(object sender, ResponsesRowChangeEvent e);
        
        public delegate void ClientsRowChangeEventHandler(object sender, ClientsRowChangeEvent e);
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class EventLogDataTable : global::System.Data.TypedTableBase<EventLogRow> {
            
            private global::System.Data.DataColumn columnEventLogID;
            
            private global::System.Data.DataColumn columnEventDate;
            
            private global::System.Data.DataColumn columnEventID;
            
            private global::System.Data.DataColumn columnUserID;
            
            private global::System.Data.DataColumn columnRespondentID;
            
            private global::System.Data.DataColumn columnEventParameters;
            
            private global::System.Data.DataColumn columnSurveyInstanceID;
            
            private global::System.Data.DataColumn columnSurveyID;
            
            private global::System.Data.DataColumn columnClientID;
            
            private global::System.Data.DataColumn columnEventTypeID;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public EventLogDataTable() {
                this.TableName = "EventLog";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal EventLogDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected EventLogDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn EventLogIDColumn {
                get {
                    return this.columnEventLogID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn EventDateColumn {
                get {
                    return this.columnEventDate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn EventIDColumn {
                get {
                    return this.columnEventID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn UserIDColumn {
                get {
                    return this.columnUserID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn RespondentIDColumn {
                get {
                    return this.columnRespondentID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn EventParametersColumn {
                get {
                    return this.columnEventParameters;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SurveyInstanceIDColumn {
                get {
                    return this.columnSurveyInstanceID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SurveyIDColumn {
                get {
                    return this.columnSurveyID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ClientIDColumn {
                get {
                    return this.columnClientID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn EventTypeIDColumn {
                get {
                    return this.columnEventTypeID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public EventLogRow this[int index] {
                get {
                    return ((EventLogRow)(this.Rows[index]));
                }
            }
            
            public event EventLogRowChangeEventHandler EventLogRowChanging;
            
            public event EventLogRowChangeEventHandler EventLogRowChanged;
            
            public event EventLogRowChangeEventHandler EventLogRowDeleting;
            
            public event EventLogRowChangeEventHandler EventLogRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddEventLogRow(EventLogRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public EventLogRow AddEventLogRow(System.DateTime EventDate, int EventID, int UserID, int RespondentID, string EventParameters, int SurveyInstanceID, int SurveyID, int ClientID, int EventTypeID) {
                EventLogRow rowEventLogRow = ((EventLogRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        null,
                        EventDate,
                        EventID,
                        UserID,
                        RespondentID,
                        EventParameters,
                        SurveyInstanceID,
                        SurveyID,
                        ClientID,
                        EventTypeID};
                rowEventLogRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowEventLogRow);
                return rowEventLogRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public EventLogRow FindByEventLogID(int EventLogID) {
                return ((EventLogRow)(this.Rows.Find(new object[] {
                            EventLogID})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                EventLogDataTable cln = ((EventLogDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new EventLogDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnEventLogID = base.Columns["EventLogID"];
                this.columnEventDate = base.Columns["EventDate"];
                this.columnEventID = base.Columns["EventID"];
                this.columnUserID = base.Columns["UserID"];
                this.columnRespondentID = base.Columns["RespondentID"];
                this.columnEventParameters = base.Columns["EventParameters"];
                this.columnSurveyInstanceID = base.Columns["SurveyInstanceID"];
                this.columnSurveyID = base.Columns["SurveyID"];
                this.columnClientID = base.Columns["ClientID"];
                this.columnEventTypeID = base.Columns["EventTypeID"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnEventLogID = new global::System.Data.DataColumn("EventLogID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnEventLogID);
                this.columnEventDate = new global::System.Data.DataColumn("EventDate", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnEventDate);
                this.columnEventID = new global::System.Data.DataColumn("EventID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnEventID);
                this.columnUserID = new global::System.Data.DataColumn("UserID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnUserID);
                this.columnRespondentID = new global::System.Data.DataColumn("RespondentID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnRespondentID);
                this.columnEventParameters = new global::System.Data.DataColumn("EventParameters", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnEventParameters);
                this.columnSurveyInstanceID = new global::System.Data.DataColumn("SurveyInstanceID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSurveyInstanceID);
                this.columnSurveyID = new global::System.Data.DataColumn("SurveyID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSurveyID);
                this.columnClientID = new global::System.Data.DataColumn("ClientID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnClientID);
                this.columnEventTypeID = new global::System.Data.DataColumn("EventTypeID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnEventTypeID);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("dsDataEntryKey1", new global::System.Data.DataColumn[] {
                                this.columnEventLogID}, true));
                this.columnEventLogID.AutoIncrement = true;
                this.columnEventLogID.AllowDBNull = false;
                this.columnEventLogID.ReadOnly = true;
                this.columnEventLogID.Unique = true;
                this.columnEventDate.AllowDBNull = false;
                this.columnEventID.AllowDBNull = false;
                this.columnUserID.AllowDBNull = false;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public EventLogRow NewEventLogRow() {
                return ((EventLogRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new EventLogRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(EventLogRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.EventLogRowChanged != null)) {
                    this.EventLogRowChanged(this, new EventLogRowChangeEvent(((EventLogRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.EventLogRowChanging != null)) {
                    this.EventLogRowChanging(this, new EventLogRowChangeEvent(((EventLogRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.EventLogRowDeleted != null)) {
                    this.EventLogRowDeleted(this, new EventLogRowChangeEvent(((EventLogRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.EventLogRowDeleting != null)) {
                    this.EventLogRowDeleting(this, new EventLogRowChangeEvent(((EventLogRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveEventLogRow(EventLogRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                dsDataEntry ds = new dsDataEntry();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "EventLogDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class RespondentPropertiesDataTable : global::System.Data.TypedTableBase<RespondentPropertiesRow> {
            
            private global::System.Data.DataColumn columnRespondentPropertyID;
            
            private global::System.Data.DataColumn columnRespondentID;
            
            private global::System.Data.DataColumn columnPropertyName;
            
            private global::System.Data.DataColumn columnPropertyValue;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public RespondentPropertiesDataTable() {
                this.TableName = "RespondentProperties";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal RespondentPropertiesDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected RespondentPropertiesDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn RespondentPropertyIDColumn {
                get {
                    return this.columnRespondentPropertyID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn RespondentIDColumn {
                get {
                    return this.columnRespondentID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PropertyNameColumn {
                get {
                    return this.columnPropertyName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PropertyValueColumn {
                get {
                    return this.columnPropertyValue;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public RespondentPropertiesRow this[int index] {
                get {
                    return ((RespondentPropertiesRow)(this.Rows[index]));
                }
            }
            
            public event RespondentPropertiesRowChangeEventHandler RespondentPropertiesRowChanging;
            
            public event RespondentPropertiesRowChangeEventHandler RespondentPropertiesRowChanged;
            
            public event RespondentPropertiesRowChangeEventHandler RespondentPropertiesRowDeleting;
            
            public event RespondentPropertiesRowChangeEventHandler RespondentPropertiesRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddRespondentPropertiesRow(RespondentPropertiesRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public RespondentPropertiesRow AddRespondentPropertiesRow(int RespondentID, string PropertyName, string PropertyValue) {
                RespondentPropertiesRow rowRespondentPropertiesRow = ((RespondentPropertiesRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        null,
                        RespondentID,
                        PropertyName,
                        PropertyValue};
                rowRespondentPropertiesRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowRespondentPropertiesRow);
                return rowRespondentPropertiesRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public RespondentPropertiesRow FindByRespondentPropertyID(int RespondentPropertyID) {
                return ((RespondentPropertiesRow)(this.Rows.Find(new object[] {
                            RespondentPropertyID})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                RespondentPropertiesDataTable cln = ((RespondentPropertiesDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new RespondentPropertiesDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnRespondentPropertyID = base.Columns["RespondentPropertyID"];
                this.columnRespondentID = base.Columns["RespondentID"];
                this.columnPropertyName = base.Columns["PropertyName"];
                this.columnPropertyValue = base.Columns["PropertyValue"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnRespondentPropertyID = new global::System.Data.DataColumn("RespondentPropertyID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnRespondentPropertyID);
                this.columnRespondentID = new global::System.Data.DataColumn("RespondentID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnRespondentID);
                this.columnPropertyName = new global::System.Data.DataColumn("PropertyName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPropertyName);
                this.columnPropertyValue = new global::System.Data.DataColumn("PropertyValue", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPropertyValue);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("dsDataEntryKey2", new global::System.Data.DataColumn[] {
                                this.columnRespondentPropertyID}, true));
                this.columnRespondentPropertyID.AutoIncrement = true;
                this.columnRespondentPropertyID.AllowDBNull = false;
                this.columnRespondentPropertyID.ReadOnly = true;
                this.columnRespondentPropertyID.Unique = true;
                this.columnRespondentID.AllowDBNull = false;
                this.columnPropertyName.AllowDBNull = false;
                this.columnPropertyValue.AllowDBNull = false;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public RespondentPropertiesRow NewRespondentPropertiesRow() {
                return ((RespondentPropertiesRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new RespondentPropertiesRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(RespondentPropertiesRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.RespondentPropertiesRowChanged != null)) {
                    this.RespondentPropertiesRowChanged(this, new RespondentPropertiesRowChangeEvent(((RespondentPropertiesRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.RespondentPropertiesRowChanging != null)) {
                    this.RespondentPropertiesRowChanging(this, new RespondentPropertiesRowChangeEvent(((RespondentPropertiesRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.RespondentPropertiesRowDeleted != null)) {
                    this.RespondentPropertiesRowDeleted(this, new RespondentPropertiesRowChangeEvent(((RespondentPropertiesRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.RespondentPropertiesRowDeleting != null)) {
                    this.RespondentPropertiesRowDeleting(this, new RespondentPropertiesRowChangeEvent(((RespondentPropertiesRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveRespondentPropertiesRow(RespondentPropertiesRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                dsDataEntry ds = new dsDataEntry();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "RespondentPropertiesDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class RespondentsDataTable : global::System.Data.TypedTableBase<RespondentsRow> {
            
            private global::System.Data.DataColumn columnRespondentID;
            
            private global::System.Data.DataColumn columnSurveyInstanceID;
            
            private global::System.Data.DataColumn columnFirstName;
            
            private global::System.Data.DataColumn columnMiddleInitial;
            
            private global::System.Data.DataColumn columnLastName;
            
            private global::System.Data.DataColumn columnAddress1;
            
            private global::System.Data.DataColumn columnAddress2;
            
            private global::System.Data.DataColumn columnCity;
            
            private global::System.Data.DataColumn columnState;
            
            private global::System.Data.DataColumn columnPostalCode;
            
            private global::System.Data.DataColumn columnTelephoneDay;
            
            private global::System.Data.DataColumn columnTelephoneEvening;
            
            private global::System.Data.DataColumn columnEmail;
            
            private global::System.Data.DataColumn columnDOB;
            
            private global::System.Data.DataColumn columnGender;
            
            private global::System.Data.DataColumn columnClientRespondentID;
            
            private global::System.Data.DataColumn columnSSN;
            
            private global::System.Data.DataColumn columnBatchID;
            
            private global::System.Data.DataColumn columnMailingSeedFlag;
            
            private global::System.Data.DataColumn columnCallsMade;
            
            private global::System.Data.DataColumn columnFinal;
            
            private global::System.Data.DataColumn columnNextContact;
            
            private global::System.Data.DataColumn columnPostalCodeExt;
            
            private global::System.Data.DataColumn columnRespondentKey;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public RespondentsDataTable() {
                this.TableName = "Respondents";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal RespondentsDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected RespondentsDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn RespondentIDColumn {
                get {
                    return this.columnRespondentID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SurveyInstanceIDColumn {
                get {
                    return this.columnSurveyInstanceID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn FirstNameColumn {
                get {
                    return this.columnFirstName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn MiddleInitialColumn {
                get {
                    return this.columnMiddleInitial;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LastNameColumn {
                get {
                    return this.columnLastName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Address1Column {
                get {
                    return this.columnAddress1;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Address2Column {
                get {
                    return this.columnAddress2;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CityColumn {
                get {
                    return this.columnCity;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn StateColumn {
                get {
                    return this.columnState;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PostalCodeColumn {
                get {
                    return this.columnPostalCode;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TelephoneDayColumn {
                get {
                    return this.columnTelephoneDay;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TelephoneEveningColumn {
                get {
                    return this.columnTelephoneEvening;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn EmailColumn {
                get {
                    return this.columnEmail;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DOBColumn {
                get {
                    return this.columnDOB;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn GenderColumn {
                get {
                    return this.columnGender;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ClientRespondentIDColumn {
                get {
                    return this.columnClientRespondentID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SSNColumn {
                get {
                    return this.columnSSN;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn BatchIDColumn {
                get {
                    return this.columnBatchID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn MailingSeedFlagColumn {
                get {
                    return this.columnMailingSeedFlag;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CallsMadeColumn {
                get {
                    return this.columnCallsMade;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn FinalColumn {
                get {
                    return this.columnFinal;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn NextContactColumn {
                get {
                    return this.columnNextContact;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PostalCodeExtColumn {
                get {
                    return this.columnPostalCodeExt;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn RespondentKeyColumn {
                get {
                    return this.columnRespondentKey;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public RespondentsRow this[int index] {
                get {
                    return ((RespondentsRow)(this.Rows[index]));
                }
            }
            
            public event RespondentsRowChangeEventHandler RespondentsRowChanging;
            
            public event RespondentsRowChangeEventHandler RespondentsRowChanged;
            
            public event RespondentsRowChangeEventHandler RespondentsRowDeleting;
            
            public event RespondentsRowChangeEventHandler RespondentsRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddRespondentsRow(RespondentsRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public RespondentsRow AddRespondentsRow(
                        int SurveyInstanceID, 
                        string FirstName, 
                        string MiddleInitial, 
                        string LastName, 
                        string Address1, 
                        string Address2, 
                        string City, 
                        string State, 
                        string PostalCode, 
                        string TelephoneDay, 
                        string TelephoneEvening, 
                        string Email, 
                        System.DateTime DOB, 
                        string Gender, 
                        string ClientRespondentID, 
                        string SSN, 
                        int BatchID, 
                        byte MailingSeedFlag, 
                        int CallsMade, 
                        int Final, 
                        System.DateTime NextContact, 
                        string PostalCodeExt, 
                        string RespondentKey) {
                RespondentsRow rowRespondentsRow = ((RespondentsRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        null,
                        SurveyInstanceID,
                        FirstName,
                        MiddleInitial,
                        LastName,
                        Address1,
                        Address2,
                        City,
                        State,
                        PostalCode,
                        TelephoneDay,
                        TelephoneEvening,
                        Email,
                        DOB,
                        Gender,
                        ClientRespondentID,
                        SSN,
                        BatchID,
                        MailingSeedFlag,
                        CallsMade,
                        Final,
                        NextContact,
                        PostalCodeExt,
                        RespondentKey};
                rowRespondentsRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowRespondentsRow);
                return rowRespondentsRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public RespondentsRow FindByRespondentID(int RespondentID) {
                return ((RespondentsRow)(this.Rows.Find(new object[] {
                            RespondentID})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                RespondentsDataTable cln = ((RespondentsDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new RespondentsDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnRespondentID = base.Columns["RespondentID"];
                this.columnSurveyInstanceID = base.Columns["SurveyInstanceID"];
                this.columnFirstName = base.Columns["FirstName"];
                this.columnMiddleInitial = base.Columns["MiddleInitial"];
                this.columnLastName = base.Columns["LastName"];
                this.columnAddress1 = base.Columns["Address1"];
                this.columnAddress2 = base.Columns["Address2"];
                this.columnCity = base.Columns["City"];
                this.columnState = base.Columns["State"];
                this.columnPostalCode = base.Columns["PostalCode"];
                this.columnTelephoneDay = base.Columns["TelephoneDay"];
                this.columnTelephoneEvening = base.Columns["TelephoneEvening"];
                this.columnEmail = base.Columns["Email"];
                this.columnDOB = base.Columns["DOB"];
                this.columnGender = base.Columns["Gender"];
                this.columnClientRespondentID = base.Columns["ClientRespondentID"];
                this.columnSSN = base.Columns["SSN"];
                this.columnBatchID = base.Columns["BatchID"];
                this.columnMailingSeedFlag = base.Columns["MailingSeedFlag"];
                this.columnCallsMade = base.Columns["CallsMade"];
                this.columnFinal = base.Columns["Final"];
                this.columnNextContact = base.Columns["NextContact"];
                this.columnPostalCodeExt = base.Columns["PostalCodeExt"];
                this.columnRespondentKey = base.Columns["RespondentKey"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnRespondentID = new global::System.Data.DataColumn("RespondentID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnRespondentID);
                this.columnSurveyInstanceID = new global::System.Data.DataColumn("SurveyInstanceID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSurveyInstanceID);
                this.columnFirstName = new global::System.Data.DataColumn("FirstName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnFirstName);
                this.columnMiddleInitial = new global::System.Data.DataColumn("MiddleInitial", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMiddleInitial);
                this.columnLastName = new global::System.Data.DataColumn("LastName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLastName);
                this.columnAddress1 = new global::System.Data.DataColumn("Address1", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnAddress1);
                this.columnAddress2 = new global::System.Data.DataColumn("Address2", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnAddress2);
                this.columnCity = new global::System.Data.DataColumn("City", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCity);
                this.columnState = new global::System.Data.DataColumn("State", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnState);
                this.columnPostalCode = new global::System.Data.DataColumn("PostalCode", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPostalCode);
                this.columnTelephoneDay = new global::System.Data.DataColumn("TelephoneDay", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTelephoneDay);
                this.columnTelephoneEvening = new global::System.Data.DataColumn("TelephoneEvening", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTelephoneEvening);
                this.columnEmail = new global::System.Data.DataColumn("Email", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnEmail);
                this.columnDOB = new global::System.Data.DataColumn("DOB", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDOB);
                this.columnGender = new global::System.Data.DataColumn("Gender", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnGender);
                this.columnClientRespondentID = new global::System.Data.DataColumn("ClientRespondentID", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnClientRespondentID);
                this.columnSSN = new global::System.Data.DataColumn("SSN", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSSN);
                this.columnBatchID = new global::System.Data.DataColumn("BatchID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnBatchID);
                this.columnMailingSeedFlag = new global::System.Data.DataColumn("MailingSeedFlag", typeof(byte), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMailingSeedFlag);
                this.columnCallsMade = new global::System.Data.DataColumn("CallsMade", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCallsMade);
                this.columnFinal = new global::System.Data.DataColumn("Final", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnFinal);
                this.columnNextContact = new global::System.Data.DataColumn("NextContact", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnNextContact);
                this.columnPostalCodeExt = new global::System.Data.DataColumn("PostalCodeExt", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPostalCodeExt);
                this.columnRespondentKey = new global::System.Data.DataColumn("RespondentKey", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnRespondentKey);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("dsDataEntryKey3", new global::System.Data.DataColumn[] {
                                this.columnRespondentID}, true));
                this.columnRespondentID.AutoIncrement = true;
                this.columnRespondentID.AllowDBNull = false;
                this.columnRespondentID.ReadOnly = true;
                this.columnRespondentID.Unique = true;
                this.columnSurveyInstanceID.AllowDBNull = false;
                this.columnLastName.AllowDBNull = false;
                this.columnCallsMade.AllowDBNull = false;
                this.columnFinal.AllowDBNull = false;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public RespondentsRow NewRespondentsRow() {
                return ((RespondentsRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new RespondentsRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(RespondentsRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.RespondentsRowChanged != null)) {
                    this.RespondentsRowChanged(this, new RespondentsRowChangeEvent(((RespondentsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.RespondentsRowChanging != null)) {
                    this.RespondentsRowChanging(this, new RespondentsRowChangeEvent(((RespondentsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.RespondentsRowDeleted != null)) {
                    this.RespondentsRowDeleted(this, new RespondentsRowChangeEvent(((RespondentsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.RespondentsRowDeleting != null)) {
                    this.RespondentsRowDeleting(this, new RespondentsRowChangeEvent(((RespondentsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveRespondentsRow(RespondentsRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                dsDataEntry ds = new dsDataEntry();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "RespondentsDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class ScriptsDataTable : global::System.Data.TypedTableBase<ScriptsRow> {
            
            private global::System.Data.DataColumn columnScriptID;
            
            private global::System.Data.DataColumn columnSurveyID;
            
            private global::System.Data.DataColumn columnScriptTypeID;
            
            private global::System.Data.DataColumn columnName;
            
            private global::System.Data.DataColumn columnDescription;
            
            private global::System.Data.DataColumn columnCompletenessLevel;
            
            private global::System.Data.DataColumn columnFollowSkips;
            
            private global::System.Data.DataColumn columnCalcCompleteness;
            
            private global::System.Data.DataColumn columnDefaultScript;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ScriptsDataTable() {
                this.TableName = "Scripts";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ScriptsDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected ScriptsDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ScriptIDColumn {
                get {
                    return this.columnScriptID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SurveyIDColumn {
                get {
                    return this.columnSurveyID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ScriptTypeIDColumn {
                get {
                    return this.columnScriptTypeID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn NameColumn {
                get {
                    return this.columnName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DescriptionColumn {
                get {
                    return this.columnDescription;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CompletenessLevelColumn {
                get {
                    return this.columnCompletenessLevel;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn FollowSkipsColumn {
                get {
                    return this.columnFollowSkips;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CalcCompletenessColumn {
                get {
                    return this.columnCalcCompleteness;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DefaultScriptColumn {
                get {
                    return this.columnDefaultScript;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ScriptsRow this[int index] {
                get {
                    return ((ScriptsRow)(this.Rows[index]));
                }
            }
            
            public event ScriptsRowChangeEventHandler ScriptsRowChanging;
            
            public event ScriptsRowChangeEventHandler ScriptsRowChanged;
            
            public event ScriptsRowChangeEventHandler ScriptsRowDeleting;
            
            public event ScriptsRowChangeEventHandler ScriptsRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddScriptsRow(ScriptsRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ScriptsRow AddScriptsRow(int SurveyID, int ScriptTypeID, string Name, string Description, decimal CompletenessLevel, byte FollowSkips, byte CalcCompleteness, byte DefaultScript) {
                ScriptsRow rowScriptsRow = ((ScriptsRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        null,
                        SurveyID,
                        ScriptTypeID,
                        Name,
                        Description,
                        CompletenessLevel,
                        FollowSkips,
                        CalcCompleteness,
                        DefaultScript};
                rowScriptsRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowScriptsRow);
                return rowScriptsRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ScriptsRow FindByScriptID(int ScriptID) {
                return ((ScriptsRow)(this.Rows.Find(new object[] {
                            ScriptID})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                ScriptsDataTable cln = ((ScriptsDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new ScriptsDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnScriptID = base.Columns["ScriptID"];
                this.columnSurveyID = base.Columns["SurveyID"];
                this.columnScriptTypeID = base.Columns["ScriptTypeID"];
                this.columnName = base.Columns["Name"];
                this.columnDescription = base.Columns["Description"];
                this.columnCompletenessLevel = base.Columns["CompletenessLevel"];
                this.columnFollowSkips = base.Columns["FollowSkips"];
                this.columnCalcCompleteness = base.Columns["CalcCompleteness"];
                this.columnDefaultScript = base.Columns["DefaultScript"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnScriptID = new global::System.Data.DataColumn("ScriptID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnScriptID);
                this.columnSurveyID = new global::System.Data.DataColumn("SurveyID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSurveyID);
                this.columnScriptTypeID = new global::System.Data.DataColumn("ScriptTypeID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnScriptTypeID);
                this.columnName = new global::System.Data.DataColumn("Name", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnName);
                this.columnDescription = new global::System.Data.DataColumn("Description", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDescription);
                this.columnCompletenessLevel = new global::System.Data.DataColumn("CompletenessLevel", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCompletenessLevel);
                this.columnFollowSkips = new global::System.Data.DataColumn("FollowSkips", typeof(byte), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnFollowSkips);
                this.columnCalcCompleteness = new global::System.Data.DataColumn("CalcCompleteness", typeof(byte), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCalcCompleteness);
                this.columnDefaultScript = new global::System.Data.DataColumn("DefaultScript", typeof(byte), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDefaultScript);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("dsDataEntryKey4", new global::System.Data.DataColumn[] {
                                this.columnScriptID}, true));
                this.columnScriptID.AutoIncrement = true;
                this.columnScriptID.AllowDBNull = false;
                this.columnScriptID.ReadOnly = true;
                this.columnScriptID.Unique = true;
                this.columnSurveyID.AllowDBNull = false;
                this.columnScriptTypeID.AllowDBNull = false;
                this.columnName.AllowDBNull = false;
                this.columnDescription.AllowDBNull = false;
                this.columnCompletenessLevel.AllowDBNull = false;
                this.columnFollowSkips.AllowDBNull = false;
                this.columnCalcCompleteness.AllowDBNull = false;
                this.columnDefaultScript.AllowDBNull = false;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ScriptsRow NewScriptsRow() {
                return ((ScriptsRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new ScriptsRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(ScriptsRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.ScriptsRowChanged != null)) {
                    this.ScriptsRowChanged(this, new ScriptsRowChangeEvent(((ScriptsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.ScriptsRowChanging != null)) {
                    this.ScriptsRowChanging(this, new ScriptsRowChangeEvent(((ScriptsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.ScriptsRowDeleted != null)) {
                    this.ScriptsRowDeleted(this, new ScriptsRowChangeEvent(((ScriptsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.ScriptsRowDeleting != null)) {
                    this.ScriptsRowDeleting(this, new ScriptsRowChangeEvent(((ScriptsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveScriptsRow(ScriptsRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                dsDataEntry ds = new dsDataEntry();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "ScriptsDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class ScriptScreenCategoriesDataTable : global::System.Data.TypedTableBase<ScriptScreenCategoriesRow> {
            
            private global::System.Data.DataColumn columnScriptScreenCategoryID;
            
            private global::System.Data.DataColumn columnScriptScreenID;
            
            private global::System.Data.DataColumn columnAnswerCategoryID;
            
            private global::System.Data.DataColumn columnJumpToScriptScreenID;
            
            private global::System.Data.DataColumn columnText;
            
            private global::System.Data.DataColumn columnAnswerValue;
            
            private global::System.Data.DataColumn columnAnswerCategoryTypeID;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ScriptScreenCategoriesDataTable() {
                this.TableName = "ScriptScreenCategories";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ScriptScreenCategoriesDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected ScriptScreenCategoriesDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ScriptScreenCategoryIDColumn {
                get {
                    return this.columnScriptScreenCategoryID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ScriptScreenIDColumn {
                get {
                    return this.columnScriptScreenID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn AnswerCategoryIDColumn {
                get {
                    return this.columnAnswerCategoryID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn JumpToScriptScreenIDColumn {
                get {
                    return this.columnJumpToScriptScreenID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TextColumn {
                get {
                    return this.columnText;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn AnswerValueColumn {
                get {
                    return this.columnAnswerValue;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn AnswerCategoryTypeIDColumn {
                get {
                    return this.columnAnswerCategoryTypeID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ScriptScreenCategoriesRow this[int index] {
                get {
                    return ((ScriptScreenCategoriesRow)(this.Rows[index]));
                }
            }
            
            public event ScriptScreenCategoriesRowChangeEventHandler ScriptScreenCategoriesRowChanging;
            
            public event ScriptScreenCategoriesRowChangeEventHandler ScriptScreenCategoriesRowChanged;
            
            public event ScriptScreenCategoriesRowChangeEventHandler ScriptScreenCategoriesRowDeleting;
            
            public event ScriptScreenCategoriesRowChangeEventHandler ScriptScreenCategoriesRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddScriptScreenCategoriesRow(ScriptScreenCategoriesRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ScriptScreenCategoriesRow AddScriptScreenCategoriesRow(int ScriptScreenID, int AnswerCategoryID, int JumpToScriptScreenID, string Text, int AnswerValue, int AnswerCategoryTypeID) {
                ScriptScreenCategoriesRow rowScriptScreenCategoriesRow = ((ScriptScreenCategoriesRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        null,
                        ScriptScreenID,
                        AnswerCategoryID,
                        JumpToScriptScreenID,
                        Text,
                        AnswerValue,
                        AnswerCategoryTypeID};
                rowScriptScreenCategoriesRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowScriptScreenCategoriesRow);
                return rowScriptScreenCategoriesRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ScriptScreenCategoriesRow FindByScriptScreenCategoryID(int ScriptScreenCategoryID) {
                return ((ScriptScreenCategoriesRow)(this.Rows.Find(new object[] {
                            ScriptScreenCategoryID})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                ScriptScreenCategoriesDataTable cln = ((ScriptScreenCategoriesDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new ScriptScreenCategoriesDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnScriptScreenCategoryID = base.Columns["ScriptScreenCategoryID"];
                this.columnScriptScreenID = base.Columns["ScriptScreenID"];
                this.columnAnswerCategoryID = base.Columns["AnswerCategoryID"];
                this.columnJumpToScriptScreenID = base.Columns["JumpToScriptScreenID"];
                this.columnText = base.Columns["Text"];
                this.columnAnswerValue = base.Columns["AnswerValue"];
                this.columnAnswerCategoryTypeID = base.Columns["AnswerCategoryTypeID"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnScriptScreenCategoryID = new global::System.Data.DataColumn("ScriptScreenCategoryID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnScriptScreenCategoryID);
                this.columnScriptScreenID = new global::System.Data.DataColumn("ScriptScreenID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnScriptScreenID);
                this.columnAnswerCategoryID = new global::System.Data.DataColumn("AnswerCategoryID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnAnswerCategoryID);
                this.columnJumpToScriptScreenID = new global::System.Data.DataColumn("JumpToScriptScreenID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnJumpToScriptScreenID);
                this.columnText = new global::System.Data.DataColumn("Text", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnText);
                this.columnAnswerValue = new global::System.Data.DataColumn("AnswerValue", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnAnswerValue);
                this.columnAnswerCategoryTypeID = new global::System.Data.DataColumn("AnswerCategoryTypeID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnAnswerCategoryTypeID);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("dsDataEntryKey5", new global::System.Data.DataColumn[] {
                                this.columnScriptScreenCategoryID}, true));
                this.columnScriptScreenCategoryID.AutoIncrement = true;
                this.columnScriptScreenCategoryID.AllowDBNull = false;
                this.columnScriptScreenCategoryID.ReadOnly = true;
                this.columnScriptScreenCategoryID.Unique = true;
                this.columnScriptScreenID.AllowDBNull = false;
                this.columnAnswerCategoryID.AllowDBNull = false;
                this.columnJumpToScriptScreenID.AllowDBNull = false;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ScriptScreenCategoriesRow NewScriptScreenCategoriesRow() {
                return ((ScriptScreenCategoriesRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new ScriptScreenCategoriesRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(ScriptScreenCategoriesRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.ScriptScreenCategoriesRowChanged != null)) {
                    this.ScriptScreenCategoriesRowChanged(this, new ScriptScreenCategoriesRowChangeEvent(((ScriptScreenCategoriesRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.ScriptScreenCategoriesRowChanging != null)) {
                    this.ScriptScreenCategoriesRowChanging(this, new ScriptScreenCategoriesRowChangeEvent(((ScriptScreenCategoriesRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.ScriptScreenCategoriesRowDeleted != null)) {
                    this.ScriptScreenCategoriesRowDeleted(this, new ScriptScreenCategoriesRowChangeEvent(((ScriptScreenCategoriesRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.ScriptScreenCategoriesRowDeleting != null)) {
                    this.ScriptScreenCategoriesRowDeleting(this, new ScriptScreenCategoriesRowChangeEvent(((ScriptScreenCategoriesRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveScriptScreenCategoriesRow(ScriptScreenCategoriesRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                dsDataEntry ds = new dsDataEntry();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "ScriptScreenCategoriesDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class ScriptScreensDataTable : global::System.Data.TypedTableBase<ScriptScreensRow> {
            
            private global::System.Data.DataColumn columnScriptScreenID;
            
            private global::System.Data.DataColumn columnScriptID;
            
            private global::System.Data.DataColumn columnSurveyQuestionID;
            
            private global::System.Data.DataColumn columnTitle;
            
            private global::System.Data.DataColumn columnText;
            
            private global::System.Data.DataColumn columnCalculationTypeID;
            
            private global::System.Data.DataColumn columnItemOrder;
            
            private global::System.Data.DataColumn columnQuestionTypeID;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ScriptScreensDataTable() {
                this.TableName = "ScriptScreens";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ScriptScreensDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected ScriptScreensDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ScriptScreenIDColumn {
                get {
                    return this.columnScriptScreenID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ScriptIDColumn {
                get {
                    return this.columnScriptID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SurveyQuestionIDColumn {
                get {
                    return this.columnSurveyQuestionID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TitleColumn {
                get {
                    return this.columnTitle;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TextColumn {
                get {
                    return this.columnText;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CalculationTypeIDColumn {
                get {
                    return this.columnCalculationTypeID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ItemOrderColumn {
                get {
                    return this.columnItemOrder;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn QuestionTypeIDColumn {
                get {
                    return this.columnQuestionTypeID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ScriptScreensRow this[int index] {
                get {
                    return ((ScriptScreensRow)(this.Rows[index]));
                }
            }
            
            public event ScriptScreensRowChangeEventHandler ScriptScreensRowChanging;
            
            public event ScriptScreensRowChangeEventHandler ScriptScreensRowChanged;
            
            public event ScriptScreensRowChangeEventHandler ScriptScreensRowDeleting;
            
            public event ScriptScreensRowChangeEventHandler ScriptScreensRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddScriptScreensRow(ScriptScreensRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ScriptScreensRow AddScriptScreensRow(int ScriptID, int SurveyQuestionID, string Title, string Text, int CalculationTypeID, int ItemOrder, int QuestionTypeID) {
                ScriptScreensRow rowScriptScreensRow = ((ScriptScreensRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        null,
                        ScriptID,
                        SurveyQuestionID,
                        Title,
                        Text,
                        CalculationTypeID,
                        ItemOrder,
                        QuestionTypeID};
                rowScriptScreensRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowScriptScreensRow);
                return rowScriptScreensRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ScriptScreensRow FindByScriptScreenID(int ScriptScreenID) {
                return ((ScriptScreensRow)(this.Rows.Find(new object[] {
                            ScriptScreenID})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                ScriptScreensDataTable cln = ((ScriptScreensDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new ScriptScreensDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnScriptScreenID = base.Columns["ScriptScreenID"];
                this.columnScriptID = base.Columns["ScriptID"];
                this.columnSurveyQuestionID = base.Columns["SurveyQuestionID"];
                this.columnTitle = base.Columns["Title"];
                this.columnText = base.Columns["Text"];
                this.columnCalculationTypeID = base.Columns["CalculationTypeID"];
                this.columnItemOrder = base.Columns["ItemOrder"];
                this.columnQuestionTypeID = base.Columns["QuestionTypeID"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnScriptScreenID = new global::System.Data.DataColumn("ScriptScreenID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnScriptScreenID);
                this.columnScriptID = new global::System.Data.DataColumn("ScriptID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnScriptID);
                this.columnSurveyQuestionID = new global::System.Data.DataColumn("SurveyQuestionID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSurveyQuestionID);
                this.columnTitle = new global::System.Data.DataColumn("Title", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTitle);
                this.columnText = new global::System.Data.DataColumn("Text", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnText);
                this.columnCalculationTypeID = new global::System.Data.DataColumn("CalculationTypeID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCalculationTypeID);
                this.columnItemOrder = new global::System.Data.DataColumn("ItemOrder", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnItemOrder);
                this.columnQuestionTypeID = new global::System.Data.DataColumn("QuestionTypeID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnQuestionTypeID);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("dsDataEntryKey6", new global::System.Data.DataColumn[] {
                                this.columnScriptScreenID}, true));
                this.columnScriptScreenID.AutoIncrement = true;
                this.columnScriptScreenID.AllowDBNull = false;
                this.columnScriptScreenID.ReadOnly = true;
                this.columnScriptScreenID.Unique = true;
                this.columnScriptID.AllowDBNull = false;
                this.columnTitle.AllowDBNull = false;
                this.columnText.AllowDBNull = false;
                this.columnCalculationTypeID.AllowDBNull = false;
                this.columnItemOrder.AllowDBNull = false;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ScriptScreensRow NewScriptScreensRow() {
                return ((ScriptScreensRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new ScriptScreensRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(ScriptScreensRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.ScriptScreensRowChanged != null)) {
                    this.ScriptScreensRowChanged(this, new ScriptScreensRowChangeEvent(((ScriptScreensRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.ScriptScreensRowChanging != null)) {
                    this.ScriptScreensRowChanging(this, new ScriptScreensRowChangeEvent(((ScriptScreensRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.ScriptScreensRowDeleted != null)) {
                    this.ScriptScreensRowDeleted(this, new ScriptScreensRowChangeEvent(((ScriptScreensRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.ScriptScreensRowDeleting != null)) {
                    this.ScriptScreensRowDeleting(this, new ScriptScreensRowChangeEvent(((ScriptScreensRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveScriptScreensRow(ScriptScreensRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                dsDataEntry ds = new dsDataEntry();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "ScriptScreensDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class SurveyInstancesDataTable : global::System.Data.TypedTableBase<SurveyInstancesRow> {
            
            private global::System.Data.DataColumn columnSurveyInstanceID;
            
            private global::System.Data.DataColumn columnSurveyID;
            
            private global::System.Data.DataColumn columnClientID;
            
            private global::System.Data.DataColumn columnProtocolID;
            
            private global::System.Data.DataColumn columnName;
            
            private global::System.Data.DataColumn columnInstanceDate;
            
            private global::System.Data.DataColumn columnStartDate;
            
            private global::System.Data.DataColumn columnActive;
            
            private global::System.Data.DataColumn columnGroupByHousehold;
            
            private global::System.Data.DataColumn columnSurveyInstanceCategoryID;
            
            private global::System.Data.DataColumn columnSurveyInstanceKey;
            
            private global::System.Data.DataColumn columnQuarterEnding;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SurveyInstancesDataTable() {
                this.TableName = "SurveyInstances";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal SurveyInstancesDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected SurveyInstancesDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SurveyInstanceIDColumn {
                get {
                    return this.columnSurveyInstanceID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SurveyIDColumn {
                get {
                    return this.columnSurveyID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ClientIDColumn {
                get {
                    return this.columnClientID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ProtocolIDColumn {
                get {
                    return this.columnProtocolID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn NameColumn {
                get {
                    return this.columnName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn InstanceDateColumn {
                get {
                    return this.columnInstanceDate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn StartDateColumn {
                get {
                    return this.columnStartDate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ActiveColumn {
                get {
                    return this.columnActive;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn GroupByHouseholdColumn {
                get {
                    return this.columnGroupByHousehold;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SurveyInstanceCategoryIDColumn {
                get {
                    return this.columnSurveyInstanceCategoryID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SurveyInstanceKeyColumn {
                get {
                    return this.columnSurveyInstanceKey;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn QuarterEndingColumn {
                get {
                    return this.columnQuarterEnding;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SurveyInstancesRow this[int index] {
                get {
                    return ((SurveyInstancesRow)(this.Rows[index]));
                }
            }
            
            public event SurveyInstancesRowChangeEventHandler SurveyInstancesRowChanging;
            
            public event SurveyInstancesRowChangeEventHandler SurveyInstancesRowChanged;
            
            public event SurveyInstancesRowChangeEventHandler SurveyInstancesRowDeleting;
            
            public event SurveyInstancesRowChangeEventHandler SurveyInstancesRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddSurveyInstancesRow(SurveyInstancesRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SurveyInstancesRow AddSurveyInstancesRow(int SurveyID, int ClientID, int ProtocolID, string Name, System.DateTime InstanceDate, System.DateTime StartDate, byte Active, byte GroupByHousehold, int SurveyInstanceCategoryID, string SurveyInstanceKey, System.DateTime QuarterEnding) {
                SurveyInstancesRow rowSurveyInstancesRow = ((SurveyInstancesRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        null,
                        SurveyID,
                        ClientID,
                        ProtocolID,
                        Name,
                        InstanceDate,
                        StartDate,
                        Active,
                        GroupByHousehold,
                        SurveyInstanceCategoryID,
                        SurveyInstanceKey,
                        QuarterEnding};
                rowSurveyInstancesRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowSurveyInstancesRow);
                return rowSurveyInstancesRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SurveyInstancesRow FindBySurveyInstanceID(int SurveyInstanceID) {
                return ((SurveyInstancesRow)(this.Rows.Find(new object[] {
                            SurveyInstanceID})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                SurveyInstancesDataTable cln = ((SurveyInstancesDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new SurveyInstancesDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnSurveyInstanceID = base.Columns["SurveyInstanceID"];
                this.columnSurveyID = base.Columns["SurveyID"];
                this.columnClientID = base.Columns["ClientID"];
                this.columnProtocolID = base.Columns["ProtocolID"];
                this.columnName = base.Columns["Name"];
                this.columnInstanceDate = base.Columns["InstanceDate"];
                this.columnStartDate = base.Columns["StartDate"];
                this.columnActive = base.Columns["Active"];
                this.columnGroupByHousehold = base.Columns["GroupByHousehold"];
                this.columnSurveyInstanceCategoryID = base.Columns["SurveyInstanceCategoryID"];
                this.columnSurveyInstanceKey = base.Columns["SurveyInstanceKey"];
                this.columnQuarterEnding = base.Columns["QuarterEnding"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnSurveyInstanceID = new global::System.Data.DataColumn("SurveyInstanceID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSurveyInstanceID);
                this.columnSurveyID = new global::System.Data.DataColumn("SurveyID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSurveyID);
                this.columnClientID = new global::System.Data.DataColumn("ClientID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnClientID);
                this.columnProtocolID = new global::System.Data.DataColumn("ProtocolID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnProtocolID);
                this.columnName = new global::System.Data.DataColumn("Name", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnName);
                this.columnInstanceDate = new global::System.Data.DataColumn("InstanceDate", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnInstanceDate);
                this.columnStartDate = new global::System.Data.DataColumn("StartDate", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnStartDate);
                this.columnActive = new global::System.Data.DataColumn("Active", typeof(byte), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnActive);
                this.columnGroupByHousehold = new global::System.Data.DataColumn("GroupByHousehold", typeof(byte), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnGroupByHousehold);
                this.columnSurveyInstanceCategoryID = new global::System.Data.DataColumn("SurveyInstanceCategoryID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSurveyInstanceCategoryID);
                this.columnSurveyInstanceKey = new global::System.Data.DataColumn("SurveyInstanceKey", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSurveyInstanceKey);
                this.columnQuarterEnding = new global::System.Data.DataColumn("QuarterEnding", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnQuarterEnding);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("dsDataEntryKey7", new global::System.Data.DataColumn[] {
                                this.columnSurveyInstanceID}, true));
                this.columnSurveyInstanceID.AutoIncrement = true;
                this.columnSurveyInstanceID.AllowDBNull = false;
                this.columnSurveyInstanceID.ReadOnly = true;
                this.columnSurveyInstanceID.Unique = true;
                this.columnSurveyID.AllowDBNull = false;
                this.columnClientID.AllowDBNull = false;
                this.columnProtocolID.AllowDBNull = false;
                this.columnName.AllowDBNull = false;
                this.columnActive.AllowDBNull = false;
                this.columnGroupByHousehold.AllowDBNull = false;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SurveyInstancesRow NewSurveyInstancesRow() {
                return ((SurveyInstancesRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new SurveyInstancesRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(SurveyInstancesRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.SurveyInstancesRowChanged != null)) {
                    this.SurveyInstancesRowChanged(this, new SurveyInstancesRowChangeEvent(((SurveyInstancesRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.SurveyInstancesRowChanging != null)) {
                    this.SurveyInstancesRowChanging(this, new SurveyInstancesRowChangeEvent(((SurveyInstancesRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.SurveyInstancesRowDeleted != null)) {
                    this.SurveyInstancesRowDeleted(this, new SurveyInstancesRowChangeEvent(((SurveyInstancesRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.SurveyInstancesRowDeleting != null)) {
                    this.SurveyInstancesRowDeleting(this, new SurveyInstancesRowChangeEvent(((SurveyInstancesRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveSurveyInstancesRow(SurveyInstancesRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                dsDataEntry ds = new dsDataEntry();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "SurveyInstancesDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class SurveysDataTable : global::System.Data.TypedTableBase<SurveysRow> {
            
            private global::System.Data.DataColumn columnSurveyID;
            
            private global::System.Data.DataColumn columnName;
            
            private global::System.Data.DataColumn columnDescription;
            
            private global::System.Data.DataColumn columnCreatedByUserID;
            
            private global::System.Data.DataColumn columnCreatedOnDate;
            
            private global::System.Data.DataColumn columnActive;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SurveysDataTable() {
                this.TableName = "Surveys";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal SurveysDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected SurveysDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SurveyIDColumn {
                get {
                    return this.columnSurveyID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn NameColumn {
                get {
                    return this.columnName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DescriptionColumn {
                get {
                    return this.columnDescription;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CreatedByUserIDColumn {
                get {
                    return this.columnCreatedByUserID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CreatedOnDateColumn {
                get {
                    return this.columnCreatedOnDate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ActiveColumn {
                get {
                    return this.columnActive;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SurveysRow this[int index] {
                get {
                    return ((SurveysRow)(this.Rows[index]));
                }
            }
            
            public event SurveysRowChangeEventHandler SurveysRowChanging;
            
            public event SurveysRowChangeEventHandler SurveysRowChanged;
            
            public event SurveysRowChangeEventHandler SurveysRowDeleting;
            
            public event SurveysRowChangeEventHandler SurveysRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddSurveysRow(SurveysRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SurveysRow AddSurveysRow(string Name, string Description, int CreatedByUserID, System.DateTime CreatedOnDate, byte Active) {
                SurveysRow rowSurveysRow = ((SurveysRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        null,
                        Name,
                        Description,
                        CreatedByUserID,
                        CreatedOnDate,
                        Active};
                rowSurveysRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowSurveysRow);
                return rowSurveysRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SurveysRow FindBySurveyID(int SurveyID) {
                return ((SurveysRow)(this.Rows.Find(new object[] {
                            SurveyID})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                SurveysDataTable cln = ((SurveysDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new SurveysDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnSurveyID = base.Columns["SurveyID"];
                this.columnName = base.Columns["Name"];
                this.columnDescription = base.Columns["Description"];
                this.columnCreatedByUserID = base.Columns["CreatedByUserID"];
                this.columnCreatedOnDate = base.Columns["CreatedOnDate"];
                this.columnActive = base.Columns["Active"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnSurveyID = new global::System.Data.DataColumn("SurveyID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSurveyID);
                this.columnName = new global::System.Data.DataColumn("Name", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnName);
                this.columnDescription = new global::System.Data.DataColumn("Description", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDescription);
                this.columnCreatedByUserID = new global::System.Data.DataColumn("CreatedByUserID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCreatedByUserID);
                this.columnCreatedOnDate = new global::System.Data.DataColumn("CreatedOnDate", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCreatedOnDate);
                this.columnActive = new global::System.Data.DataColumn("Active", typeof(byte), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnActive);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("dsDataEntryKey8", new global::System.Data.DataColumn[] {
                                this.columnSurveyID}, true));
                this.columnSurveyID.AutoIncrement = true;
                this.columnSurveyID.AllowDBNull = false;
                this.columnSurveyID.ReadOnly = true;
                this.columnSurveyID.Unique = true;
                this.columnName.AllowDBNull = false;
                this.columnDescription.AllowDBNull = false;
                this.columnCreatedByUserID.AllowDBNull = false;
                this.columnCreatedOnDate.AllowDBNull = false;
                this.columnActive.AllowDBNull = false;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SurveysRow NewSurveysRow() {
                return ((SurveysRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new SurveysRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(SurveysRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.SurveysRowChanged != null)) {
                    this.SurveysRowChanged(this, new SurveysRowChangeEvent(((SurveysRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.SurveysRowChanging != null)) {
                    this.SurveysRowChanging(this, new SurveysRowChangeEvent(((SurveysRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.SurveysRowDeleted != null)) {
                    this.SurveysRowDeleted(this, new SurveysRowChangeEvent(((SurveysRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.SurveysRowDeleting != null)) {
                    this.SurveysRowDeleting(this, new SurveysRowChangeEvent(((SurveysRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveSurveysRow(SurveysRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                dsDataEntry ds = new dsDataEntry();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "SurveysDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class ResponsesDataTable : global::System.Data.TypedTableBase<ResponsesRow> {
            
            private global::System.Data.DataColumn columnResponseID;
            
            private global::System.Data.DataColumn columnRespondentID;
            
            private global::System.Data.DataColumn columnSurveyQuestionID;
            
            private global::System.Data.DataColumn columnAnswerCategoryID;
            
            private global::System.Data.DataColumn columnResponseText;
            
            private global::System.Data.DataColumn columnUserID;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ResponsesDataTable() {
                this.TableName = "Responses";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ResponsesDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected ResponsesDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ResponseIDColumn {
                get {
                    return this.columnResponseID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn RespondentIDColumn {
                get {
                    return this.columnRespondentID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SurveyQuestionIDColumn {
                get {
                    return this.columnSurveyQuestionID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn AnswerCategoryIDColumn {
                get {
                    return this.columnAnswerCategoryID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ResponseTextColumn {
                get {
                    return this.columnResponseText;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn UserIDColumn {
                get {
                    return this.columnUserID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ResponsesRow this[int index] {
                get {
                    return ((ResponsesRow)(this.Rows[index]));
                }
            }
            
            public event ResponsesRowChangeEventHandler ResponsesRowChanging;
            
            public event ResponsesRowChangeEventHandler ResponsesRowChanged;
            
            public event ResponsesRowChangeEventHandler ResponsesRowDeleting;
            
            public event ResponsesRowChangeEventHandler ResponsesRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddResponsesRow(ResponsesRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ResponsesRow AddResponsesRow(int RespondentID, int SurveyQuestionID, int AnswerCategoryID, string ResponseText, int UserID) {
                ResponsesRow rowResponsesRow = ((ResponsesRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        null,
                        RespondentID,
                        SurveyQuestionID,
                        AnswerCategoryID,
                        ResponseText,
                        UserID};
                rowResponsesRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowResponsesRow);
                return rowResponsesRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ResponsesRow FindByResponseID(int ResponseID) {
                return ((ResponsesRow)(this.Rows.Find(new object[] {
                            ResponseID})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                ResponsesDataTable cln = ((ResponsesDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new ResponsesDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnResponseID = base.Columns["ResponseID"];
                this.columnRespondentID = base.Columns["RespondentID"];
                this.columnSurveyQuestionID = base.Columns["SurveyQuestionID"];
                this.columnAnswerCategoryID = base.Columns["AnswerCategoryID"];
                this.columnResponseText = base.Columns["ResponseText"];
                this.columnUserID = base.Columns["UserID"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnResponseID = new global::System.Data.DataColumn("ResponseID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnResponseID);
                this.columnRespondentID = new global::System.Data.DataColumn("RespondentID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnRespondentID);
                this.columnSurveyQuestionID = new global::System.Data.DataColumn("SurveyQuestionID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSurveyQuestionID);
                this.columnAnswerCategoryID = new global::System.Data.DataColumn("AnswerCategoryID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnAnswerCategoryID);
                this.columnResponseText = new global::System.Data.DataColumn("ResponseText", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnResponseText);
                this.columnUserID = new global::System.Data.DataColumn("UserID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnUserID);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("dsDataEntryKey9", new global::System.Data.DataColumn[] {
                                this.columnResponseID}, true));
                this.columnResponseID.AutoIncrement = true;
                this.columnResponseID.AllowDBNull = false;
                this.columnResponseID.ReadOnly = true;
                this.columnResponseID.Unique = true;
                this.columnRespondentID.AllowDBNull = false;
                this.columnSurveyQuestionID.AllowDBNull = false;
                this.columnAnswerCategoryID.AllowDBNull = false;
                this.columnResponseText.AllowDBNull = false;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ResponsesRow NewResponsesRow() {
                return ((ResponsesRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new ResponsesRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(ResponsesRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.ResponsesRowChanged != null)) {
                    this.ResponsesRowChanged(this, new ResponsesRowChangeEvent(((ResponsesRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.ResponsesRowChanging != null)) {
                    this.ResponsesRowChanging(this, new ResponsesRowChangeEvent(((ResponsesRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.ResponsesRowDeleted != null)) {
                    this.ResponsesRowDeleted(this, new ResponsesRowChangeEvent(((ResponsesRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.ResponsesRowDeleting != null)) {
                    this.ResponsesRowDeleting(this, new ResponsesRowChangeEvent(((ResponsesRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveResponsesRow(ResponsesRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                dsDataEntry ds = new dsDataEntry();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "ResponsesDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class ClientsDataTable : global::System.Data.TypedTableBase<ClientsRow> {
            
            private global::System.Data.DataColumn columnClientID;
            
            private global::System.Data.DataColumn columnName;
            
            private global::System.Data.DataColumn columnAddress1;
            
            private global::System.Data.DataColumn columnAddress2;
            
            private global::System.Data.DataColumn columnCity;
            
            private global::System.Data.DataColumn columnState;
            
            private global::System.Data.DataColumn columnPostalCode;
            
            private global::System.Data.DataColumn columnTelephone;
            
            private global::System.Data.DataColumn columnFax;
            
            private global::System.Data.DataColumn columnActive;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ClientsDataTable() {
                this.TableName = "Clients";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ClientsDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected ClientsDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ClientIDColumn {
                get {
                    return this.columnClientID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn NameColumn {
                get {
                    return this.columnName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Address1Column {
                get {
                    return this.columnAddress1;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Address2Column {
                get {
                    return this.columnAddress2;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CityColumn {
                get {
                    return this.columnCity;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn StateColumn {
                get {
                    return this.columnState;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PostalCodeColumn {
                get {
                    return this.columnPostalCode;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TelephoneColumn {
                get {
                    return this.columnTelephone;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn FaxColumn {
                get {
                    return this.columnFax;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ActiveColumn {
                get {
                    return this.columnActive;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ClientsRow this[int index] {
                get {
                    return ((ClientsRow)(this.Rows[index]));
                }
            }
            
            public event ClientsRowChangeEventHandler ClientsRowChanging;
            
            public event ClientsRowChangeEventHandler ClientsRowChanged;
            
            public event ClientsRowChangeEventHandler ClientsRowDeleting;
            
            public event ClientsRowChangeEventHandler ClientsRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddClientsRow(ClientsRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ClientsRow AddClientsRow(string Name, string Address1, string Address2, string City, string State, string PostalCode, string Telephone, string Fax, byte Active) {
                ClientsRow rowClientsRow = ((ClientsRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        null,
                        Name,
                        Address1,
                        Address2,
                        City,
                        State,
                        PostalCode,
                        Telephone,
                        Fax,
                        Active};
                rowClientsRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowClientsRow);
                return rowClientsRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ClientsRow FindByClientID(int ClientID) {
                return ((ClientsRow)(this.Rows.Find(new object[] {
                            ClientID})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                ClientsDataTable cln = ((ClientsDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new ClientsDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnClientID = base.Columns["ClientID"];
                this.columnName = base.Columns["Name"];
                this.columnAddress1 = base.Columns["Address1"];
                this.columnAddress2 = base.Columns["Address2"];
                this.columnCity = base.Columns["City"];
                this.columnState = base.Columns["State"];
                this.columnPostalCode = base.Columns["PostalCode"];
                this.columnTelephone = base.Columns["Telephone"];
                this.columnFax = base.Columns["Fax"];
                this.columnActive = base.Columns["Active"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnClientID = new global::System.Data.DataColumn("ClientID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnClientID);
                this.columnName = new global::System.Data.DataColumn("Name", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnName);
                this.columnAddress1 = new global::System.Data.DataColumn("Address1", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnAddress1);
                this.columnAddress2 = new global::System.Data.DataColumn("Address2", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnAddress2);
                this.columnCity = new global::System.Data.DataColumn("City", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCity);
                this.columnState = new global::System.Data.DataColumn("State", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnState);
                this.columnPostalCode = new global::System.Data.DataColumn("PostalCode", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPostalCode);
                this.columnTelephone = new global::System.Data.DataColumn("Telephone", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTelephone);
                this.columnFax = new global::System.Data.DataColumn("Fax", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnFax);
                this.columnActive = new global::System.Data.DataColumn("Active", typeof(byte), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnActive);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("dsDataEntryKey10", new global::System.Data.DataColumn[] {
                                this.columnClientID}, true));
                this.columnClientID.AutoIncrement = true;
                this.columnClientID.AllowDBNull = false;
                this.columnClientID.ReadOnly = true;
                this.columnClientID.Unique = true;
                this.columnName.AllowDBNull = false;
                this.columnAddress1.AllowDBNull = false;
                this.columnAddress2.AllowDBNull = false;
                this.columnCity.AllowDBNull = false;
                this.columnState.AllowDBNull = false;
                this.columnPostalCode.AllowDBNull = false;
                this.columnTelephone.AllowDBNull = false;
                this.columnFax.AllowDBNull = false;
                this.columnActive.AllowDBNull = false;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ClientsRow NewClientsRow() {
                return ((ClientsRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new ClientsRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(ClientsRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.ClientsRowChanged != null)) {
                    this.ClientsRowChanged(this, new ClientsRowChangeEvent(((ClientsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.ClientsRowChanging != null)) {
                    this.ClientsRowChanging(this, new ClientsRowChangeEvent(((ClientsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.ClientsRowDeleted != null)) {
                    this.ClientsRowDeleted(this, new ClientsRowChangeEvent(((ClientsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.ClientsRowDeleting != null)) {
                    this.ClientsRowDeleting(this, new ClientsRowChangeEvent(((ClientsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveClientsRow(ClientsRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                dsDataEntry ds = new dsDataEntry();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "ClientsDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class EventLogRow : global::System.Data.DataRow {
            
            private EventLogDataTable tableEventLog;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal EventLogRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableEventLog = ((EventLogDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int EventLogID {
                get {
                    return ((int)(this[this.tableEventLog.EventLogIDColumn]));
                }
                set {
                    this[this.tableEventLog.EventLogIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime EventDate {
                get {
                    return ((global::System.DateTime)(this[this.tableEventLog.EventDateColumn]));
                }
                set {
                    this[this.tableEventLog.EventDateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int EventID {
                get {
                    return ((int)(this[this.tableEventLog.EventIDColumn]));
                }
                set {
                    this[this.tableEventLog.EventIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int UserID {
                get {
                    return ((int)(this[this.tableEventLog.UserIDColumn]));
                }
                set {
                    this[this.tableEventLog.UserIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int RespondentID {
                get {
                    try {
                        return ((int)(this[this.tableEventLog.RespondentIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'RespondentID\' in table \'EventLog\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableEventLog.RespondentIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string EventParameters {
                get {
                    try {
                        return ((string)(this[this.tableEventLog.EventParametersColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'EventParameters\' in table \'EventLog\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableEventLog.EventParametersColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int SurveyInstanceID {
                get {
                    try {
                        return ((int)(this[this.tableEventLog.SurveyInstanceIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'SurveyInstanceID\' in table \'EventLog\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableEventLog.SurveyInstanceIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int SurveyID {
                get {
                    try {
                        return ((int)(this[this.tableEventLog.SurveyIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'SurveyID\' in table \'EventLog\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableEventLog.SurveyIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ClientID {
                get {
                    try {
                        return ((int)(this[this.tableEventLog.ClientIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ClientID\' in table \'EventLog\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableEventLog.ClientIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int EventTypeID {
                get {
                    try {
                        return ((int)(this[this.tableEventLog.EventTypeIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'EventTypeID\' in table \'EventLog\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableEventLog.EventTypeIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsRespondentIDNull() {
                return this.IsNull(this.tableEventLog.RespondentIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetRespondentIDNull() {
                this[this.tableEventLog.RespondentIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsEventParametersNull() {
                return this.IsNull(this.tableEventLog.EventParametersColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetEventParametersNull() {
                this[this.tableEventLog.EventParametersColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSurveyInstanceIDNull() {
                return this.IsNull(this.tableEventLog.SurveyInstanceIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSurveyInstanceIDNull() {
                this[this.tableEventLog.SurveyInstanceIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSurveyIDNull() {
                return this.IsNull(this.tableEventLog.SurveyIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSurveyIDNull() {
                this[this.tableEventLog.SurveyIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsClientIDNull() {
                return this.IsNull(this.tableEventLog.ClientIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetClientIDNull() {
                this[this.tableEventLog.ClientIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsEventTypeIDNull() {
                return this.IsNull(this.tableEventLog.EventTypeIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetEventTypeIDNull() {
                this[this.tableEventLog.EventTypeIDColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class RespondentPropertiesRow : global::System.Data.DataRow {
            
            private RespondentPropertiesDataTable tableRespondentProperties;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal RespondentPropertiesRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableRespondentProperties = ((RespondentPropertiesDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int RespondentPropertyID {
                get {
                    return ((int)(this[this.tableRespondentProperties.RespondentPropertyIDColumn]));
                }
                set {
                    this[this.tableRespondentProperties.RespondentPropertyIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int RespondentID {
                get {
                    return ((int)(this[this.tableRespondentProperties.RespondentIDColumn]));
                }
                set {
                    this[this.tableRespondentProperties.RespondentIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string PropertyName {
                get {
                    return ((string)(this[this.tableRespondentProperties.PropertyNameColumn]));
                }
                set {
                    this[this.tableRespondentProperties.PropertyNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string PropertyValue {
                get {
                    return ((string)(this[this.tableRespondentProperties.PropertyValueColumn]));
                }
                set {
                    this[this.tableRespondentProperties.PropertyValueColumn] = value;
                }
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class RespondentsRow : global::System.Data.DataRow {
            
            private RespondentsDataTable tableRespondents;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal RespondentsRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableRespondents = ((RespondentsDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int RespondentID {
                get {
                    return ((int)(this[this.tableRespondents.RespondentIDColumn]));
                }
                set {
                    this[this.tableRespondents.RespondentIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int SurveyInstanceID {
                get {
                    return ((int)(this[this.tableRespondents.SurveyInstanceIDColumn]));
                }
                set {
                    this[this.tableRespondents.SurveyInstanceIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string FirstName {
                get {
                    try {
                        return ((string)(this[this.tableRespondents.FirstNameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'FirstName\' in table \'Respondents\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableRespondents.FirstNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string MiddleInitial {
                get {
                    try {
                        return ((string)(this[this.tableRespondents.MiddleInitialColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'MiddleInitial\' in table \'Respondents\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableRespondents.MiddleInitialColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string LastName {
                get {
                    return ((string)(this[this.tableRespondents.LastNameColumn]));
                }
                set {
                    this[this.tableRespondents.LastNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Address1 {
                get {
                    try {
                        return ((string)(this[this.tableRespondents.Address1Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Address1\' in table \'Respondents\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableRespondents.Address1Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Address2 {
                get {
                    try {
                        return ((string)(this[this.tableRespondents.Address2Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Address2\' in table \'Respondents\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableRespondents.Address2Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string City {
                get {
                    try {
                        return ((string)(this[this.tableRespondents.CityColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'City\' in table \'Respondents\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableRespondents.CityColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string State {
                get {
                    try {
                        return ((string)(this[this.tableRespondents.StateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'State\' in table \'Respondents\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableRespondents.StateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string PostalCode {
                get {
                    try {
                        return ((string)(this[this.tableRespondents.PostalCodeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'PostalCode\' in table \'Respondents\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableRespondents.PostalCodeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string TelephoneDay {
                get {
                    try {
                        return ((string)(this[this.tableRespondents.TelephoneDayColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'TelephoneDay\' in table \'Respondents\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableRespondents.TelephoneDayColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string TelephoneEvening {
                get {
                    try {
                        return ((string)(this[this.tableRespondents.TelephoneEveningColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'TelephoneEvening\' in table \'Respondents\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableRespondents.TelephoneEveningColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Email {
                get {
                    try {
                        return ((string)(this[this.tableRespondents.EmailColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Email\' in table \'Respondents\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableRespondents.EmailColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime DOB {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableRespondents.DOBColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'DOB\' in table \'Respondents\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableRespondents.DOBColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Gender {
                get {
                    try {
                        return ((string)(this[this.tableRespondents.GenderColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Gender\' in table \'Respondents\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableRespondents.GenderColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ClientRespondentID {
                get {
                    try {
                        return ((string)(this[this.tableRespondents.ClientRespondentIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ClientRespondentID\' in table \'Respondents\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableRespondents.ClientRespondentIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string SSN {
                get {
                    try {
                        return ((string)(this[this.tableRespondents.SSNColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'SSN\' in table \'Respondents\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableRespondents.SSNColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int BatchID {
                get {
                    try {
                        return ((int)(this[this.tableRespondents.BatchIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'BatchID\' in table \'Respondents\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableRespondents.BatchIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public byte MailingSeedFlag {
                get {
                    try {
                        return ((byte)(this[this.tableRespondents.MailingSeedFlagColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'MailingSeedFlag\' in table \'Respondents\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableRespondents.MailingSeedFlagColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int CallsMade {
                get {
                    return ((int)(this[this.tableRespondents.CallsMadeColumn]));
                }
                set {
                    this[this.tableRespondents.CallsMadeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Final {
                get {
                    return ((int)(this[this.tableRespondents.FinalColumn]));
                }
                set {
                    this[this.tableRespondents.FinalColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime NextContact {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableRespondents.NextContactColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'NextContact\' in table \'Respondents\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableRespondents.NextContactColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string PostalCodeExt {
                get {
                    try {
                        return ((string)(this[this.tableRespondents.PostalCodeExtColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'PostalCodeExt\' in table \'Respondents\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableRespondents.PostalCodeExtColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string RespondentKey {
                get {
                    try {
                        return ((string)(this[this.tableRespondents.RespondentKeyColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'RespondentKey\' in table \'Respondents\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableRespondents.RespondentKeyColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsFirstNameNull() {
                return this.IsNull(this.tableRespondents.FirstNameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetFirstNameNull() {
                this[this.tableRespondents.FirstNameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsMiddleInitialNull() {
                return this.IsNull(this.tableRespondents.MiddleInitialColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetMiddleInitialNull() {
                this[this.tableRespondents.MiddleInitialColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsAddress1Null() {
                return this.IsNull(this.tableRespondents.Address1Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetAddress1Null() {
                this[this.tableRespondents.Address1Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsAddress2Null() {
                return this.IsNull(this.tableRespondents.Address2Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetAddress2Null() {
                this[this.tableRespondents.Address2Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCityNull() {
                return this.IsNull(this.tableRespondents.CityColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCityNull() {
                this[this.tableRespondents.CityColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsStateNull() {
                return this.IsNull(this.tableRespondents.StateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetStateNull() {
                this[this.tableRespondents.StateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPostalCodeNull() {
                return this.IsNull(this.tableRespondents.PostalCodeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPostalCodeNull() {
                this[this.tableRespondents.PostalCodeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTelephoneDayNull() {
                return this.IsNull(this.tableRespondents.TelephoneDayColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTelephoneDayNull() {
                this[this.tableRespondents.TelephoneDayColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTelephoneEveningNull() {
                return this.IsNull(this.tableRespondents.TelephoneEveningColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTelephoneEveningNull() {
                this[this.tableRespondents.TelephoneEveningColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsEmailNull() {
                return this.IsNull(this.tableRespondents.EmailColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetEmailNull() {
                this[this.tableRespondents.EmailColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDOBNull() {
                return this.IsNull(this.tableRespondents.DOBColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDOBNull() {
                this[this.tableRespondents.DOBColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsGenderNull() {
                return this.IsNull(this.tableRespondents.GenderColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetGenderNull() {
                this[this.tableRespondents.GenderColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsClientRespondentIDNull() {
                return this.IsNull(this.tableRespondents.ClientRespondentIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetClientRespondentIDNull() {
                this[this.tableRespondents.ClientRespondentIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSSNNull() {
                return this.IsNull(this.tableRespondents.SSNColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSSNNull() {
                this[this.tableRespondents.SSNColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsBatchIDNull() {
                return this.IsNull(this.tableRespondents.BatchIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetBatchIDNull() {
                this[this.tableRespondents.BatchIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsMailingSeedFlagNull() {
                return this.IsNull(this.tableRespondents.MailingSeedFlagColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetMailingSeedFlagNull() {
                this[this.tableRespondents.MailingSeedFlagColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsNextContactNull() {
                return this.IsNull(this.tableRespondents.NextContactColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetNextContactNull() {
                this[this.tableRespondents.NextContactColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPostalCodeExtNull() {
                return this.IsNull(this.tableRespondents.PostalCodeExtColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPostalCodeExtNull() {
                this[this.tableRespondents.PostalCodeExtColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsRespondentKeyNull() {
                return this.IsNull(this.tableRespondents.RespondentKeyColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetRespondentKeyNull() {
                this[this.tableRespondents.RespondentKeyColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class ScriptsRow : global::System.Data.DataRow {
            
            private ScriptsDataTable tableScripts;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ScriptsRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableScripts = ((ScriptsDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ScriptID {
                get {
                    return ((int)(this[this.tableScripts.ScriptIDColumn]));
                }
                set {
                    this[this.tableScripts.ScriptIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int SurveyID {
                get {
                    return ((int)(this[this.tableScripts.SurveyIDColumn]));
                }
                set {
                    this[this.tableScripts.SurveyIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ScriptTypeID {
                get {
                    return ((int)(this[this.tableScripts.ScriptTypeIDColumn]));
                }
                set {
                    this[this.tableScripts.ScriptTypeIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Name {
                get {
                    return ((string)(this[this.tableScripts.NameColumn]));
                }
                set {
                    this[this.tableScripts.NameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Description {
                get {
                    return ((string)(this[this.tableScripts.DescriptionColumn]));
                }
                set {
                    this[this.tableScripts.DescriptionColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal CompletenessLevel {
                get {
                    return ((decimal)(this[this.tableScripts.CompletenessLevelColumn]));
                }
                set {
                    this[this.tableScripts.CompletenessLevelColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public byte FollowSkips {
                get {
                    return ((byte)(this[this.tableScripts.FollowSkipsColumn]));
                }
                set {
                    this[this.tableScripts.FollowSkipsColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public byte CalcCompleteness {
                get {
                    return ((byte)(this[this.tableScripts.CalcCompletenessColumn]));
                }
                set {
                    this[this.tableScripts.CalcCompletenessColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public byte DefaultScript {
                get {
                    return ((byte)(this[this.tableScripts.DefaultScriptColumn]));
                }
                set {
                    this[this.tableScripts.DefaultScriptColumn] = value;
                }
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class ScriptScreenCategoriesRow : global::System.Data.DataRow {
            
            private ScriptScreenCategoriesDataTable tableScriptScreenCategories;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ScriptScreenCategoriesRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableScriptScreenCategories = ((ScriptScreenCategoriesDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ScriptScreenCategoryID {
                get {
                    return ((int)(this[this.tableScriptScreenCategories.ScriptScreenCategoryIDColumn]));
                }
                set {
                    this[this.tableScriptScreenCategories.ScriptScreenCategoryIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ScriptScreenID {
                get {
                    return ((int)(this[this.tableScriptScreenCategories.ScriptScreenIDColumn]));
                }
                set {
                    this[this.tableScriptScreenCategories.ScriptScreenIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int AnswerCategoryID {
                get {
                    return ((int)(this[this.tableScriptScreenCategories.AnswerCategoryIDColumn]));
                }
                set {
                    this[this.tableScriptScreenCategories.AnswerCategoryIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int JumpToScriptScreenID {
                get {
                    return ((int)(this[this.tableScriptScreenCategories.JumpToScriptScreenIDColumn]));
                }
                set {
                    this[this.tableScriptScreenCategories.JumpToScriptScreenIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Text {
                get {
                    try {
                        return ((string)(this[this.tableScriptScreenCategories.TextColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Text\' in table \'ScriptScreenCategories\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableScriptScreenCategories.TextColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int AnswerValue {
                get {
                    try {
                        return ((int)(this[this.tableScriptScreenCategories.AnswerValueColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'AnswerValue\' in table \'ScriptScreenCategories\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableScriptScreenCategories.AnswerValueColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int AnswerCategoryTypeID {
                get {
                    try {
                        return ((int)(this[this.tableScriptScreenCategories.AnswerCategoryTypeIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'AnswerCategoryTypeID\' in table \'ScriptScreenCategories\' is " +
                                "DBNull.", e);
                    }
                }
                set {
                    this[this.tableScriptScreenCategories.AnswerCategoryTypeIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTextNull() {
                return this.IsNull(this.tableScriptScreenCategories.TextColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTextNull() {
                this[this.tableScriptScreenCategories.TextColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsAnswerValueNull() {
                return this.IsNull(this.tableScriptScreenCategories.AnswerValueColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetAnswerValueNull() {
                this[this.tableScriptScreenCategories.AnswerValueColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsAnswerCategoryTypeIDNull() {
                return this.IsNull(this.tableScriptScreenCategories.AnswerCategoryTypeIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetAnswerCategoryTypeIDNull() {
                this[this.tableScriptScreenCategories.AnswerCategoryTypeIDColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class ScriptScreensRow : global::System.Data.DataRow {
            
            private ScriptScreensDataTable tableScriptScreens;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ScriptScreensRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableScriptScreens = ((ScriptScreensDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ScriptScreenID {
                get {
                    return ((int)(this[this.tableScriptScreens.ScriptScreenIDColumn]));
                }
                set {
                    this[this.tableScriptScreens.ScriptScreenIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ScriptID {
                get {
                    return ((int)(this[this.tableScriptScreens.ScriptIDColumn]));
                }
                set {
                    this[this.tableScriptScreens.ScriptIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int SurveyQuestionID {
                get {
                    try {
                        return ((int)(this[this.tableScriptScreens.SurveyQuestionIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'SurveyQuestionID\' in table \'ScriptScreens\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableScriptScreens.SurveyQuestionIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Title {
                get {
                    return ((string)(this[this.tableScriptScreens.TitleColumn]));
                }
                set {
                    this[this.tableScriptScreens.TitleColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Text {
                get {
                    return ((string)(this[this.tableScriptScreens.TextColumn]));
                }
                set {
                    this[this.tableScriptScreens.TextColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int CalculationTypeID {
                get {
                    return ((int)(this[this.tableScriptScreens.CalculationTypeIDColumn]));
                }
                set {
                    this[this.tableScriptScreens.CalculationTypeIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ItemOrder {
                get {
                    return ((int)(this[this.tableScriptScreens.ItemOrderColumn]));
                }
                set {
                    this[this.tableScriptScreens.ItemOrderColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int QuestionTypeID {
                get {
                    try {
                        return ((int)(this[this.tableScriptScreens.QuestionTypeIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'QuestionTypeID\' in table \'ScriptScreens\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableScriptScreens.QuestionTypeIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSurveyQuestionIDNull() {
                return this.IsNull(this.tableScriptScreens.SurveyQuestionIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSurveyQuestionIDNull() {
                this[this.tableScriptScreens.SurveyQuestionIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsQuestionTypeIDNull() {
                return this.IsNull(this.tableScriptScreens.QuestionTypeIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetQuestionTypeIDNull() {
                this[this.tableScriptScreens.QuestionTypeIDColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class SurveyInstancesRow : global::System.Data.DataRow {
            
            private SurveyInstancesDataTable tableSurveyInstances;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal SurveyInstancesRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableSurveyInstances = ((SurveyInstancesDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int SurveyInstanceID {
                get {
                    return ((int)(this[this.tableSurveyInstances.SurveyInstanceIDColumn]));
                }
                set {
                    this[this.tableSurveyInstances.SurveyInstanceIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int SurveyID {
                get {
                    return ((int)(this[this.tableSurveyInstances.SurveyIDColumn]));
                }
                set {
                    this[this.tableSurveyInstances.SurveyIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ClientID {
                get {
                    return ((int)(this[this.tableSurveyInstances.ClientIDColumn]));
                }
                set {
                    this[this.tableSurveyInstances.ClientIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ProtocolID {
                get {
                    return ((int)(this[this.tableSurveyInstances.ProtocolIDColumn]));
                }
                set {
                    this[this.tableSurveyInstances.ProtocolIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Name {
                get {
                    return ((string)(this[this.tableSurveyInstances.NameColumn]));
                }
                set {
                    this[this.tableSurveyInstances.NameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime InstanceDate {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableSurveyInstances.InstanceDateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'InstanceDate\' in table \'SurveyInstances\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSurveyInstances.InstanceDateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime StartDate {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableSurveyInstances.StartDateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'StartDate\' in table \'SurveyInstances\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSurveyInstances.StartDateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public byte Active {
                get {
                    return ((byte)(this[this.tableSurveyInstances.ActiveColumn]));
                }
                set {
                    this[this.tableSurveyInstances.ActiveColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public byte GroupByHousehold {
                get {
                    return ((byte)(this[this.tableSurveyInstances.GroupByHouseholdColumn]));
                }
                set {
                    this[this.tableSurveyInstances.GroupByHouseholdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int SurveyInstanceCategoryID {
                get {
                    try {
                        return ((int)(this[this.tableSurveyInstances.SurveyInstanceCategoryIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'SurveyInstanceCategoryID\' in table \'SurveyInstances\' is DBN" +
                                "ull.", e);
                    }
                }
                set {
                    this[this.tableSurveyInstances.SurveyInstanceCategoryIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string SurveyInstanceKey {
                get {
                    try {
                        return ((string)(this[this.tableSurveyInstances.SurveyInstanceKeyColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'SurveyInstanceKey\' in table \'SurveyInstances\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSurveyInstances.SurveyInstanceKeyColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime QuarterEnding {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableSurveyInstances.QuarterEndingColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'QuarterEnding\' in table \'SurveyInstances\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSurveyInstances.QuarterEndingColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsInstanceDateNull() {
                return this.IsNull(this.tableSurveyInstances.InstanceDateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetInstanceDateNull() {
                this[this.tableSurveyInstances.InstanceDateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsStartDateNull() {
                return this.IsNull(this.tableSurveyInstances.StartDateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetStartDateNull() {
                this[this.tableSurveyInstances.StartDateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSurveyInstanceCategoryIDNull() {
                return this.IsNull(this.tableSurveyInstances.SurveyInstanceCategoryIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSurveyInstanceCategoryIDNull() {
                this[this.tableSurveyInstances.SurveyInstanceCategoryIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSurveyInstanceKeyNull() {
                return this.IsNull(this.tableSurveyInstances.SurveyInstanceKeyColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSurveyInstanceKeyNull() {
                this[this.tableSurveyInstances.SurveyInstanceKeyColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsQuarterEndingNull() {
                return this.IsNull(this.tableSurveyInstances.QuarterEndingColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetQuarterEndingNull() {
                this[this.tableSurveyInstances.QuarterEndingColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class SurveysRow : global::System.Data.DataRow {
            
            private SurveysDataTable tableSurveys;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal SurveysRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableSurveys = ((SurveysDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int SurveyID {
                get {
                    return ((int)(this[this.tableSurveys.SurveyIDColumn]));
                }
                set {
                    this[this.tableSurveys.SurveyIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Name {
                get {
                    return ((string)(this[this.tableSurveys.NameColumn]));
                }
                set {
                    this[this.tableSurveys.NameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Description {
                get {
                    return ((string)(this[this.tableSurveys.DescriptionColumn]));
                }
                set {
                    this[this.tableSurveys.DescriptionColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int CreatedByUserID {
                get {
                    return ((int)(this[this.tableSurveys.CreatedByUserIDColumn]));
                }
                set {
                    this[this.tableSurveys.CreatedByUserIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime CreatedOnDate {
                get {
                    return ((global::System.DateTime)(this[this.tableSurveys.CreatedOnDateColumn]));
                }
                set {
                    this[this.tableSurveys.CreatedOnDateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public byte Active {
                get {
                    return ((byte)(this[this.tableSurveys.ActiveColumn]));
                }
                set {
                    this[this.tableSurveys.ActiveColumn] = value;
                }
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class ResponsesRow : global::System.Data.DataRow {
            
            private ResponsesDataTable tableResponses;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ResponsesRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableResponses = ((ResponsesDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ResponseID {
                get {
                    return ((int)(this[this.tableResponses.ResponseIDColumn]));
                }
                set {
                    this[this.tableResponses.ResponseIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int RespondentID {
                get {
                    return ((int)(this[this.tableResponses.RespondentIDColumn]));
                }
                set {
                    this[this.tableResponses.RespondentIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int SurveyQuestionID {
                get {
                    return ((int)(this[this.tableResponses.SurveyQuestionIDColumn]));
                }
                set {
                    this[this.tableResponses.SurveyQuestionIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int AnswerCategoryID {
                get {
                    return ((int)(this[this.tableResponses.AnswerCategoryIDColumn]));
                }
                set {
                    this[this.tableResponses.AnswerCategoryIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ResponseText {
                get {
                    return ((string)(this[this.tableResponses.ResponseTextColumn]));
                }
                set {
                    this[this.tableResponses.ResponseTextColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int UserID {
                get {
                    try {
                        return ((int)(this[this.tableResponses.UserIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'UserID\' in table \'Responses\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableResponses.UserIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsUserIDNull() {
                return this.IsNull(this.tableResponses.UserIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetUserIDNull() {
                this[this.tableResponses.UserIDColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class ClientsRow : global::System.Data.DataRow {
            
            private ClientsDataTable tableClients;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ClientsRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableClients = ((ClientsDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ClientID {
                get {
                    return ((int)(this[this.tableClients.ClientIDColumn]));
                }
                set {
                    this[this.tableClients.ClientIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Name {
                get {
                    return ((string)(this[this.tableClients.NameColumn]));
                }
                set {
                    this[this.tableClients.NameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Address1 {
                get {
                    return ((string)(this[this.tableClients.Address1Column]));
                }
                set {
                    this[this.tableClients.Address1Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Address2 {
                get {
                    return ((string)(this[this.tableClients.Address2Column]));
                }
                set {
                    this[this.tableClients.Address2Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string City {
                get {
                    return ((string)(this[this.tableClients.CityColumn]));
                }
                set {
                    this[this.tableClients.CityColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string State {
                get {
                    return ((string)(this[this.tableClients.StateColumn]));
                }
                set {
                    this[this.tableClients.StateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string PostalCode {
                get {
                    return ((string)(this[this.tableClients.PostalCodeColumn]));
                }
                set {
                    this[this.tableClients.PostalCodeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Telephone {
                get {
                    return ((string)(this[this.tableClients.TelephoneColumn]));
                }
                set {
                    this[this.tableClients.TelephoneColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Fax {
                get {
                    return ((string)(this[this.tableClients.FaxColumn]));
                }
                set {
                    this[this.tableClients.FaxColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public byte Active {
                get {
                    return ((byte)(this[this.tableClients.ActiveColumn]));
                }
                set {
                    this[this.tableClients.ActiveColumn] = value;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class EventLogRowChangeEvent : global::System.EventArgs {
            
            private EventLogRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public EventLogRowChangeEvent(EventLogRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public EventLogRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class RespondentPropertiesRowChangeEvent : global::System.EventArgs {
            
            private RespondentPropertiesRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public RespondentPropertiesRowChangeEvent(RespondentPropertiesRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public RespondentPropertiesRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class RespondentsRowChangeEvent : global::System.EventArgs {
            
            private RespondentsRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public RespondentsRowChangeEvent(RespondentsRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public RespondentsRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class ScriptsRowChangeEvent : global::System.EventArgs {
            
            private ScriptsRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ScriptsRowChangeEvent(ScriptsRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ScriptsRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class ScriptScreenCategoriesRowChangeEvent : global::System.EventArgs {
            
            private ScriptScreenCategoriesRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ScriptScreenCategoriesRowChangeEvent(ScriptScreenCategoriesRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ScriptScreenCategoriesRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class ScriptScreensRowChangeEvent : global::System.EventArgs {
            
            private ScriptScreensRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ScriptScreensRowChangeEvent(ScriptScreensRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ScriptScreensRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class SurveyInstancesRowChangeEvent : global::System.EventArgs {
            
            private SurveyInstancesRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SurveyInstancesRowChangeEvent(SurveyInstancesRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SurveyInstancesRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class SurveysRowChangeEvent : global::System.EventArgs {
            
            private SurveysRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SurveysRowChangeEvent(SurveysRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SurveysRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class ResponsesRowChangeEvent : global::System.EventArgs {
            
            private ResponsesRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ResponsesRowChangeEvent(ResponsesRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ResponsesRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class ClientsRowChangeEvent : global::System.EventArgs {
            
            private ClientsRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ClientsRowChangeEvent(ClientsRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ClientsRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}

#pragma warning restore 1591